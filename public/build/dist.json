{
  "index": [
    {
      "name": "Modifier Keys",
      "id": "modifier-keys",
      "files": [
        {
          "path": "json/disable_wifidiagnostics.json",
          "json": {
            "title": "Disable WifiDiagnostics shortcuts (Free up Hyper-W)",
            "rules": [
              {
                "description": "Disable command+control+option+shift+, which triggers WiFi logging."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_bbeerr_rk61.json",
          "json": {
            "title": "bbeerr's RK61 Hybrid Tier",
            "conditions": [
              {
                "type": "device_if",
                "identifiers": [
                  {
                    "is_built_in_keyboard": false,
                    "is_keyboard": true,
                    "is_pointing_device": false,
                    "vendor_id": 1452
                  }
                ]
              }
            ],
            "maintainers": [
              "beermindnor"
            ],
            "rules": [
              {
                "description": "left_control + (left_shift + esc → ~), (esc → `)"
              },
              {
                "description": "up_arrow turn to slash when press with left_command or left_shift"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl_to_hyper.json",
          "json": {
            "title": "Ctrl Key → Hyper Key (⌃⌥⇧⌘)",
            "rules": [
              {
                "description": "Ctrl Key → Hyper Key (⌃⌥⇧⌘)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/hyper_key.json",
          "json": {
            "title": "Caps Lock → Hyper Key (⌃⌥⇧⌘) (Caps Lock if alone)",
            "rules": [
              {
                "description": "Caps Lock → Hyper Key (⌃⌥⇧⌘) (Caps Lock if alone)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/bepo-cmdqwerty-toggle.json",
          "json": {
            "title": "Bepo CmdQwerty Toggle",
            "rules": [
              {
                "description": "While using Programmer Bepo, holding command temporarily switches to the Australian qwerty layout."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/both-command_l-and-command_r-to-escape.json",
          "json": {
            "title": "Change Command_L (Left Command) and Command_R (Right Command) to Esc Key ",
            "rules": [
              {
                "description": "Change Command_L + Command_R to escape only if pressed at the same time."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/caps_lock.json",
          "json": {
            "title": "Change caps_lock key (rev 5)",
            "rules": [
              {
                "description": "Change caps_lock key to command+control+option+shift if pressed with other keys"
              },
              {
                "description": "Change caps_lock key to command+control+option+shift. (Post escape key when pressed alone)"
              },
              {
                "description": "Change caps_lock key to command+control+option+shift. (Post f19 key when pressed alone)"
              },
              {
                "description": "Change caps_lock key to command+control+option+shift. (Use shift+caps_lock as caps_lock)"
              },
              {
                "description": "Change caps_lock to control if pressed with other keys, to escape if pressed alone."
              },
              {
                "description": "Change caps_lock to control if pressed with other keys. (rev 2)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/caps_media.json",
          "json": {
            "title": "Capslock + Arrows for media keys",
            "rules": [
              {
                "description": "CapsLock to Hyper/Escape"
              },
              {
                "description": "Hyper + arrow keys to media"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/caps_num_to_func_keys.json",
          "json": {
            "title": "Capslock + number => Function keys",
            "author": "https://github.com/rlei",
            "repo": "https://github.com/rlei/KE-complex_modifications",
            "rules": [
              {
                "description": "Caps lock and 1234...890-+ to F1..F12"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/capslock-navigate-tabs.json",
          "json": {
            "title": "[macOS] Use Caps Lock + Arrows to Navigate Tabs",
            "rules": [
              {
                "description": "Navigate Tabs with CapsLock + Any Arrows"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/change_command_l.json",
          "json": {
            "title": "Change Command_L Key (Left Command)",
            "rules": [
              {
                "description": "Change Command_R + Command_L to escape only if pressed at the same time."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/change_command_r.json",
          "json": {
            "title": "Change Command_R Key (Right Command)",
            "rules": [
              {
                "description": "Post Escape if Command_R is pressed alone."
              },
              {
                "description": "Post Escape if Command_R is pressed alone. Control Left if held"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/cmd+d_down_arrow.json",
          "json": {
            "title": "Command_L|Command_R + d to down arrow",
            "rules": [
              {
                "description": "Command_L|Command_R + d to down arrow"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/command_l-and-caps_lock-to-escape.json",
          "json": {
            "title": "Change Command_L (Left Command) and Caps_Lock Key ",
            "rules": [
              {
                "description": "Change Command_L + Caps_Lock to escape only if pressed at the same time."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/right_command_plus_ijkl_to_arrow_keys.json",
          "json": {
            "title": "right_command + i/j/k/l to arrow keys",
            "rules": [
              {
                "description": "Change right_command + i/j/k/l to Arrows"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/control.json",
          "json": {
            "title": "Change control key",
            "rules": [
              {
                "description": "Post escape if left_control is pressed alone."
              },
              {
                "description": "Post caps_lock if left_control is pressed alone."
              },
              {
                "description": "Post return_or_enter if right_control is pressed alone."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl_command_fn_letter_specials.json",
          "json": {
            "title": "Change control and Fn + letter keys to command and control keys",
            "rules": [
              {
                "description": "Change left_control + letter to left_command + letter"
              },
              {
                "description": "Change fn + letter to left_control + letter"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/double_tap_cmd_to_ctrl.json",
          "json": {
            "title": "Double tab left_command to become left_control",
            "rules": [
              {
                "description": "Double tab and hold left_command to become left_control. Once released, returns to left_command. Useful for scrolling through windows with left_control + tab"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/double_tap_ctrl_to_cmd.json",
          "json": {
            "title": "Double tab left_control to become left_command",
            "rules": [
              {
                "description": "Double tab and hold left_control to become left_command. Once released, returns to left_control. Useful for scrolling through windows with left_command + tab"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/e0da_caps_lock.json",
          "json": {
            "title": "e0da Caps Lock",
            "rules": [
              {
                "description": "shift+caps_lock->caps_lock; caps_lock+[...keys] -> control+[..keys]; caps_lock -> escape"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/function_keys.json",
          "extra_description_path": "extra_descriptions/function_keys.json.html",
          "json": {
            "title": "Function keys work as fn keys (instead of media keys)",
            "maintainers": [
              "harmtemolder"
            ],
            "rules": [
              {
                "description": "(Atom, CKII, EUIV, iTerm, muCommander, PyCharm, VSCodium, WebStorm, AndroidStudio) Function keys work as fn keys"
              }
            ]
          },
          "extra_description_text": "This mod maps your function keys (F1–F12) to themselves for a predefined selection of apps. (I left my selection in there as an example, so please use the “Frontmost application” tab of Karabiner's EventViewer to find bundle identifiers and file paths for your apps.) I have set this up as follows: Each function key in the “Function keys” tab is set to whatever I want it to do. (A combination of media buttons and custom actions through Hammerspoon.) “Use all F1, F2, etc. keys as standard function keys” unchecked, so that the above mappings apply without pressing fn. This modification added to the “Complex modifications” tab. This way I can use the function keys as function keys within the following apps, and as media buttons in all others: Atom Crusader Kings II Europa Universalis IV iTerm2 muCommander PyCharm VSCodium"
        },
        {
          "path": "json/Jesse_Tutorial_Hyper_Plus_Others.json",
          "json": {
            "title": "CAPS_LOCK to Hyper/Escape, Hyper + i/j/k/l Vim navigation and others.",
            "rules": [
              {
                "description": "CAPS_LOCK to HYPER (SHIFT+COMMAND+OPTION+CONTROL) or ESCAPE (If Alone)"
              },
              {
                "description": "Toggle caps_lock by pressing left_shift then right_shift"
              },
              {
                "description": "Shifts Move Forward and Backward by 1 word"
              },
              {
                "description": "CMD + W to NOTHING"
              },
              {
                "description": "Double tap cmd closes apps"
              },
              {
                "description": "Hyper + SPACE : Toggle Alfred"
              },
              {
                "description": "Open Screenshot.app with Print_Screen key"
              },
              {
                "description": "Hyper + i/j/k/l == vim directional Keys"
              },
              {
                "description": "o Launcher"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/JesseHyperPlusVimNavigation.json",
          "json": {
            "title": "CAPS_LOCK to Hyper/Escape (SHIFT+COMMAND+OPTION+CONTROL) & Hyper + VIM Navigation keys",
            "rules": [
              {
                "description": "CMD + W : NOTHING"
              },
              {
                "description": "CAPS_LOCK : (HYPER) SHIFT+COMMAND+OPTION+CONTROL or ESCAPE (If Alone)"
              },
              {
                "description": "Toggle CAPS_LOCK with LEFT_SHIFT + RIGHT_SHIFT"
              },
              {
                "description": "CAPS_LOCK + SPACE : Toggle Alfred"
              },
              {
                "description": "CAPS_LOCK + i/j/k/l == Arrow Keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/pc_style_modifiers.json",
          "json": {
            "title": "PC-Style Modifiers",
            "rules": [
              {
                "description": "Swap Command with Ctrl"
              },
              {
                "description": "Option+Tab to Command+Tab"
              },
              {
                "description": "Option+Backtick to Command+Backtick"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/shift.json",
          "json": {
            "title": "Change shift key (rev 2)",
            "rules": [
              {
                "description": "Change left_shift to caps_lock if pressed alone (rev 2)"
              },
              {
                "description": "Change right_shift to caps_lock if pressed alone"
              },
              {
                "description": "Toggle caps_lock by pressing left_shift + right_shift at the same time"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/windows_like_word_bindings.json",
          "json": {
            "title": "[macOS] Windows-like word movement/selection/deletion",
            "maintainers": [
              "tyru"
            ],
            "rules": [
              {
                "description": "Ctrl + Arrow Keys to Option + Arrow Keys"
              },
              {
                "description": "Ctrl + Shift + Arrow Keys to Option + Shift + Arrow Keys"
              },
              {
                "description": "Ctrl + BS/Del Keys to Option + BS/Del Keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/remap_rshift_esc_to_tilde.json",
          "json": {
            "title": "Remap R_Shift+ESC to Tilde rules",
            "rules": [
              {
                "description": "Remap R_Shift+ESC to Tilde"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/rshift_up_if_alone.json",
          "json": {
            "title": "Right Shift Up if alone",
            "rules": [
              {
                "description": "Right Shift Up if alone"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/minimal_dual_keys.json",
          "extra_description_path": "extra_descriptions/minimal_dual_keys.json.html",
          "json": {
            "title": "Minimal dual keys",
            "maintainers": [
              "yeonsh"
            ],
            "rules": [
              {
                "description": "Minimal dual keys"
              }
            ]
          },
          "extra_description_text": "Minimal Dual keys Key bindings Key When pressed alone When held down Left CMD Backspace Left CMD Right CMD Enter Right CMD Left SHIFTtd> Enter Left SHIFTtd>"
        },
        {
          "path": "json/capslock2command.json",
          "json": {
            "title": "Change caps_lock to command ",
            "rules": [
              {
                "description": "Change caps_lock to Command if pressed with other keys, to escape if pressed alone."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/simvi.json",
          "extra_description_path": "extra_descriptions/simvi.html",
          "json": {
            "title": "Simvi",
            "rules": [
              {
                "description": "Simvi Hyun's personal mod"
              }
            ]
          },
          "extra_description_text": "simvi - simple vi mode from tekezo's vi, dosen't work with mac os's combination move keys so I added keysets like below for work with mac os's combination keys option + s + h,j,k,l shift + option + s + h,j,k,l command + s + h,j,k,l shift + command + s + h,j,k,l highly recommended to vi + mac combination keys lover users"
        },
        {
          "path": "json/mouse_key_gesture.json",
          "json": {
            "title": "mouse_key_gesture",
            "rules": [
              {
                "description": "button5 to mission_control"
              },
              {
                "description": "button4 to command + ["
              },
              {
                "description": "option & button4 to command + ]"
              },
              {
                "description": "control & button5 to Left Desktop"
              },
              {
                "description": "option & button5 to Right Desktop"
              },
              {
                "description": "button3 to command + m"
              },
              {
                "description": "option & button3 to command + h"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/map_esc_grave_accent_and_tilde.json",
          "json": {
            "title": "shift + Esc Tilde to ~, command + Esc Tilde to `",
            "rules": [
              {
                "description": "command + Esc, Tilde to `"
              },
              {
                "description": "shift + Esc, Tilde to ~"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swap_right_cmd_with_right_option.json",
          "extra_description_path": "extra_descriptions/swap_right_cmd_with_right_option.json.html",
          "json": {
            "title": "Swap right cmd with right option",
            "maintainers": [
              "devnoname120"
            ],
            "rules": [
              {
                "description": "Swap right cmd with right option"
              }
            ]
          },
          "extra_description_text": "This swaps right cmd with right option. This is helpful for keyboard layouts (such as the qwerty-fr layout) that rely heavily on dead keys that are activated using the option key. Learn more about the qwerty-fr here."
        },
        {
          "path": "json/swap_alt_with_command.json",
          "json": {
            "title": "Windows Keyboard on Mac",
            "rules": [
              {
                "description": "Swap left_command with left_option"
              },
              {
                "description": "Swap right_command with right_option"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl_option_command_tab_change.json",
          "json": {
            "title": "Ctrl/Option/Command + Tab Change",
            "rules": [
              {
                "description": "Ctrl/Option/Command + Tab Change"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swap_alt_cmd_in_term.json",
          "json": {
            "title": "Swap CMD and Option keys in the terminal (useful for CMD + f/b/d/./_ shell keybindings)",
            "maintainers": [
              "jjo"
            ],
            "rules": [
              {
                "description": "Swap CMD and Option keys in the terminal (useful for CMD + f/b/d/./_ shell keybindings)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/control_shift_copy_paste.json",
          "json": {
            "title": "Map Control_Shift + C/V to copy/paste in term (ala Linux)",
            "maintainers": [
              "jjo"
            ],
            "rules": [
              {
                "description": "Map Control_Shift + C/V to copy/paste in term (ala Linux)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/capslock_shift_copy_paste.json",
          "json": {
            "title": "Map Capslock_Shift + C/V to copy/paste in term (ala Linux)",
            "maintainers": [
              "jjo"
            ],
            "rules": [
              {
                "description": "Map Capslock_Shift + C/V to copy/paste in term (ala Linux)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/option-tab_to_command-tab.json",
          "extra_description_path": "extra_descriptions/option-tab_to_command-tab.json.html",
          "json": {
            "title": "Bind Option+Tab to Command+Tab ('cycle through applications')",
            "rules": [
              {
                "description": "Bind Option+Tab to Command+Tab"
              }
            ]
          },
          "extra_description_text": "Use '⌥+Tab' to cycle through applications (in addition to the default '⌘+Tab')"
        },
        {
          "path": "json/left_command_insert_delete_home_end_pageup_pagedown_to_media.json",
          "json": {
            "title": "left_command + Insert/Delete/Home/End/PageUp/PageDown to Media controls",
            "rules": [
              {
                "description": "Change left_command + Insert/Delete/Home/End/PageUp/PageDown to Media controls"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/backspace_enhancements.json",
          "json": {
            "title": "Backspace Enhancements",
            "rules": [
              {
                "description": "Map Shift + Backspace to Forward Delete"
              },
              {
                "description": "Map = and Backspace to Forward Delete"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/caps_lock_tapped_caps_held_cmd.json",
          "json": {
            "title": "Change caps_lock to dual keys, caps_lock and left_command.",
            "rules": [
              {
                "description": "Change caps_lock to left_command if pressed with other keys, keep caps_lock if pressed alone. It's same as LGUI_T(KC_CAPS) in qmk"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/right_shift_to_switch_language.json",
          "json": {
            "title": "Right Shift to Cmd+Space if alone (to redefine language switch to right shift)",
            "rules": [
              {
                "description": "Right Shift to Cmd+Space if alone"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fn_wasdqerf.json",
          "extra_description_path": "extra_descriptions/fn_wasdqerf.html",
          "json": {
            "title": "Fn/Caps + WASD(↑←↓→) / QE(Home End) / RF(PageUp PageDown)",
            "rules": [
              {
                "description": "Change Caps to Fn"
              },
              {
                "description": "Change fn + W/A/S/D to Arrow Keys"
              },
              {
                "description": "Change fn + Q/E to Home/End"
              },
              {
                "description": "Change fn + R/F to PageUp/PageDown"
              }
            ]
          },
          "extra_description_text": "Fn/Caps + WASD(↑←↓→) / QE(Home End) / RF(PageUp PageDown) This rule is inspired by \"Caps Lock W/A/S/D Arrows\" and replaced the extra layer with the form of combination keys. Replace Caps with Fn, then modify W/A/S/D/Q/E/R/F with Fn to ↑/←/↓/→/Home/End/PageUp/PageDown. Usage notes To make this rule work properly, you need to change [System Preferences> Keyboard> Press Fn] from [Change Input Source] to [Do Nothing]. Key Map Key Maps To W Up A Left S Down D Right Q Home E End R Page Up F Page Down"
        },
        {
          "path": "json/keypad_comma_to_period.json",
          "extra_description_path": "extra_descriptions/keypad_comma_to_period_json.html",
          "json": {
            "title": "Keypad comma to period",
            "rules": [
              {
                "description": "Keypad Period to Comma+shift (period) Belgian Keyboard"
              }
            ]
          },
          "extra_description_text": "Version 1.0 On Belgian keyboard layout, the keypad period gives a comma. This modification allows getting a period in place of a comma. More information: Raise an issue on the fork."
        }
      ]
    },
    {
      "name": "Emulation Modes",
      "id": "emulation-modes",
      "files": [
        {
          "path": "json/hhkb-like-arrows-and-page-control.json",
          "json": {
            "title": "HHKB-like arrow and page control",
            "rules": [
              {
                "description": "HHKB-like arrow and page control"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/caps_lock_enhancement.json",
          "extra_description_path": "extra_descriptions/caps_lock_enhancement.json.html",
          "json": {
            "title": "Capslock Enhancement",
            "url": "https://vonng.com/capslock.json",
            "version": "3.0.3",
            "maintainers": [
              "Vonng"
            ],
            "author": "Vonng(rh@vonng.com)",
            "website": "http://capslock.vonng.com",
            "json_url": "https://vonng.com/capslock.json",
            "import_url": "karabiner://karabiner/assets/complex_modifications/import?url=https://vonng.com/capslock.json",
            "gallery_url": "https://ke-complex-modifications.pqrs.org/#emulation-modes",
            "repo": "https://github.com/Vonng/Capslock",
            "rules": [
              {
                "description": "CapsLock to Hyper"
              },
              {
                "description": "Hyper Navigation"
              },
              {
                "description": "Hyper Deletion"
              },
              {
                "description": "Hyper MouseKey"
              },
              {
                "description": "Hyper Window"
              },
              {
                "description": "Hyper Application"
              },
              {
                "description": "Hyper Terminal"
              },
              {
                "description": "Hyper Clipboard"
              },
              {
                "description": "Hyper Shifter"
              },
              {
                "description": "Hyper Functional"
              }
            ]
          },
          "extra_description_text": "Capslock Enhancement (rev 3) Transform ⇪CapsLock into a powerful modifier ✱ Hyper that miraculously increases your work productivity! Check Capslock Enhancement Site and Repo for more information. Author： Vonng (rh@vonng.com) Latest Import URL (v3): https://vonng.com/capslock.json Github Import URL (v3): https://github.com/Vonng/Capslock/raw/master/mac_v3/capslock.json &nbsp;Basic Press ⇪ Capslock to ⎋ Escape, and hold it to ✱ Hyper Key MapsTo Comment ⇪ Press ⎋ Escape Click Capslock to emit Escape ⇪ Hold ✱ Hyper Hold Capslock to enable Hyper modifier ✱⎋ ⇪ Capslock Press to switch Capslock status ✱␣ ⌃␣ Press to switch input source +⌘ to emoji Note that ✱ is implemented as combination of ALL RIGHT MODIFIERS: ⌘⌥⌃⇧. Hold ✱ Hyper to enable other hyper functionalities Category Color Description Basic Blue Press ⇪ Capslock emit an ⎋ Escape. Hold it enabling the ✱ Hyper Modifier. Navigation Pink Vim style navigation. Cursor move, text selection, switch desktop/window/tab, mouse move/wheel,etc... Deletion Brown Maps BNM, to deletion operation to perform fast char/word/line deletion without hand move. MouseKey Keypad Maps keypad to fully functional mouse Window Azure Close app/win/tab, Switch app/win/tab/desktop, intergration with win-manager app such as Moom,Slate,Magnet Application Yellow Shortcuts for launching or switching frequently used applications Terminal Green Sending high-freq signals (Ctrl-Z, Ctrl-D, Ctrl-C) and vim/tmux prefix meta key via ✱ Clipboard Purple Turn numkeys into 10 different text clipboard. ✱⌘n copy and ✱n paste. Shifter Orange Turn some keys into common code symbols. Functional Cyan Screenshtots. Fine-grained light/volume control. Take function keys' function back! Navigation H, J, K, L, U, I, O, P are used as Navigators. Maps to ← ↓ ↑ → ⇞ ↖ ↘ ⇟ by default. (pink area). Hold additional ⌘ Command for selection. (like holding ⇧Shift in normal), additional ⌥ Option for word/para selection. Hold additional ⇧ Shift for app/win/tab switching. Hold additional ⌃ Control for desktop management . Hold additional ⌥ Option for 🖱️ mouse move. Add ⇧Shift to ⏫ accelerate. (U, I, O, P maps to mouse button 1 2 4 5) . ⇧⌥ turns navigator to 🖲️ mouse wheel, and ⇧⌘ is the ⏫ accelerated version . HJKL for wheel, wihle UIOP for reversed. Feature Move Select WordSel Window Desktop 🖱️ 🖱️⏫ 🖲️ 🖲️⏫ Key \\ Mod ✱ ⌘ ⌘⌥ ⇧ ⌃ ⌥ ⇧⌥ ⇧⌃ ⇧⌘ H Left word left word left prev tab prev desk ⬅️ ⬅️⏫ ⬅️ ⬅️⏫ J Down line down 3 line down next app focus ⬇️ ⬇️⏫ ⬇️ ⬇️⏫ K Up line up 3 line up prev app expose all ⬆️ ⬆️⏫ ⬆️ ⬆️⏫ L Right word right word right next tab next desk ➡️ ➡️⏫ ➡️ ➡️⏫ U PgUp prev page prev page zoom- fullscreen 🖱️L 🖱️L ➡️ ➡️⏫ I Home line head end2head prev win hide 🖱️R 🖱️R ⬆️ ⬆️⏫ O End line end head2end next win hide all 🖱️B 🖱️B ⬇️ ⬇️⏫ P PgDn next page next page zoom+ Launchpad 🖱️F 🖱️F ⬅️ ⬅️⏫ Arrow Navigation Arrows ←↓↑→ to 🖱️ mouse actions too. Hold ⌥ Option to ⏬ slow down, hold ⌘ Command to ⏫ speed up. Hold ⇧ Shift turns to 🖲️ wheel move. Extra ⌥ Option to ⏬ slow down, extra ⌘ Command to ⏫ speed up. ↩ Return maps to left click. And additional ⌘⌥⌃⇧ turns into right click, middle click, backward, forward. Feature Mouse 🖱️ Mouse Slow🖱️⏬ Mouse Fast🖱️⏫ Wheel🖲️ Wheel Slow🖲️⏬ Wheel Fast🖲️⏫ Key\\Mod ✱ ⌥ ⌘ ``⇧ ⇧⌥ ⇧⌘ ←↓↑→ speed = 1600 speed ÷ 2 speed × 2 speed = 32 speed ÷ 2 speed × 2 ↩ 🖱️Left Click 🖱️Middle 🖱️Right Click 🖱️LClick 🖱️Backward 🖱️Forward Deletion N M , . are used as Deletor keys. Right below the navigators for fast access (brown area). Key\\Mod ✱ ⌘ ⌥ N del a word ahead del till line head del the whole line M del a char ahead del a word ahead move line below , del a char after del a word after move line above . del a word after del till line end del the whole line ⌫ del file purge file &nbsp; Mousekey Turn Keypad into a fully funcional 🖱️ mouse. Numbers maps to 8 direction 🖱️ mouse move. Hold ⌥ Option to ⏬ slow down, hold ⌘ Command to ⏫ speed up. Hold additional ⇧ Shift turns to 🖲️ wheel move. Extra ⌥ Option to ⏬ slow down, and extra ⌘ Command to ⏫ speed up. First line maps to wheel move and 0, ., ⌤, +, - maps to five mouse buttons. ⇭ 🖲️⬅️ = 🖲️⬇️ / 🖲️⬆️ * 🖲️➡️ 7 🖱️↖️ 8 🖱️⬆️ 9 🖱️↗️ - 🖱️Backward 4 🖱️⬅️ 5🖱️ 6 🖱️➡️ + 🖱️Forward 1 🖱️↙️ 2 🖱️⬇️ 3 🖱️↘️ &nbsp; 0 🖱️LClick &nbsp; . 🖱️MClick ⌤ 🖱️RClick Window Control Tab, Q, W, A, s used as window control keys. Focuing on close/switch applications / windows / tabs / desktops. (azure area) Windows management (resize, layout) leaves to external application such as Moom, Magnet, and Slate. Bind ⌃⌥⇧⌘A manually. Key\\Mod ✱ ⌘ ⌥ ⌃ ⇧ ⇥ next app prev app switch desktop &nbsp; switch tab Q close app close app &nbsp; Lock Screen Logout W close tab close all win &nbsp; Display Sleep Sleep A win app expose all show desktop LaunchPad &nbsp; S next tab prev tab next win prev win &nbsp; App Shortcuts E R T Y F G are used as application shortcuts. (yellow area) Popular apps and dev tools are registed to 3 default planes: ✱/⌘/⌥. Assign these shortcuts according to your own needs. Key\\Mod ✱ ⌘ ⌥ E Safari Finder Mail R iTerm2 Preview Terminal T Visual Studio Code Typora Note Y Siri Karabiner Amphetamine F Alfred 4 Dash Dictionary G Intellij IDEA Chrome Calender Terminal ControlD, Z, X, C, V, B are used as terminal control keys. Sending signals and IDE commands. (green area) Key\\Mod ✱ ⌘ D ⌃D Ctrl+D (Send EOF) Define (Force touch) Z ⌃Z Ctrl+Z (SIGTSTP) F5 (VS Code Debug) X ⌃R Ctrl+R (IDE Run) ⌃F5 (VS Code Run) C ⌃C Ctrl+C (SIGINT) ⇧F5 （VS Code Stop） V ⌃V Ctrl+V (Vim Prefix) &nbsp; B ⌃B Ctrl+B (Tmux Prefix) &nbsp; ClipboardNumber keys 1, 2, …, 9, 0 are used as (text) clipboard. Hold ⌘ to copy, and press to paste. (purple area) Key\\Mod ✱ ⌘ 1 Paste from clip 1 Copy to clip 1 2 Paste from clip 2 Copy to clip 2 …… …… …… 0 Paste from clip 0 Copy to clip 10 Shifter Trivial transformation for misc characters. (orange area) Some special tricks for developers. Such as ;' maps to := or != (⌘) Key\\Mod ✱ ⌘ ⌥ - _ Zoom Out &nbsp; = + Zoom In &nbsp; [ ( { < ] ) } > ; ! : &nbsp; ' = = &nbsp; / ⌘/ &nbsp; &nbsp; \\ ⌘/ &nbsp; &nbsp; Functional Use F1,… F12 as standard functional keys, while hold ✱ Hyper to turn them back. (cyan area) ⌘Command + F1 / F2 / F3 are used as desktop switcher. Enable shortcuts in system preference first: Preference → Keyboard → Shortcuts → MissionControl → Switch to Desktop 1/2/3 If you are using RMBP with Bar, consider changing your bar back to function keys with: Karabiner-Elements → Function Keys → Use all F1, F2, etc. keys as standard function keys Key\\Mod ✱ ⌘ Comment ~ ⌃⇧⌘4 ⇧⌘4 Area selection screenshot(⌘ to file) F1 display_brightness_decrement | ⌃1 ⌃1 Brightness Down / Desktop 1 F2 display_brightness_increment | ⌃2 ⌃2 Brightness Up / Desktop 2 F3 ⌃↑ | ⌃3 ⌃3 Expose All / Desktop 3 F4 Launchpad &nbsp; Launchpad F5 illumination_decrement &nbsp; Keyboard Light Down F6 illumination_increment &nbsp; Keyboard Light Up F7 rewind &nbsp; Music Prev F8 play_or_pause &nbsp; Play / Pause F9 fastforward &nbsp; Music Next F10 mute &nbsp; Mute F11 volume_decrement &nbsp; Volume Down F12 volume_increment &nbsp; Volume Up F13 ⌃⇧⌘3 ⇧⌘3 Full Screentshot (⌘ to file) F14 ⇧⌘5 ⇧⌘6 Screenshot menu (⌘ touchbar snap) F15 play_or_pause &nbsp; Play / Pause Insert ⇧⌥ display_brightness_increment &nbsp; Fine-Grained Brightness Up Delete ⌦ ⇧⌥ display_brightness_decrement &nbsp; Fine-Grained Brightness Down Home ↖ ⇧⌥ illumination_increment &nbsp; Fine-GrainedKeyboard Light Up End ↘ ⇧⌥ illumination_decrement &nbsp; Fine-Grained Keyboard Light Down PgUp ⇞ ⇧⌥ volume_increment &nbsp; Fine-Grained Volume Up PgDn ⇟ ⇧⌥ volume_decrement &nbsp; Fine-Grained Volume Down &nbsp;"
        },
        {
          "path": "json/caps_tenkey_mode.json",
          "json": {
            "title": "CAPS 4 Tenkey",
            "maintainers": [
              "IvanShamatov"
            ],
            "rules": [
              {
                "description": "CAPS Tenkey: TenkeyMode on/off toggle"
              },
              {
                "description": "CAPS Tenkey: if TenkeyMode ON m,.jkluio maps to 1234567890"
              },
              {
                "description": "CAPS Tenkey: if TenkeyMode ON 90p;/ maps to /*-+="
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/capslock-x.json",
          "json": {
            "title": "CapsLock-X",
            "version": "1.0.0",
            "maintainers": [
              "BryanHoo"
            ],
            "homepage": "https://github.com/BryanHoo/Capslock-X",
            "import_url": "karabiner://karabiner/assets/complex_modifications/import?url=https://raw.githubusercontent.com/BryanHoo/Capslock-X/main/capslock-x.json",
            "rules": [
              {
                "description": "CapsLock to Hyper"
              },
              {
                "description": "Cursor movement"
              },
              {
                "description": "Cursor selection"
              },
              {
                "description": "Delete text"
              },
              {
                "description": "Application operation"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/capslock-plus.json",
          "json": {
            "title": "CapsLock Plus",
            "maintainers": [
              "BryanHoo"
            ],
            "homepage": "https://github.com/BryanHoo/Capslock-Plus",
            "import_url": "karabiner://karabiner/assets/complex_modifications/import?url=https://raw.githubusercontent.com/BryanHoo/Capslock-Plus/master/capslock-plus.json",
            "rules": [
              {
                "description": "CapsLock to Hyper/Escape"
              },
              {
                "description": "Hyper Cursor navigation"
              },
              {
                "description": "Hyper selected Navigation"
              },
              {
                "description": "Hyper More"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/capslock_vim_movements.json",
          "extra_description_path": "extra_descriptions/capslock_vim_movements.html",
          "json": {
            "title": "Caps Lock Vim Movements (rev 2)",
            "rules": [
              {
                "description": "CAPS › ESC, CAPS+H/J/K/L › ←↓↑→, CAPS+D/U › PG↓↑"
              },
              {
                "description": "CAPS+↩︎ › CAPS"
              },
              {
                "description": "CAPS+A › CAPS"
              }
            ]
          },
          "extra_description_text": "Caps Lock Vim Movements (rev 2) Simulate Vim movements with caps lock as the main modifier. Motivation After trying a few different rules, they were too complicated and the feature set ended up not combining well with native MacOS modifiers. The objectives of this rule set are: Home-row caps lock engagement. No modifier overrides so OS defaults continue to work. Do not map keys that OS (MacOS) already support; i.e. Home can be achieved with Command + Caps + K. Key Map Key Maps To Caps lock Escape Caps lock + Return (if enable \"CAPS+↩︎ › CAPS\" rule) Caps lock Caps lock + A (if enable \"CAPS+A › CAPS\" rule) Caps lock Caps lock + H Left arrow Caps lock + J Down arrow Caps lock + K Up arrow Caps lock + L Right arrow Caps lock + D Page Down Caps lock + U Page Up Change Log Revision 1 Original version. Revision 2 Split \"CAPS+↩︎ › CAPS\" from main rule and added \"CAPS+A › CAPS\". Credits This rule was largely based on work done by \"CAPS LOCK: Converts 'jkl;' to arrow keys, and 'spacebar' to a shift+opt modifier for easy text selection\"."
        },
        {
          "path": "json/capslock_wasd_arrows.json",
          "extra_description_path": "extra_descriptions/capslock_wasd_arrows.html",
          "json": {
            "title": "WASD Arrows Layer (rev 2)",
            "rules": [
              {
                "description": "CAPS+W Toggles W/A/S/D-As-Arrows Mode"
              }
            ]
          },
          "extra_description_text": "Caps Lock W/A/S/D Arrows (rev 2) Use CAPS+W or ASD to change WASD to arrow keys, plus a few others extras. Motivation I wanted to simulate a second layer of navigation keys that are similar to what you would find in a TKL/full-size board. This modification attempts achieves that by mapping keys centered around WASD. Key Map Key Maps To Caps lock + W Toggle WASD mode on/off ASD Toggle WASD mode on/off W Up A Left S Down D Right Q Home E End R Page Up F Page Down Changelog Revision 1 Original version. Revision 2 Added ability to toggle mode with \"ASD\" combo."
        },
        {
          "path": "json/comfortable_text_navigation.json",
          "extra_description_path": "extra_descriptions/comfortable_text_navigation.html",
          "json": {
            "title": "Comfortable text navigation (Vim)",
            "rules": [
              {
                "description": "Fn+h/j/k/l as Vim arrows && Fn+a/s/d as ⇧/⌥/⌘"
              }
            ]
          },
          "extra_description_text": "Use \"Vim like\" arrow navigation + ⇧/⌥/⌘ on keyboard \"Home Row\" to edit text without breaking your fingers! More information: Fn + h: Left arrow Fn + j: Down arrow Fn + k: Up arrow Fn + l: Right arrow Fn + a: Left Shift ⇧ Fn + s: Left Option ⌥ Fn + d: Left Command ⌘"
        },
        {
          "path": "json/command_arrows.json",
          "json": {
            "title": "LCMD + Arrow Keys",
            "rules": [
              {
                "description": "LCMD + Up to Page Up"
              },
              {
                "description": "LCMD + Down to Page Down"
              },
              {
                "description": "LCMD + Left to Home"
              },
              {
                "description": "LCMD + Right to End"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/control_fn_to_media_control.json",
          "json": {
            "title": "Control + Function Keys to Media Control",
            "rules": [
              {
                "description": "control + f1 to display_brightness_decrement"
              },
              {
                "description": "control + f2 to display_brightness_increment"
              },
              {
                "description": "control + f3 to rewind"
              },
              {
                "description": "control + f4 to play_or_pause"
              },
              {
                "description": "control + f5 to fastforward"
              },
              {
                "description": "control + f10 to mute"
              },
              {
                "description": "control + f11 to volume_decrement"
              },
              {
                "description": "control + f12 to volume_increment"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl_plus_hjkl_to_arrow_keys.json",
          "extra_description_path": "extra_descriptions/ctrl_plus_hjkl_to_arrow_keys.json.html",
          "json": {
            "title": "Left ctrl + hjkl to Arrow Keys Vim",
            "rules": [
              {
                "description": "Left ctrl + hjkl to arrow keys Vim"
              }
            ]
          },
          "extra_description_text": "ctrl + hjkl to Arrow Keys (Vim) ctrl + h = left_arrow ctrl + j = down_arrow ctrl + k = up_arrow ctrl + l = right_arrow"
        },
        {
          "path": "json/ctrl_pn_arrow.json",
          "json": {
            "title": "Ctrl+p/Ctrl+n to arrow up/down",
            "rules": [
              {
                "description": "Ctrl+p/Ctrl+n to arrow up/down"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/diamond_cursor_right_supplements.json",
          "json": {
            "title": "Diamond Cursor Right Supplements (rev 2)",
            "rules": [
              {
                "description": "Change right_command+u/m/o/. to page up/page down/home/end (rev 2)"
              },
              {
                "description": "Change right_command+;/h to delete/forward delete"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/diamond_cursor.json",
          "json": {
            "title": "Diamond Cursor",
            "rules": [
              {
                "description": "Change fn + I/J/K/L to Arrow Keys"
              },
              {
                "description": "Change right_command+i/j/k/l to Arrows"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/dos_style.json",
          "json": {
            "title": "DOS-Style Shortcuts",
            "rules": [
              {
                "description": "DOS-Style Copy/Paste/Cut"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/emacs_key_bindings.json",
          "extra_description_path": "extra_descriptions/emacs_key_bindings.json.html",
          "json": {
            "title": "Emacs key bindings (rev 12)",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "Emacs key bindings [C-x key strokes] (rev 2)"
              },
              {
                "description": "Emacs key bindings [control+keys] (rev 10)"
              },
              {
                "description": "Emacs key bindings [option+keys] (rev 5)"
              },
              {
                "description": "Bash style Emacs key bindings (rev 2)"
              },
              {
                "description": "For Visual Studio Code: Emacs key bindings [control+keys] (rev 10)"
              },
              {
                "description": "For Visual Studio Code: Emacs key bindings [option+keys] (rev 5)"
              },
              {
                "description": "For Visual Studio Code: Bash style Emacs key bindings (rev 2)"
              }
            ]
          },
          "extra_description_text": "Key Bindings (C-x key strokes) C-x C-c Quit application (post command-q) C-x C-f Open file (post command-o) C-x C-s Save file (post command-s) Key Bindings (control+keys) control+d forward delete control+h delete control+i tab control+[ escape control+m return control+bfnp arrow keys control+v page down control+a (Microsoft Office) home control+e (Microsoft Office) end Key Bindings (option+keys) option+v page up option+bf option+arrow keys option+d option+forward delete Bash Style Key Bindings control+w Delete the word behind point (option+delete) control+u Delete backward from point to the beginning of the line."
        },
        {
          "path": "json/ergo_fly_keys.json",
          "extra_description_path": "extra_descriptions/ergo_fly_keys.json.html",
          "json": {
            "title": "Ergo Fly Keys",
            "maintainers": [
              "marlonrichert"
            ],
            "rules": [
              {
                "description": "Ergo Fly Keys"
              }
            ]
          },
          "extra_description_text": "Ergo Fly Keys Ergonomic anti-RSI key bindings for text editing, loosely based on the US Qwerty versions of ErgoEmacs Mode and Xah Fly Keys. ergo fly keys ⌃U ⌥↑ ⌘⌫ ⌥↓ ⌃A ⎋ ↩︎ ⌃K ⌃E ⌘⌦ ⌥⌦ ↖︎ ⇥ [ ⌦ ⇟ ⌥ ` ~ ⌃X ⌃X ⌥ ' \" ⇞ ⌥⌫ ← ↘︎ ⌘← ⌥← ⌘↑ ⌘↓ ⌥→ ⌘→ ↓ ↑ ⌫ → ⇧ ] } ⌘ [ { ⌃ \\ | ⌃ / ? ⇧ - _ ⌘ = + Orange: when pressed while holding ␣ (space) Blue: top row when held; bottom row otherwise Features Moves frequently-used keys that are in ergonomically bad spots to better locations. Tuned to feel quick and responsive. Does not trigger accidentally while touch typing. Works in terminal apps, too. Usage notes This mod is made for US ANSI Qwerty keyboards. If you want to use a different keyboard layout, or another trigger key than space, please download the source code and modify ergoemacs_mode.json.rb For more info on how the keys work in terminal apps, see \"Keyboard shortcuts for Terminal apps\"."
        },
        {
          "path": "json/fc660c_arrow_keys.json",
          "json": {
            "title": "FC660C Arrow Keys",
            "rules": [
              {
                "description": "FC660C Arrow Keys (fn + ijkl to arrow keys)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fc660c_media_keys.json",
          "json": {
            "title": "FC660C Media Controls",
            "rules": [
              {
                "description": "FC660C Volume Controls (fn + up/down to volume up/down)"
              },
              {
                "description": "FC660C Media Keys (fn + left/right to Previous Title/Next)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fn_arrows.json",
          "json": {
            "title": "FN + Arrow Keys",
            "rules": [
              {
                "description": "FN + Up to Page Up"
              },
              {
                "description": "FN + Down to Page Down"
              },
              {
                "description": "FN + Left to Home"
              },
              {
                "description": "FN + Right to End"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fn_plus_numbers_to_function_keys.json",
          "json": {
            "title": "Map fn + number keys to function keys (rev 2)",
            "rules": [
              {
                "description": "Map fn + number keys to their corresponding function keys (rev 1)"
              },
              {
                "description": "Map fn + number keys to their corresponding media control keys (rev 2)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fn_plus_plsemicolonquote_to_arrow_keys.json",
          "json": {
            "title": "Change fn + p/l/;/' to arrow keys",
            "rules": [
              {
                "description": "Change fn + p/l/;/' to arrow keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/gamer_keys.json",
          "json": {
            "title": "Gaming cursor keys [WASD]",
            "rules": [
              {
                "description": "Change fn + W/A/S/D to Arrow Keys"
              },
              {
                "description": "Change control + W/A/S/D to Arrow Keys"
              },
              {
                "description": "Change left_option + W/A/S/D to Arrow Keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/hhkb_mode.json",
          "json": {
            "title": "Happy Hacking Keyboard Compatible Mode (rev 2)",
            "rules": [
              {
                "description": "HHKB Arrow Mode (fn + semicolon/slash/open_bracket/quote to arrow keys, etc)"
              },
              {
                "description": "HHKB Media Key Mode (fn + asdf to Volume down/up/mute, eject) (rev 2)"
              },
              {
                "description": "Map fn + i, o, p  to F13, F14, F15."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/HomeEnd.json",
          "json": {
            "title": "Home and End",
            "rules": [
              {
                "description": "Home to Command Left"
              },
              {
                "description": "End to Command Right"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ijkl_arrows.json",
          "json": {
            "title": "Change Modifier key + i/j/k/l to arrow keys",
            "rules": [
              {
                "description": "Change Control + i/j/k/l to Arrows"
              },
              {
                "description": "Change Option + i/j/k/l to Arrows"
              },
              {
                "description": "Change Fn + i/j/k/l to Arrows"
              },
              {
                "description": "Change Command + i/j/k/l to Arrows"
              },
              {
                "description": "Change Ctrl + i to Cmd + i (italics shortcut)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/japanese_nicola.json",
          "json": {
            "title": "Japanese NICOLA",
            "rules": [
              {
                "description": "Japanese NICOLA Type F"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/left_option_plus_hjkl_to_arrows.json",
          "extra_description_path": "extra_descriptions/left_option_plus_hjkl_to_arrows.json.html",
          "json": {
            "title": "Map Left Option plus h/j/k/l to Arrows",
            "rules": [
              {
                "description": "Map Left Option plus h/j/k/l to Arrows"
              }
            ]
          },
          "extra_description_text": "Map Left Option + hjkl to Arrows Keys left_option + h = left_arrow left_option + j = down_arrow left_option + k = up_arrow left_option + l = right_arrow"
        },
        {
          "path": "json/map_left_option_plus_spacebar_to_enter.json",
          "json": {
            "title": "Map Left Option + Spacebar to Enter",
            "rules": [
              {
                "description": "Map Left Option + Spacebar to Enter"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/map_left_option_with_j_k_l_m_to_arrows.json",
          "json": {
            "title": "Map Left Option with j/k/l/m to Arrows",
            "rules": [
              {
                "description": "Map Left Option with j/k/l/m to Arrows"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/map_left_option_with_j_k_l_semicolon_to_arrows.json",
          "json": {
            "title": "Map Left Option with j/k/l/; to Arrows (QWERTY alt)",
            "rules": [
              {
                "description": "Map Left Option with j/k/l/; to Arrows (QWERTY alt)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/map_shift_plus_left_option_with_j_k_l_semicolon_to_page_arrows.json",
          "json": {
            "title": "Map Left Shift plus Left Option with j/k/l/; to Page Arrows (QWERTY alt)",
            "rules": [
              {
                "description": "Map Left Shift plus Left Option with j/k/l/; to Page Arrows (QWERTY alt)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mu_mode.json",
          "json": {
            "title": "Mu Mode (rev 0.1)",
            "rules": [
              {
                "description": "Mu Mode Semicolon(;)+J/K/L/I/U/M/O/. to Arrow Left/Down/Right/Up/PageUp/PageDown/Home/End"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mu_mouse_mode.json",
          "json": {
            "title": "Mu Mouse Mode (rev 0.3.1)",
            "rules": [
              {
                "description": "Mu Mouse Mode Semicolon(;)+D to enter Mu Mouse Mode(default Mouse Move Mode); V to Mouse Left Click; N to Mouse Right Click; Q to quit Mu Mouse Mode; D: Mouse Move Mode, J/K/L/I/U/M/O/. to Mouse Left/Down/Right/Up/Up-Left/Down-Left/Up-Right/Down-Right; F: Mouse Fast Move Mode, like Mouse Move Mode but faster; S: Mouse Scroll Mode, J/K/L/I to Mouse Scroll Left/Down/Right/Up"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/nehem_mappings.json",
          "json": {
            "title": "Nehem's cursor moves inspired by Anne Pro 2",
            "rules": [
              {
                "description": "Caps+hjkl for arrows, Caps+fguiop for pageup, home, end, etc"
              },
              {
                "description": "Caps acts as Shift for symbols like {}:<>?!@ etc"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/new-poker-ii.json",
          "json": {
            "title": "New Poker II (Backtick, tilde & i/j/k/l as arrows)",
            "rules": [
              {
                "description": "Left option + Esc to `"
              },
              {
                "description": "Capslock + Esc to `"
              },
              {
                "description": "L_Shift + Esc to ~"
              },
              {
                "description": "R_Shift + Esc to ~"
              },
              {
                "description": "L_Control + i/j/k/l to arrows"
              },
              {
                "description": "L_Control + u/o to pageup/pagedown"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/nmop_to_page_updown_and_homeend.json",
          "json": {
            "title": "Change fn + n/m/o/p' to page_up, page_down, home and end keys",
            "rules": [
              {
                "description": "Change fn + n/m/o/p' to page_up, page_down, home and end keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/numeric_keypad.json",
          "extra_description_path": "extra_descriptions/numeric_keypad.json.html",
          "json": {
            "title": "Numeric Keypad",
            "rules": [
              {
                "description": "Numeric Keypad Trigger [Tab as trigger key]"
              },
              {
                "description": "Numeric Keypad Trigger [Caps Lock as trigger key]"
              },
              {
                "description": "Numeric Keypad Trigger [Escape as trigger key]"
              },
              {
                "description": "Numeric Keypad Mode [spacebar as 0]"
              },
              {
                "description": "Numeric Keypad Mode [right_command as 0]"
              },
              {
                "description": "Numeric Keypad Mode [Optional] Trigger + right_control to keypad_period"
              },
              {
                "description": "Numeric Keypad Mode [Optional] Trigger + left_command to spacebar"
              }
            ]
          },
          "extra_description_text": "Numeric Keypad Mode Trigger Key + 7 / 8 / 9 / 0 Backspace / = / Slash(/) / * Trigger Key + U / I / O / P 7 / 8 / 9 / - Trigger Key + J / K / L / ; 4 / 5 / 6 / + Trigger Key + M / , / . / Slash(/) 1 / 2 / 3 / Enter Trigger Key + Space or right_command / right_option 0 / Period (.) Optional mappings Trigger Key + right_control Period (.) Trigger Key + left_command Space Choose a trigger key from: Tab, Escape, Caps Lock Choose a layout: Either spacebar or right_command to be mapped to 0 Hold down the trigger key then press one of the keys to use a numeric key Press and releasing the trigger acts as a normal key press Optionally map right_control (in case you remapped your right_option) to numeric_period Optionally map left_command to spacebar (so you can type spaced numbers without lifting trigger key)"
        },
        {
          "path": "json/set_num_lock.json",
          "extra_description_path": "extra_descriptions/set_num_lock.html",
          "json": {
            "title": "LCtrl-LShift-N to toggle num-lock",
            "rules": [
              {
                "description": "LCtrl-LShift-N to toggle num-lock"
              }
            ]
          },
          "extra_description_text": "Use a shortcut to toggle a portion of your keyboard to a numeric keypad. Perfect for 60%-keyboard users. Shortcut: left_control + left_shift + N Layout of numeric keypad: 9 0 - maps to 7 8 9 o p [ maps to 4 5 6 l ; ' maps to 1 2 3 , maps to 0"
        },
        {
          "path": "json/pc_shortcuts.json",
          "json": {
            "title": "PC-Style Shortcuts",
            "rules": [
              {
                "description": "Home key to the beginning of the line (Control + a)"
              },
              {
                "description": "End key to the end of the line (Control + e)"
              },
              {
                "description": "Home key to the beginning of the sentence (Command + Left). Doesnt work in terminal"
              },
              {
                "description": "End key to the end of the sentence (Command + Right). Doesnt work in terminal"
              },
              {
                "description": "PC-Style Home/End"
              },
              {
                "description": "PC-Style Paste(Shift+Insert) for JIS keyboard"
              },
              {
                "description": "PC-Style Paste(Shift+Fn) for ANSI keyboard"
              },
              {
                "description": "Option(Alt)+Tab as Switch Application (Command+Tab)"
              },
              {
                "description": "PC-Style Control+Up/Down/Left/Right"
              },
              {
                "description": "PC-Style Copy/Paste/Cut"
              },
              {
                "description": "PC-Style Undo"
              },
              {
                "description": "PC-Style Redo"
              },
              {
                "description": "PC-Style Select-All"
              },
              {
                "description": "PC-Style Save"
              },
              {
                "description": "PC-Style New"
              },
              {
                "description": "PC-Style Reload(F5, Ctrl+R)"
              },
              {
                "description": "PC-Style New Tab"
              },
              {
                "description": "PC-Style Find"
              },
              {
                "description": "PC-Style Open"
              },
              {
                "description": "PC-Style Bold/Italic/Underline(Ctrl+B/I/U)"
              },
              {
                "description": "PC-Style Close Window"
              },
              {
                "description": "PC-Style Emoji Picker (Command+.)"
              },
              {
                "description": "PC-Style Spotlight Search (Command+S)"
              },
              {
                "description": "PC-Style Switch Input (Command+Space)"
              },
              {
                "description": "PC-Style Lock Screen"
              },
              {
                "description": "PC-Style Screenshot to File (PrintScreen to select)"
              },
              {
                "description": "PC-Style Screenshot to Clipboard (PrintScreen to select)"
              },
              {
                "description": "PC-Style Screenshot (PrintScreen for whole, Shift+PrintScreen to select)"
              },
              {
                "description": "PC-Style Quit Application (Alt+F4 to Command+Q)"
              },
              {
                "description": "Command+E Opens Finder"
              },
              {
                "description": "Control+Esc Opens Launchpad"
              },
              {
                "description": "Control+Shift+Esc Opens Activity Monitor"
              },
              {
                "description": "PC-Style Browser open location (Ctrl+L)"
              },
              {
                "description": "PC-Style Back/Forward (Alt+Left Arrow/Alt+Right Arrow)"
              },
              {
                "description": "PC-Style Browser Zoom (Ctrl+Plus/Minus/0)"
              },
              {
                "description": "PC-Style Control+Delete/Backspace"
              },
              {
                "description": "PC-Style Control+K"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/pok3r-escape.json",
          "json": {
            "title": "Pok3r Escape Key",
            "rules": [
              {
                "description": "Pok3r Escape key (grave_accent_and_tilde as Escape and fn + grave_accent_and_tilde as grave_accent_and_tilde)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/pok3r-media.json",
          "json": {
            "title": "Pok3r Media Controls",
            "rules": [
              {
                "description": "Pok3r Volume Controls (fn + sdf to Volume down/up/mute)"
              },
              {
                "description": "Pok3r Media Keys (fn + qwe to Previous Title/Play-Pause/Next)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/poker-escape.json",
          "json": {
            "title": "Change Poker Keyboard escape behavior",
            "rules": [
              {
                "description": "Change left option+escape to escape"
              },
              {
                "description": "Change escape to grave accent and tilde"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/right_shift_vi_like.json",
          "extra_description_path": "extra_descriptions/right_shift_vi_like.html",
          "json": {
            "title": "right shift vi like",
            "rules": [
              {
                "description": "Right (right_shift+l to right)"
              },
              {
                "description": "Down (right_shift+j to down)"
              },
              {
                "description": "Left (right_shift+h to left)"
              },
              {
                "description": "Up (right_shift+k to up)"
              },
              {
                "description": "End (right_shift+e to fn+right)"
              },
              {
                "description": "Home (right_shift+a to fn+left)"
              },
              {
                "description": "Word forward (right_shift+w to option+right)"
              },
              {
                "description": "Word back (right_shift+b to option+left)"
              },
              {
                "description": "Page up (right_shift+p to page_up)"
              },
              {
                "description": "Page down (right_shift+; to page_down)"
              },
              {
                "description": "Copy (right_shift+c to c+command)"
              },
              {
                "description": "Cut (right_shift+x to x+command)"
              },
              {
                "description": "Paste (right_shift+v to v+command)"
              },
              {
                "description": "Undo (right_shift+z to z+command)"
              },
              {
                "description": "Save (right_shift+s to s+command)"
              },
              {
                "description": "Info (right_shift+i to i+command)"
              },
              {
                "description": "New tab (right_shift+t to t+command)"
              },
              {
                "description": "Close tab (right_shift+y to w+command)"
              },
              {
                "description": "Escape (left_command+space to escape)"
              },
              {
                "description": "Return (right_shift+m to return)"
              },
              {
                "description": "Delete (right_shift+f to delete)"
              },
              {
                "description": "Backspace (right_shift+d to backspace)"
              },
              {
                "description": "Tab (right_shift+space to tab)"
              },
              {
                "description": "Rename (right_shift+r to shift+f6)"
              },
              {
                "description": "Hash (right_shift+3 to #)"
              },
              {
                "description": "Thin arrow (right_shift+- to ->)"
              },
              {
                "description": "Fat arrow (right_shift+= to =>)"
              },
              {
                "description": "Go back (right_shift+cmd+option+h to cmd+[)"
              },
              {
                "description": "Go forward (right_shift+cmd+option+l to cmd+])"
              },
              {
                "description": "Go to tab to left (right_shift+u to cmd+shift+[)"
              },
              {
                "description": "Go to tab to right (right_shift+o to cmd+shift+])"
              },
              {
                "description": "Single quote (right_shift+q to single quote)"
              },
              {
                "description": "Single quote closed (right_shift+left_shift+q to closed single quotes)"
              },
              {
                "description": "Double quote (right_shift+2 to double quote)"
              },
              {
                "description": "Double quote closed (right_shift+left_shift+2 to closed double quotes)"
              },
              {
                "description": "Parentheses closed (right_shift+left_shift+9 to closed paranetheses)"
              },
              {
                "description": "Braces closed (right_shift+left_shift+[ to closed braces)"
              },
              {
                "description": "Angle brackets closed (right_shift+left_shift+, to closed angle brackets)"
              },
              {
                "description": "Search focus (right_shift+g to l+command)"
              },
              {
                "description": "Spotlight (left_command+return to left_command+spacebar)"
              }
            ]
          },
          "extra_description_text": "Title Mappings all with right shift pressed.. Movement/navigation h/j/k/l -> mapped to arrow keys w/b -> word forward/back a/e -> home/end ;/p -> pageup/down u/o -> cmd+shift+[/] (tab switch) +command/option/left shift/control -> apply to above Editing s/c/v/x/z/t sent with command modifier m -> return f/d -> delete/backspace space -> tab space+left shift -> shift tab q -> single quote q+left shift -> closed single quote 2 -> double quote 2+left shift -> closed double quote 3 -> hash . -> \"->\" .+left shift -> \"=>\" r -> f6+shift (rename) Other caplocks+enter -> command+space (spotlight default) caplocks+space -> escape y -> cmd+w (close tab) g -> cmd+l (address bar) h/l -> cmd+[/] (history back/forward)"
        },
        {
          "path": "json/shift_arrows.json",
          "json": {
            "title": "Shift + Arrow Keys",
            "rules": [
              {
                "description": "Shift + Up to Page Up"
              },
              {
                "description": "Shift + Down to Page Down"
              },
              {
                "description": "Shift + Left to Home"
              },
              {
                "description": "Shift + Right to End"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ShiftHomeEnd.json",
          "json": {
            "title": "Shift Home and End",
            "rules": [
              {
                "description": "Shift Home to Shift Command Left"
              },
              {
                "description": "Shift End to Shift Command Right"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/spacefn.json",
          "json": {
            "title": "SpaceFN",
            "rules": [
              {
                "description": "SpaceFN: Space enables SpaceFN mode (see: https://geekhack.org/index.php?topic=51069.0)"
              },
              {
                "description": "SpaceFN: Space+b to Space (hold to repeat)"
              },
              {
                "description": "SpaceFN: Space+[ijkl] to Up, Left, Down, Right"
              },
              {
                "description": "SpaceFN: Space+[hjkl] to Left, Down, Up, Right"
              },
              {
                "description": "SpaceFN: Space+u to Home, Space+o to End"
              },
              {
                "description": "SpaceFN: Space+h to Page Up, Space+n to Page Down"
              },
              {
                "description": "SpaceFN: Space+p to Print Screen, Space+Open Bracket ([) to Scroll Lock, Space+Close Bracket (]) to Pause, Space+Backspace to Forward Delete, Space+Backslash (\\) to Insert"
              },
              {
                "description": "SpaceFN: Backquote (`) to Escape, Space+[1-9] to F[1-9], Space+0 to F10, Space+Hyphen (-) to F11, Space+Equal Sign (=) to F12, Space+e to Escape, Space+m to Backtick (`), Space+Comma to Tilde (~), Space+Slash (/) to Menu"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/touchcursor_mode.json",
          "extra_description_path": "extra_descriptions/touchcursor_mode.json.html",
          "json": {
            "title": "TouchCursor Mode (rev 2)",
            "rules": [
              {
                "description": "TouchCursor Mode [Space as Trigger Key] (rev 2)"
              }
            ]
          },
          "extra_description_text": "Moving Around Trigger Key + J/K/I/L Arrow Keys Trigger Key + U/O/H/N Home / End / Page Up / Page Down Trigger Key + Y/P/M Insert / Backspace / (Forward) Delete"
        },
        {
          "path": "json/vi_mode_arrow.json",
          "json": {
            "title": "Vi Mode, left_control + hjkl. shift/option/command + arrow working.",
            "rules": [
              {
                "description": "Vi Mode [left_control + hjkl]"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vi_mode_with_caps_lock.json",
          "json": {
            "title": "Use CAPS LOCK for vi navigation",
            "rules": [
              {
                "description": "CAPS LOCK + hjkl to arrow keys"
              },
              {
                "description": "CAPS LOCK + shift + hjkl to scroll"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vi_mode.json",
          "extra_description_path": "extra_descriptions/vi_mode.json.html",
          "json": {
            "title": "Vi Mode (rev 5)",
            "rules": [
              {
                "description": "Vi Mode [S as Trigger Key]"
              },
              {
                "description": "Vi Mode [D as Trigger Key]"
              },
              {
                "description": "Vi Visual Mode"
              }
            ]
          },
          "extra_description_text": "Moving Around Trigger Key + H/J/K/L Arrow Keys Trigger Key + F Fn Trigger Key + F + H/J/K/L Home / Page Down / Page Up / End Trigger Key + 0/4 Go to Start/End of the Line Trigger Key + Command + H/L Go to Start/End of the Line Trigger Key + Command + J/K Go to Start/End of the Document Trigger Key + Option + H/L Go to Start/End of the Word Selecting Text Trigger Key + Shift + H/J/K/L Select Text Trigger Key + Shift + Command + H/L Select Until Start/End of the Line Trigger Key + Shift + Command + J/K Select Until Start/End of the Document Trigger Key + Shfit + Option + H/L Select Until Start/End of the Word Trigger Key + Shfit + Option + J/K Select Until Start/End of the Paragraph Visual Mode V + H/J/K/L Select Text V + 0/4 Select Until Start/End of the Line V + B/W Select Until Start/End of the Word V + Open/Close Bracket Select Until Start/End of the Paragraph You can use either S or D as the trigger key Please change your simultaneous_threshold_milliseconds setting in Karabiner-Elements → Complex Modifications → Parameters; A value between 150 and 500 is recommended for this mode If you want to use another key as the trigger key, please download the source code and modify this file"
        },
        {
          "path": "json/vi_style_arrows_pushing_simultaneously.json",
          "json": {
            "title": "Vi Style Arrows Pushing Simultaneously",
            "rules": [
              {
                "description": "Change Control + h/j/k/l to Arrows"
              },
              {
                "description": "Change Option + h/j/k/l to Arrows"
              },
              {
                "description": "Change Fn + h/j/k/l to Arrows"
              },
              {
                "description": "Change command + h/j/k/l to Arrows"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vi_style_arrows.json",
          "json": {
            "title": "Vi Style Arrows",
            "rules": [
              {
                "description": "Change Control + h/j/k/l to Arrows"
              },
              {
                "description": "Change Option + h/j/k/l to Arrows"
              },
              {
                "description": "Change Fn + h/j/k/l to Arrows"
              },
              {
                "description": "Change command + h/j/k/l to Arrows"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vim_mode_plus.json",
          "extra_description_path": "extra_descriptions/vim_mode_plus.json.html",
          "json": {
            "title": "Vim Mode Plus",
            "maintainers": [
              "harmtemolder"
            ],
            "homepage": "https://git.sr.ht/~harmtemolder/karabiner-vim-mode-plus",
            "import_url": "karabiner://karabiner/assets/complex_modifications/import?url=https://git.sr.ht/~harmtemolder/karabiner-vim-mode-plus/blob/master/vim_mode_plus.json",
            "rules": [
              {
                "description": "(Vim 1/11) caps_lock -> on, caps_lock, esc, control+[ or any pointing_button -> off"
              },
              {
                "description": "(Vim 2/11) finger on trackpad + any key -> off",
                "available_since": "12.6.9"
              },
              {
                "description": "(Vim 3/11) visual mode + h,j,k,l,e,b,0,^,$,gg,G,{,} + d,y,c,x"
              },
              {
                "description": "(Vim 4/11) dd,de,db,d0,d^,d$,dgg,dG,d{,d}"
              },
              {
                "description": "(Vim 5/11) yy,ye,yb,y0,y^,y$,ygg,yG,y{,y}"
              },
              {
                "description": "(Vim 6/11) cc,ce,cb,c0,c^,c$,cgg,cG,c{,c}"
              },
              {
                "description": "(Vim 7/11) x,X,p,P,u,control+r"
              },
              {
                "description": "(Vim 8/11) h,j,k,l (+ control/option/command/shift),e,b,0,^,$,gg,G,{,}"
              },
              {
                "description": "(Vim 9/11) i,I,a,A,o,O"
              },
              {
                "description": "(Vim 10/11) s,m,spacebar -> Hammerspoon modals"
              },
              {
                "description": "(Vim 11/11) disable unused keys"
              }
            ]
          },
          "extra_description_text": "Karabiner Vim Mode Plus A complex modification that mimics Vim's navigation throughout your entire Mac. Although I try to keep this mod up-to-date in the KE-complex_modifications repository, you might encounter a more recent version in its own repository. 1. So what do you get? 1.1 NORMAL mode Activate with caps lock. Deactivate with: i or a (there are more like these, see below) caps lock, escape, control+[, Clicking any mouse button Pressing any key within Atom, iTerm2, PyCharm or VSCodium (because those have their own Vim modes) Pressing any key while having at least one finger on your trackpad Alternatively you can hold caps lock for NORMAL mode and release it to exit. Within NORMAL mode you can then move around with: key action h Move cursor left* j Move cursor down* k Move cursor up* l Move cursor right* e Move cursor to next end of word b Move cursor to previous start of word 0 Move cursor to start of line (before any tabs) ^ Move cursor to start of line (after any tabs) $ Move cursor to end of line g,g Move cursor to start of document G Move cursor to end of document { Move cursor to start of paragraph } Move cursor to end of paragraph *These work with shift, control, option and/or command, e.g. for hotkeys within apps. Combine those with d, y and c to delete (“cut”), yank (“copy”) or change (“cut” and exit NORMAL mode) like so: key action d,d / y,y / c,c Delete/yank/change the entire line d,e / y,e / c,e Delete/yank/change to the next end of word d,b / ... / ... Delete/yank/change to the previous start of word ... Ditto for all other navigation keys mentioned above Also: key action x Delete forward X Delete back p or P Paste at cursor u Undo control+r Redo To exit NORMAL mode at specific locations: key action i Exit NORMAL mode at the cursor I Exit NORMAL mode at the start of the line a Exit NORMAL mode at the cursor A Exit NORMAL mode at the end of the line o Exit NORMAL mode on a new line below the cursor O Exit NORMAL mode on a new line above the cursor I've also mapped 3 keys to F18, F19 and F20, which I pick up on within Hammerspoon to load specific modals: key action s Activate Hammerspoon screen modal m Activate Hammerspoon Markdown modal spacebar Activate Hammerspoon hyper modal 1.2 VISUAL mode From within NORMAL mode you can switch to VISUAL mode with v. (Unfortunately you cannot switch to the other end of the selection with o as you normally would, so choose your starting point wisely.) key action v Exit VISUAL mode, enter NORMAL mode h Select left j Select down ... Ditto for all other navigation keys mentioned above d Delete (“cut”) the selection and enter NORMAL mode y Yank (“copy”) the selection and enter NORMAL mode c Change (“cut”) the selection and exit Vim Mode entirely x Remove the selection and enter NORMAL mode 2. Setting up Import this complex modification straight into Karabiner through this link: karabiner://karabiner/assets/complex_modifications/import?url=https://git.sr.ht/~harmtemolder/karabiner-vim-mode-plus/blob/master/vim_mode_plus.json (You might have to copy and paste it into your browser's address bar if your browser does not render it as a clickable link.) 3. Making changes I write my complex modifications in YML files, converting them into JSON using yml-to-json.py. You don't have to, but you can, if you want to. Either way, make sure to remove and re-add all parts of this mod in Karabiner's “Complex modifications” tab after making changes. The order they are in is important. 4. Reporting issues If you encounter any issues, please report them here. (If you need help with sourcehut's issue tracker, see this man page.) I'd also love to hear additions you would like to see to this setup."
        },
        {
          "path": "json/vim_text_navigation.json",
          "json": {
            "title": "Text Navigation (VIM style)",
            "rules": [
              {
                "description": "Text Navigation Forward/Backward (fn + left_shift + jl to alt + arrow keys)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vimium.json",
          "extra_description_path": "extra_descriptions/vimium.json.html",
          "json": {
            "title": "Vimium",
            "rules": [
              {
                "description": "System-wide Vimium"
              }
            ]
          },
          "extra_description_text": "Press Esc to enter Vimium mode. Manipulating tabs K, gt Go one tab right J, gT Go one tab left t Create new tab x Close current tab X Restore closed tab g0 Go to the first tab g$ Go to the last tab Navigating h/j/k/l Arrow Keys gg Scroll to the top of the page G Scroll to the bottom of the page f, <c-f> Scroll a full page down b, <c-b> Scroll a full page up <c-u> Scroll 20 lines up <c-d> Scroll 20 lines down r Reload the page / Search n Cycle forward to the next find match N Cycle backward to the previous find match u Undo <c-r> Redo i Enter insert mode"
        },
        {
          "path": "json/Vimode_with_smart_caps.json",
          "json": {
            "title": "Vimode with smart caps",
            "rules": [
              {
                "description": "CAPSLOCK + hjkl to arrow keys (Post ESCAPE if press CAPSLOCK alone)"
              },
              {
                "description": "Post CAPSLOCK if press ESCAPE alone"
              },
              {
                "description": "Change left_shift + Command_L to escape only if pressed at the same time."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/window_resizing.json",
          "extra_description_path": "extra_descriptions/window_resizing.json.html",
          "json": {
            "title": "Window Resizing",
            "rules": [
              {
                "description": "Window Resize Mode [Cmd+Esc as trigger]"
              }
            ]
          },
          "extra_description_text": "Window Resizing Mode This mode is intended to use with a third-party window resizing/management tool. We use these rules to create easier to access shortcut keys that do not conflic with other system shortcuts. Karabiner Shortcuts Resize Shortcuts Window Resize Result Trigger Key + U / I / O Ctrl+Alt+Cmd + 1 / 2 / 3 Top Left Quarter / Top Half / Top Right Quarter Trigger Key + J / K / L Ctrl+Alt+Cmd + 4 / 5 / 6 Left Half / Maximized Window / Right Half Trigger Key + M / , / . Ctrl+Alt+Cmd + 7 / 8 / 9 Bottom Left Quarter / Bottom Half / Bottom Right Quater Trigger Key + Space Ctrl+Alt+Cmd + 0 Send window to next monitor Setup Open your window resizing app and configure the Resize Shortcuts (2nd column) to the according Window Sizes (3rd columns)."
        },
        {
          "path": "json/windows_shortcuts_on_macos.json",
          "extra_description_path": "extra_descriptions/windows_shortcuts_on_macos.json.html",
          "json": {
            "title": "Windows shortcuts on macOS",
            "rules": [
              {
                "description": "Ctrl+C, Ctrl+V, Ctrl+X => Cmd+C (Copy), Cmd+V (Paste), Cmd+X (Cut)"
              },
              {
                "description": "Ctrl+Z => Cmd+Z (Undo)"
              },
              {
                "description": "Ctrl+Y => Cmd+Shift+Y (Redo)"
              },
              {
                "description": "Ctrl+A => Cmd+A (Select all)"
              },
              {
                "description": "Ctrl+S => Cmd+S (Save)"
              },
              {
                "description": "Ctrl+N => Cmd+N (New)"
              },
              {
                "description": "Ctrl+F => Cmd+F (Find)"
              },
              {
                "description": "Ctrl+W => Cmd+W (Close)"
              },
              {
                "description": "Alt+F4 => Cmd+Q (Exit application)"
              },
              {
                "description": "Home => Cmd+Left arrow (Move cursor to beginning of line)"
              },
              {
                "description": "Shift+Home => Cmd+Shift+Left arrow (Move cursor to beginning of line with selection)"
              },
              {
                "description": "Ctrl+Home, Ctrl+Shift+Home => Cmd+Up arrow, Cmd+Shift+Up arrow (Move cursor to beginning of file with and without selection)"
              },
              {
                "description": "End => Cmd+Right arrow (Move cursor to end of line)"
              },
              {
                "description": "Shift+End => Cmd+Shift+Right arrow (Move cursor to end of line with selection)"
              },
              {
                "description": "Ctrl+End, Ctrl+Shift+End => Cmd+down arrow, Cmd+Shift+down arrow (Move cursor to end of file with and without selection)"
              },
              {
                "description": "Ctrl+T => Cmd+T (New tab)"
              },
              {
                "description": "Ctrl+B => Cmd+B (Bold)"
              },
              {
                "description": "Ctrl+I => Cmd+I (Italic)"
              },
              {
                "description": "Ctrl+L => Cmd+L (Open url location) (Only in browsers)"
              },
              {
                "description": "Ctrl+R => Cmd+R (Reload) (Only in browsers)"
              },
              {
                "description": "F5 => Cmd+r (Reload)"
              },
              {
                "description": "Ctrl+Tab => Cmd+Tab (Switch application)"
              },
              {
                "description": "Cmd+Tab => Cmd+Alt+0 (Reassigned command for opening Mission control)"
              },
              {
                "description": "Ctrl+(Shift)+Right/left arrow => Alt+(Shift)+Right/left arrow (Move cursor one word with selection and without selection)"
              },
              {
                "description": "Ctrl+Up/down arrow => Up/down arrow (Move cursor up/down)"
              },
              {
                "description": "Cmd+L => Logout (CGSession -suspend)"
              },
              {
                "description": "Ctrl+Esc => Open Launchpad"
              },
              {
                "description": "Ctrl+Shift+Esc => Open Activity Monitor"
              },
              {
                "description": "Return => Cmd+o (Open) (Only in Finder)"
              },
              {
                "description": "F2 => Return (Rename) (Only in Finder)"
              },
              {
                "description": "Delete => Cmd+backspace (Delete) (Only in Finder)"
              },
              {
                "description": "Backspace => Cmd+up (Go back) (Only in Finder)"
              },
              {
                "description": "Ctrl+Left Click => Cmd+Left Click (select multiple items)"
              }
            ]
          },
          "extra_description_text": "This mapping will make your mac behave more it would on Windows. It is designed with an external keyboard in mind."
        },
        {
          "path": "json/capslock-arrows-and-text-selection.json",
          "json": {
            "title": "CAPS LOCK: Converts 'jkl;' to arrow keys, and 'spacebar' to a shift+opt modifier for easy text selection",
            "maintainer": [
              "Egstad"
            ],
            "homepage": "https://github.com/egstad/KE-complex_modifications",
            "rules": [
              {
                "description": "CAPS LOCK: Converts 'jkl;' to arrow keys"
              },
              {
                "description": "CAPS LOCK + SPACEBAR: When held, 'spacebar' becomes 'left_shift' + 'left_opt' for easy text selection"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/Vi_and_other_workman.json",
          "extra_description_path": "extra_descriptions/Vi_and_other_Workman.html",
          "json": {
            "title": "Vi and other (Workman keyboard layout)",
            "rules": [
              {
                "description": "S+[movement] Vi Mode // s key"
              },
              {
                "description": "Vi Visual Mode (Workman)"
              },
              {
                "description": "Change Command + Spacebar to Backspace"
              },
              {
                "description": "Change spacebar to right_shift. (Post spacebar if pressed alone)"
              },
              {
                "description": "CapsLock to Hyper/Escape"
              },
              {
                "description": "Change Right_command To CapsLock, Hold to Right_Command"
              },
              {
                "description": "Right (left_shift+l to right)"
              },
              {
                "description": "Down (left_shift+j to down)"
              },
              {
                "description": "Left (left_shift+h to left)"
              },
              {
                "description": "Up (left_shift+k to up)"
              },
              {
                "description": "Home (left_shift+h to fn+left Workman)"
              },
              {
                "description": "End (left_shift+t to fn+right Workman)"
              },
              {
                "description": "Word forward (left_shift+w to option+right Workman)"
              },
              {
                "description": "Word back (left_shift+b to option+left Workman)"
              },
              {
                "description": "Page up (left_shift+p to page_up Workman)"
              },
              {
                "description": "Page down (left_shift+d to page_down)"
              }
            ]
          },
          "extra_description_text": "Edit some key for Workman keyboard layout."
        },
        {
          "path": "json/right_option_fn.json",
          "json": {
            "title": "Right OptionFN",
            "rules": [
              {
                "description": "Right OptionFN: home row developer symbols on Lenovo Trackpoint II"
              },
              {
                "description": "OptionFN: RightOption+asdfghjkl; to &[{(%#)}]|, right option to quote, printscreen to double quote"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "Application Specific",
      "id": "application-specific",
      "files": [
        {
          "path": "json/obsidian_emacs_vim-insert.json",
          "json": {
            "title": "Obsidian.app, emacs like key at vim-insert mode_rev02",
            "rules": [
              {
                "description": "ctrl + bfpnae (only for Obsidian.app)_rev02"
              },
              {
                "description": "ctrl + hdk (only for Obsidian.app)_rev02"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/Sync_SystemVolume_to_Music.json",
          "json": {
            "title": "Sync Music and System Volume (no key repeat)",
            "rules": [
              {
                "description": "Sync Music and System Volume (on volume key events)"
              },
              {
                "description": "Sync Music and System Volume (on volume key events, allow offset)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/Sync_SystemVolume_to_iTunes.json",
          "json": {
            "title": "Sync iTunes and System Volume (no key repeat)",
            "rules": [
              {
                "description": "Sync iTunes and System Volume (on volume key events)"
              },
              {
                "description": "Sync iTunes and System Volume (on volume key events, allow offset)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/bash.json",
          "json": {
            "title": "Shell helpers",
            "rules": [
              {
                "description": "Double tap left-shift to return ~/"
              },
              {
                "description": "Double tap right-shift to return ~/."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/convert_hangouts_mutes_to_zoom_us.json",
          "json": {
            "title": "Convert hangouts Mic/Video Mutes to Zoom.us",
            "rules": [
              {
                "description": "Convert hangouts mic mute to Zoom.us mic mute"
              },
              {
                "description": "Convert hangouts video mute to Zoom.us video mute"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swap_alt_cmd_in_autodesk_maya.json",
          "json": {
            "title": "ALT <=> CMD in Autodesk Maya",
            "rules": [
              {
                "description": "Swap option and command in Autodesk Maya"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/remote-desktop.json",
          "json": {
            "title": "Remote Desktop",
            "rules": [
              {
                "description": "Swap command and control"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mac_osx_on_rdp.json",
          "json": {
            "title": "Mac OSX Style Shortcuts for RDP sessions. Translates OSX shortcuts to PC equivalent",
            "maintainers": [
              "varp"
            ],
            "rules": [
              {
                "description": "Mac OSX RDP: Home key to the beginning of the sentence (Command + Left)"
              },
              {
                "description": "Mac OSX RDP: End key to the end of the sentence (Command + Right)"
              },
              {
                "description": "Mac OSX RDP: Option(Alt)+Tab as Switch Application (Command+Tab)"
              },
              {
                "description": "Mac OSX RDP: Copy/Paste/Cut"
              },
              {
                "description": "Mac OSX RDP: Alt+Left/Right to Control+Left/Right"
              },
              {
                "description": "Mac OSX RDP: Undo"
              },
              {
                "description": "Mac OSX RDP: Redo"
              },
              {
                "description": "Mac OSX RDP: Select-All"
              },
              {
                "description": "Mac OSX RDP: Save"
              },
              {
                "description": "Mac OSX RDP: New"
              },
              {
                "description": "Mac OSX RDP: Reload browser page Command+R to F5"
              },
              {
                "description": "Mac OSX RDP: New Tab"
              },
              {
                "description": "Mac OSX RDP: Find"
              },
              {
                "description": "Mac OSX RDP: Open"
              },
              {
                "description": "Mac OSX RDP: Close Window"
              },
              {
                "description": "Mac OSX RDP: Fn+Space To Switch Input (Left Shift+Left Alt)"
              },
              {
                "description": "Mac OSX RDP: Cmd+Space To Switch Input (Left Shift+Left Alt)"
              },
              {
                "description": "Mac OSX RDP: Cmd+Space To Switch Input (Left Shift+Left Ctrl)"
              },
              {
                "description": "Mac OSX RDP: Quit Application (Alt+F4 to Command+Q)"
              },
              {
                "description": "Mac OSX RDP: Browser open location (Ctrl+L)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/french_mac_keyboard_remote_desktop.json",
          "extra_description_path": "extra_descriptions/french_mac_keyboard_remote_desktop.json.html",
          "json": {
            "title": "For French Mac Keyboard under Microsoft Remote Desktop",
            "rules": [
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): All drawn keyboard symbols in one rule / Tous les symboles dessinés en une seule règle"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): Swap left Cmd and Ctrl / Echange Ctrl et Cmd de gauche"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): '6' to '§'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): '8' to '!'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): '=' to '-'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): '=' + Shift to '_'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): 'non_us_backslash' to '@'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): 'non_us_backslash' + shift to '#'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): 'close_bracket' + Shift to '*'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): 'close_bracket' + Alt to '€'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): 'backslash' to '`'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): 'backslash' + Shift to '£'"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): 'slash' to '='"
              },
              {
                "description": "French remap for Microsoft Remote Desktop (incl. beta): 'slash' + Shift to '+'"
              }
            ]
          },
          "extra_description_text": "Version 1.0 Version 1.1 : Now support Microsoft Remote Desktop 10 Schedule features: We do not have yet tools to distinguish the remote session window from those which sometimes open asking for credentials before the remote connexion is set. Beware of passwords that use symbols that are not common to the PC and Mac keyboard. You can not use the option \"Use F1, F2, etc. as standard function keys\" in a specific application yet. But as we regularly need F5 to \"update\" on Windows, my advice is to activate this option permanently. I'm afraid there will never be any change on this point. Some configurations require the use of unexpected keys: Current key to use for complex editing on Mac French keyboard # 1172 . Known troubles: When the virtual keyboard is opened in your remote Windows session, some keys may behave strangely (for example, a grave accent). MacBook users with Touch Bar may need to add these rules: Touch bar does not change to f1-f12 when I press the key fn. More information: French Mac Keyboard with Microsoft Remote Desktop App under Sierra or more recent"
        },
        {
          "path": "json/tmux_prefix.json",
          "extra_description_path": "extra_descriptions/tmux_prefix.json.html",
          "json": {
            "title": "Tmux Prefix (rev 3)",
            "rules": [
              {
                "description": "Tmux Prefix Mode [Tab as trigger key]"
              },
              {
                "description": "Tmux Prefix Mode [Fn as trigger key]"
              },
              {
                "description": "Tmux Prefix Mode [caps_lock as trigger key] (rev 2)"
              },
              {
                "description": "Tmux Prefix Mode [escape as trigger key]"
              },
              {
                "description": "Tmux Prefix Mode [ ctrl+B as prefix ]"
              },
              {
                "description": "Tmux Prefix Mode [ ctrl+A as prefix ]"
              },
              {
                "description": "Tmux Prefix Mode [ ctrl+Space as prefix ]"
              }
            ]
          },
          "extra_description_text": "Tmux Prefix Mode Tmux is a terminal multiplexer that lets you switch easily between several programs in one terminal, detach them, etc. It's very useful but most key bindings require a prefix key combination (default: Ctrl+B). This mode allows you to use a simple [ Modifier + Key ] to trigger a [ Ctrl+B ] [ Key ] sequence. How to use Choose a trigger key to be used Chooose a prefix to replace (based on your tmux configuration, default is Ctrl+B) Now trigger a tmux command simply using Trigger + Key (eg: Fn+c -> Ctrl+b, c to create a new window) Note: Keys that are remapped include: a-z, 0-9, comma,slash,period,semicolon,quote,open_bracket,close_bracket"
        },
        {
          "path": "json/terminal_navi.json",
          "extra_description_path": "extra_descriptions/terminal_navi.json.html",
          "json": {
            "title": "Keyboard shortcuts for Terminal apps",
            "maintainers": [
              "marlonrichert"
            ],
            "rules": [
              {
                "description": "Keyboard shortcuts for Terminal apps"
              }
            ]
          },
          "extra_description_text": "Makes the following keyboard shortcuts work the same or similarly in both macOS and terminal apps: Shortcut Action Bash/Readline Zsh ⌘Z Undo ✅ ✅ ⇧⌘Z Redo ❌ needs bindkey '^[e' redo ⌘D Duplicate the word left of the cursor ❌ ✅ ⇧⌘D Duplicate the last word of the previous command line ✅ ✅ ⌫ Delete one character backward ✅ ✅ ⌦ or fn⌫ Delete one character forward ✅ ✅ ⌥← Go one natural word backward ✅ needs WORDCHARS='' ⌥→ Go one natural word forward ✅ needs WORDCHARS='' ⌥⌫ Cut one natural word backward ✅ needs WORDCHARS='' ⌥⌦ or ⌥fn⌫ Cut one natural word forward ✅ needs WORDCHARS='' ⌘← Go one shell word backward ✅ needs bindkey '^[^B' vi-backward-blank-word ⌘→ Go one shell word forward ✅ needs bindkey '^[^F' vi-forward-blank-word ⌘⌫ Cut one shell word backward ✅ needs zsh-edit ⌘⌦ or ⌘fn⌫ Cut one shell word forward ✅ needs zsh-edit ⌃A Go to previous line break ✅ ✅ ⌃E Go to next line break ✅ ✅ ⌃U Cut to previous line break ✅ needs bindkey '^U' backward-kill-line ⌃K Cut to next line break ✅ ✅ ⌥↑ Go to first line ✅ first line of history ✅ first line of buffer or, if already there, of history ⌥↓ Go to last line ✅ last line of history ✅ last line of buffer or, if already there, of history"
        },
        {
          "path": "json/launch_new_Chrome_or_iTerm2_windows.json",
          "extra_description_path": "extra_descriptions/launch_new_Chrome_or_iTerm2_windows.json.html",
          "json": {
            "title": "Launch new Chrome or iTerm2 windows via keybindings",
            "rules": [
              {
                "description": "left control + left shift + ` (backtick) - launches a new iTerm2 window with the default profile"
              },
              {
                "description": "left control + left shift + 1 - launches a new Google Chrome window"
              }
            ]
          },
          "extra_description_text": "This keybinding is set up to launch new windows of running applications, rather than launching applications themselves. (Launching a running application only brings it to the foreground). This is meant to mimic the launcher keybindings available in Ubuntu."
        },
        {
          "path": "json/launchapp_catalina.json",
          "extra_description_path": "extra_descriptions/launchapp_catalina.json.html",
          "json": {
            "title": "Launch apps",
            "rules": [
              {
                "description": "Launch apps by left control & option+letters."
              }
            ]
          },
          "extra_description_text": "updated paths to match new locations in Catalina left control&option + a: Activity Monitor left control&option + d: Dictionary left control&option + e: VSCode left control&option + f: Finder left control&option + s: Safari left control&option + t: iTerm"
        },
        {
          "path": "json/xcode.json",
          "json": {
            "title": "Xcode",
            "rules": [
              {
                "description": "Xcode Visual Studio style (Run, Stop, Build, Step, Breakpoint)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vscode.json",
          "extra_description_path": "extra_descriptions/vscode.json.html",
          "json": {
            "title": "Visual Studio Code",
            "rules": [
              {
                "description": "Change left_shift to cmd+k if pressed alone in VSCode"
              },
              {
                "description": "Change mouse button 4/5 to navigate back/forward in VSCode"
              }
            ]
          },
          "extra_description_text": "Double-press Shift to Go To Anything Enable the rule \"Change left_shift to cmd+k if pressed alone in VSCode\", then edit your keyboard shortcuts in VSCode and bind the command workbench.action.quickOpen to the chord ⌘K ⌘K."
        },
        {
          "path": "json/safari.json",
          "json": {
            "title": "Don't exit fullscreen when pressing ESC in Safari",
            "rules": [
              {
                "description": "Remap ESC to Option-ESC in Safari only"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/safari_ignore_command_q.json",
          "json": {
            "title": "Don't exit when pressing LCommand + q in Safari (RCommand + q still works)",
            "rules": [
              {
                "description": "Remap LCommand + q to q in Safari only"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/virtual_machine.json",
          "json": {
            "title": "Virtual Machine and Remote Desktop (Microsoft or other)",
            "rules": [
              {
                "description": "Swap left command and control in virtual machine/remote desktop"
              },
              {
                "description": "Swap right command and control in virtual machine/remote desktop"
              },
              {
                "description": "Use standard function keys in virtual machine/remote desktop"
              },
              {
                "description": "Press Fn + function keys to use special features in virtual machine/remote desktop"
              },
              {
                "description": "Swap >/< and °/§ in virtual machine/remote desktop"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/amethyst.json",
          "json": {
            "title": "Amethyst Mode",
            "rules": [
              {
                "description": "Trigger Amethyst Mode/Amethyst Second Mode with 9/0"
              },
              {
                "description": "9+8 cycle layout forward 9+* backward"
              },
              {
                "description": "9+q/w shrink expand main pane"
              },
              {
                "description": "9+J/j move focuse clockwise / counter clockwise"
              },
              {
                "description": "90+J/j swap focused window clockwise / counter clockwise"
              },
              {
                "description": "90+8/* swap focused window clockwise / counter clockwise screen"
              },
              {
                "description": "9+ui/UI focus screen 12 / throw focus window to screen 12"
              },
              {
                "description": "9+zxc/ZXC focus screen 123 / throw focus window to screen 123"
              },
              {
                "description": "9+t toggle flot for current window"
              },
              {
                "description": "9+asdf select tall/wide/column/fullscren layout"
              },
              {
                "description": "Amethyst Mode All in one"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/finder.json",
          "json": {
            "title": "Finder",
            "rules": [
              {
                "description": "Use Return as Open"
              },
              {
                "description": "Use Return as Open and Use Fn+Return as Rename"
              },
              {
                "description": "Use F2 as Rename"
              },
              {
                "description": "Use Delete as Move to Trash"
              },
              {
                "description": "Use Fn+Delete as Move to Trash"
              },
              {
                "description": "Use Backspace as Go to Previous Folder"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/Photoshop_Windows_keymaps.json",
          "json": {
            "title": "Adobe Photoshop",
            "rules": [
              {
                "description": "PC-Style control option and command"
              },
              {
                "description": "option + z/y to undo/redo"
              },
              {
                "description": "F1 to creat new layer"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vim_style_escape.json",
          "json": {
            "title": "Vim style escape key mapping",
            "rules": [
              {
                "description": "Map ctrl + [ to escape"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vim_buffer_switch.json",
          "json": {
            "title": "Vim Ctrl+6 to Ctrl+Shift+6 for buffer switching",
            "rules": [
              {
                "description": "Map ctrl + 6 to ctrl + shift + 6"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/sketch-shortcut.json",
          "extra_description_path": "extra_descriptions/sketch-shortcut.json.html",
          "json": {
            "title": "Sketch Shortcut",
            "rules": [
              {
                "description": "Post spacebar to Command+Shift+Ctrl if not press alone in Sketch app."
              },
              {
                "description": "Use spacebar+; and spacebar+' switch artboard in Sketch app. (Should be used with previous rule and put under it)"
              }
            ]
          },
          "extra_description_text": "Usage The First rule change the spacebar to the Command+Shift+Ctrl combination, and only effected in the sketch app. You can custom the sketch shortcuts in the system preference with key combination like Command+Shift+Ctrl+A, and then press Spacebar with key A to use the shortcut. Suggested shortcut preference: (@tankxu's sketch shortcut) The Second rule is useful for HHKB user. Sketch offer the shortcut Fn+Arrow Left and Fn+Arrow Right to switch the artboard, but HHKB can't post these key combination. And the artboard switch function aren't be listed in the application's menu, so it can't be customed shortcut in the system preference. The second rule can solve this problem. It can make the keyboard post Fn+Arrow Left key combination when the Spacebar pressed with key semicolon and post Fn+Arrow Right key combination when the Spacebar pressed with key quote, Now you can use spcebar to switch the artboard. The second rule shoud be used with the first rule, and it need to be putted under the fisrt rule in the \"Enable rules\" list."
        },
        {
          "path": "json/figma-shortcut.json",
          "extra_description_path": "extra_descriptions/figma-shortcut.json.html",
          "json": {
            "title": "Figma Shortcut",
            "rules": [
              {
                "description": "Post spacebar to Command+Shift+Ctrl if not press alone in Figma app."
              }
            ]
          },
          "extra_description_text": "Figma version of Sketch shortcut created by @tankxu."
        },
        {
          "path": "json/option_tab.json",
          "json": {
            "title": "Use Option + Number to Switch Tabs in Chrome, Brave & Firefox",
            "rules": [
              {
                "description": "Use Option + Number to Switch Tabs in Chrome, Brave & Firefox"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/alacritty.json",
          "json": {
            "title": "Map Option to soft-meta for Alacritty",
            "rules": [
              {
                "description": "Map left_option to soft-meta for Alacritty"
              },
              {
                "description": "Map right_option to soft-meta for Alacritty"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/aquaskk.json",
          "json": {
            "title": "AquaSKK",
            "rules": [
              {
                "description": "AquaSKK for JetBrains"
              },
              {
                "description": "AquaSKK for Terminal/iTerm2"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vnc_swap_left_cmd_ctrl.json",
          "json": {
            "title": "CTRL/CMD Key Swap",
            "rules": [
              {
                "description": "swap left control/command keys for vncviewer"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/jetbrains_osx_mimics_pc.json",
          "extra_description_path": "extra_descriptions/jetbrains_osx_mimics_pc.json.html",
          "json": {
            "title": "Jetbrains matches Windows",
            "rules": [
              {
                "description": "Command -> Alt in Jetbrains Rider"
              },
              {
                "description": "Alt -> Ctrl in Jetbrains Rider"
              },
              {
                "description": "Ctrl -> Gui in Jetbrains Rider"
              },
              {
                "description": "Ctrl -> Gui in Jetbrains Rider"
              }
            ]
          },
          "extra_description_text": "Remap Control, Option, and Command on OSX to mimic the PC layout when using Jetbrains products. Sharing settings via Jetbrains Account Sync and Settings Repositories results in a more intuitive layout. command: alt option: ctrl control: command command-tab: command-tab (to preserve window swapping)"
        },
        {
          "path": "json/spectacle_fn_wasdf.json",
          "extra_description_path": "extra_descriptions/spectacle_fn_wasdf.json.html",
          "json": {
            "title": "Jetbrains matches Windows",
            "rules": [
              {
                "description": "Spectacle fn WASDF"
              }
            ]
          },
          "extra_description_text": "When using Spectacle on a Macbook, hitting fn and WASD of F will move the current window. Fast window movement with Spectacle even when overriding modifiers in other apps. fn-w: snap current window up fn-a: snap current window left fn-s: snap current window down fn-d: snap current window right fn-f: make current window fullscreen"
        },
        {
          "path": "json/stadia_cmd.json",
          "extra_description_path": "extra_descriptions/stadia_cmd.html",
          "json": {
            "title": "Alt to Command Key in Stadia",
            "rules": [
              {
                "description": "Use CMD key as alt for Google Chrome Stadia gaming - requires install of Stadia app on Macbook"
              }
            ]
          },
          "extra_description_text": "Use the Mac Command key as ALT for Google Chrome Stadia gaming. Requires installation of the Stadia chrome app on Macbook."
        },
        {
          "path": "json/wow_cmd.json",
          "extra_description_path": "extra_descriptions/wow_cmd.html",
          "json": {
            "title": "Command Key to Control in World of Warcraft",
            "rules": [
              {
                "description": "Use the left CMD key as ctrl for World of Warcraft on Macbook"
              }
            ]
          },
          "extra_description_text": "Use the Mac Command key as CTRL for World of Warcraft."
        },
        {
          "path": "json/swap_ctrl_and_cmd_for_trader_workstation.json",
          "json": {
            "title": "CTRL <=> CMD in Trader Workstation",
            "rules": [
              {
                "description": "Swap CTRL and command in Trader Workstation to fix copy-paste issues"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/roon.json",
          "json": {
            "title": "Roon media keys",
            "maintainers": [
              "torarnek"
            ],
            "rules": [
              {
                "description": "Roon volume down media key"
              },
              {
                "description": "Roon volume up media key"
              },
              {
                "description": "Roon toggle mute media key"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/notion_cmd_p_to_cmd_k.json",
          "json": {
            "title": "Swap Cmd+K and Cmd+P in Notion",
            "rules": [
              {
                "description": "Change Left Cmd+K to Left Cmd+P in Notion"
              },
              {
                "description": "Change Right Cmd+K to Right Cmd+P in Notion"
              },
              {
                "description": "Change Left Cmd+P to Left Cmd+K in Notion"
              },
              {
                "description": "Change Right Cmd+P to Right Cmd+K in Notion"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/panic-nova-home-and-end.json",
          "extra_description_path": "extra_descriptions/panic-nova-home-and-end.json.html",
          "json": {
            "title": "Panic Nova: Home and End",
            "rules": [
              {
                "description": "Panic Nova: Allow Home and End to navigate along a line."
              },
              {
                "description": "Panic Nova: Allow Shift+Home and Shift+End to select text along a line."
              }
            ]
          },
          "extra_description_text": "Home and End key modifier for Panic's Nova editor. Changes the Home and End keys so they can navigate and select text along a single line instead of the top and bottom of a file."
        },
        {
          "path": "json/citrix_ctrl_alt_win.json",
          "extra_description_path": "extra_descriptions/citrix.html",
          "json": {
            "title": "Citrix Receiver/Workspace modifiers for Ctrl, Alt, Windows order",
            "rules": [
              {
                "description": "In Citrix, add fn modifier to Tab so it is forwarded"
              },
              {
                "description": "In Citrix, change left_option to Alt key via \"⌘⌥ Command (left)-Option\""
              },
              {
                "description": "In Citrix, change right_option to Alt key via \"⌘⌥ Command (left)-Option\""
              },
              {
                "description": "In Citrix, change left_command as well via \"Send Windows logo key using ⌘ Command (right)\""
              }
            ]
          },
          "extra_description_text": "Map Apple modifiers (Ctrl, Option, Command) to Windows modifiers (Ctrl, Alt, Windows or Ctrl, Windows, Alt) in Citrix Receiver & Workspace, with working Alt+Tab and Windows key shortcuts. For whatever reason, Citrix Receiver/Workspace MacOS client has only limited settings to map Alt and Windows keys, motivating the need for this modification. Example Citrix Workspace (2005) settings that work with this configuration: References The goods on offer Configure shortcuts in the client MacOS Windows Citrix Workspace users have another option Original Gist with this modification"
        },
        {
          "path": "json/citrix_ctrl_win_alt.json",
          "extra_description_path": "extra_descriptions/citrix.html",
          "json": {
            "title": "Citrix Receiver/Workspace modifiers for Ctrl, Windows, Alt order",
            "rules": [
              {
                "description": "In Citrix, add fn modifier to Tab so it is forwarded"
              },
              {
                "description": "In Citrix, change left_command to Alt via \"⌘⌥ Command (left)-Option\""
              },
              {
                "description": "In Citrix, change right_command to Alt via \"⌘⌥ Command (left)-Option\""
              },
              {
                "description": "In Citrix, change left_option to Windows logo key via \"Send Windows logo key using ⌘ Command (right)\""
              },
              {
                "description": "In Citrix, change right_option to Windows logo key via \"Send Windows logo key using ⌘ Command (right)\""
              }
            ]
          },
          "extra_description_text": "Map Apple modifiers (Ctrl, Option, Command) to Windows modifiers (Ctrl, Alt, Windows or Ctrl, Windows, Alt) in Citrix Receiver & Workspace, with working Alt+Tab and Windows key shortcuts. For whatever reason, Citrix Receiver/Workspace MacOS client has only limited settings to map Alt and Windows keys, motivating the need for this modification. Example Citrix Workspace (2005) settings that work with this configuration: References The goods on offer Configure shortcuts in the client MacOS Windows Citrix Workspace users have another option Original Gist with this modification"
        },
        {
          "path": "json/control-to-command-in-office.json",
          "json": {
            "title": "Use left control key as command key in Microsoft Office",
            "rules": [
              {
                "description": "Use left control key as command key in Microsoft Office (rev 1)"
              },
              {
                "description": "Use right control key as command key in Microsoft Office (rev 1)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/preview-vim.json",
          "extra_description_path": "extra_descriptions/preview-vim.html",
          "json": {
            "title": "vim / zathura bindings for Preview.app",
            "rules": [
              {
                "description": "vim-preview: map jk (down/up)"
              },
              {
                "description": "vim preview: map JK (previous / next page)"
              },
              {
                "description": "vim-preview: map hl (left / right)"
              },
              {
                "description": "vim-preview: map HL (previous / next position)"
              },
              {
                "description": "vim-preview: map zoom (9/0/-/=)"
              },
              {
                "description": "vim-preview: map gG (go to first / last page)"
              }
            ]
          },
          "extra_description_text": "vim-preview This modification provides zathura/vim-like functionality to Preview.app. Key binds currently implemented: Movement Left => h Right => l Down => j Up => k Previous position => H Next position => L Previous page => K Next page => J First page => g Last page => G Zoom Zoom In => = Zoom Out => - Actual size => 0 Zoom to fit => 9 The main repository is hosted on Github. Contributions are welcome!"
        },
        {
          "path": "json/swap_ctrl_and_cmd_except_in_terminal.json",
          "json": {
            "title": "Swap left-ctrl and command except in Terminal",
            "rules": [
              {
                "description": "Swap left-ctrl and command except in Terminal"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/KeynoteAndIllustrator.json",
          "json": {
            "title": "Mouse 4,5 -> Keynote Zoom",
            "maintainers": [
              "juonic"
            ],
            "rules": [
              {
                "description": "Mouse button 4 to zoom out"
              },
              {
                "description": "Mouse button 5 to zoom in"
              },
              {
                "description": "Keynote Group to CTR+G"
              },
              {
                "description": "Keynote UnGroup to CTR+Shift+G"
              },
              {
                "description": "Keynote Layer Top"
              },
              {
                "description": "Keynote Layer Bottom"
              },
              {
                "description": "Illustrator Layer Bottom"
              },
              {
                "description": "Illustrator Layer Top"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/apple_mail_shortcuts.json",
          "json": {
            "title": "Apple Mail shortcuts",
            "rules": [
              {
                "description": "⌘-enter to send in Apple Mail"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/slack_shortcuts.json",
          "json": {
            "title": "Slack shortcuts",
            "rules": [
              {
                "description": "⌘-k to hyperlink in Slack"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/eject_to_activate_and_toggle_mic_mute_ms_teams.json",
          "json": {
            "title": "Toggle mic mute in MS Teams with the Eject key",
            "rules": [
              {
                "description": "Maps Eject to ⌘⇧M in Teams"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/shift-enter-fish-shell-autocomplete.json",
          "json": {
            "title": "Execute Fish shell autocomplete",
            "rules": [
              {
                "description": "Left Shift + Enter maps to Right Arrow > Enter, which will execute the suggested command in Fish shell"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/clickup.json",
          "json": {
            "title": "ClickUp shortcuts",
            "rules": [
              {
                "description": "⌘-w to close internal windows in ClickUp"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/dictation-to-mutify.json",
          "json": {
            "title": "Dictation to Mutify",
            "rules": [
              {
                "description": "Dictation key (F5 action) to trigger Mutify mute/unmute (⇧⌘0) action. Most useful for Macs without Touchbar."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/browser-rshift-enter-disable.json",
          "json": {
            "title": "Don't send shift when accidentally pressing right shift + enter in web browsers (Lshift + enter still works)",
            "rules": [
              {
                "description": "Remap Rshift + enter to enter in web browsers only"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/jetbrains_rider_fn.json",
          "json": {
            "title": "Function keys work as Fn keys (instead of media keys) for JetBrainsRider",
            "rules": [
              {
                "description": "JetBrains Rider Function keys work as Fn keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/finder_improved_navigation.json",
          "json": {
            "title": "Finder improved Navigation",
            "rules": [
              {
                "description": "Use F2 as Rename and set onedit"
              },
              {
                "description": "Use Backspace as Go to Previous Folder in Finder if not onedit"
              },
              {
                "description": "Use Return as Open if not renaming file"
              },
              {
                "description": "Use Return to finish renaming when onedit=1"
              },
              {
                "description": "Use Esc to finish renaming when onedit=1"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/music_keyboard_controls.json",
          "extra_description_path": "extra_descriptions/music_keyboard_controls.html",
          "json": {
            "title": "Basic Music app keyboard control",
            "rules": [
              {
                "description": "Uses Ctrl shortcuts to explicitly play/pause/prev/next Music app."
              }
            ]
          },
          "extra_description_text": "Tired of Safari or other apps stealing the focus of your shiny multimedia keys. Are you playing or pausing the youtube video when you actually want to pause the Music app in the background? Use these shortcuts instead to control the Music app explicitly to avoid mistakes! The keyboard shortcuts are based on old defaults from SizzlingKeys which is not maintained any more and was only for iTunes rather than the new Apple Music app abomination. These shortcuts are most likely going to clash with something else you have, unless you have kept upgrading your mac from those times and never updated the shortcuts. So just copy the JSON and change the bindings to your liking. The three default keyboard bindings: Ctrl+Space: pauses or plays back the current Music tune. If the Music app is closed the app will be launched, but for whatever reason it won't start playing until you focus it and play something manually or repeat the keyboard shortcut. 🍎 peak software quality. Command+option+cursor right: Skips to the next song. Command+option+cursor left: Skips to the previous song. All the magic is done through shell calls to osascript. You can find more information about available iTunes/Music commands to use in osascript at websites like Doug's AppleScripts."
        }
      ]
    },
    {
      "name": "Alternative Keyboard Layouts",
      "id": "alternative-keyboard-layouts",
      "files": [
        {
          "path": "json/numpad.json",
          "json": {
            "title": "Keypad as Arrows (windows style)",
            "rules": [
              {
                "description": "Enable Num Lock Toggle"
              },
              {
                "description": "Numpad Keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/caps_lock_german.json",
          "json": {
            "title": "Change caps_lock key (German keyboard layout)",
            "rules": [
              {
                "description": "Change caps_lock key to slash."
              },
              {
                "description": "Change caps_lock key to backslash."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/dvorak_layout.json",
          "json": {
            "title": "Dvorak Keyboard",
            "rules": [
              {
                "description": "Remap keys to use Dvorak keyboard layout"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/dvorak_cmd_qwerty_layout.json",
          "json": {
            "title": "Dvorak-CmdQwerty Keyboard",
            "rules": [
              {
                "description": "Remap keys to use Dvorak-CmdQwerty keyboard layout"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/dvorak_cmd_qwerty_layout_only_us_input.json",
          "json": {
            "title": "Dvorak-CmdQwerty Keyboard",
            "rules": [
              {
                "description": "Remap keys to use Dvorak-CmdQwerty keyboard layout only on US input"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/programmer_dvorak_cmd_qwerty_layout.json",
          "json": {
            "title": "Programmer Dvorak-CmdQwerty Keyboard (rev 2)",
            "rules": [
              {
                "description": "Remap keys to use Programmer Dvorak-CmdQwerty keyboard layout"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/programmer_dvorak_cmd_qwerty_toggle.json",
          "extra_description_path": "extra_descriptions/programmer_dvorak_cmd_qwerty_toggle.json.html",
          "json": {
            "title": "Programmer Dvorak CmdQwerty Toggle",
            "rules": [
              {
                "description": "While using Programmer Dvorak, holding command temporarily switches to the US qwerty layout."
              }
            ]
          },
          "extra_description_text": "You need to install the Programmer Dvorak Keyboard Layout first before using this rule. Once the driver package is installed, this rule will simply toggle the OS-wide layout to it when the command key is pressed and toggle back when it is released."
        },
        {
          "path": "json/colemak_layout.json",
          "json": {
            "title": "Colemak Keyboard",
            "rules": [
              {
                "description": "Remap keys to use Colemak keyboard layout"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/colemak_dh_ansi_layout.json",
          "extra_description_path": "extra_descriptions/colemak_dh_ansi_layout.json.html",
          "json": {
            "title": "Colemak Mod-DH Keyboard (ANSI)",
            "rules": [
              {
                "description": "Colemak Mod-DH Standard (ANSI)"
              },
              {
                "description": "Colemak Mod-DH Wide (ANSI)"
              },
              {
                "description": "Colemak Mod-DH Alt-Home (ANSI)"
              },
              {
                "description": "Colemak Mod-DHk (ANSI)"
              }
            ]
          },
          "extra_description_text": "See Colemak Mod-DH ANSI keyboards for more information."
        },
        {
          "path": "json/codemak.json",
          "extra_description_path": "extra_descriptions/codemak.json.html",
          "json": {
            "title": "CODEmak (Coder's Colemak): symbolic number-row",
            "rules": [
              {
                "description": "CODEmak (Coder's Colemak): re-arrange / unshift number row (rev 6/18)"
              },
              {
                "description": "CODEmak (Coder's Colemak) Lite: just unshift number row (rev 10/18)"
              }
            ]
          },
          "extra_description_text": "A carefully-designed, alternative, programming-oriented number-row, for those of us who use the symbols far more often than the numbers. NOTE: These (with the exception of the &lsquo;lite&rsquo;, unshifting-only mode) have no effect unless &lsquo;Colemak&rsquo; is selected in macOS's input-method configuration. This intentionally gives you a quick escape-hatch when others use your laptop &mdash; enable &lsquo;input source in menu bar&rsquo;, and then just click it and select your original layout if someone else is going to be using your computer! This is my (@ELLIOTTCABLE&rsquo;s) keyboard-layout project. I'd like to give this layout an actual homepage, once it stabilizes, with more info; but here's a summary for now: Start with Colemak&sup1; (Probably Mod-DH&sup2;); Re-arrange the number keys into a more useful, logical order &mdash; like Programmer&rsquo;s Dvorak; Swap the shifting &mdash; bring the symbols down to the default position, and require that the Shift key be pressed to access the original numbers; NYI: further re-arrange the now-unshifted symbols to optimize for common operations amongst programmers.&sup3; The current revision of this layout doesn't attempt that last one &mdash; each symbol is moved precisely alongside its corresponding number. (This is already an excellent improvement, in my experience &mdash; ! and @ being on the index fingers is absolutely excellent for DuckDuckGo and Twitter! 😉 Not to mention that this approach is very keycap-compatible, for those of us with external, mechanical keyboards.) (There's also a second, &lsquo;lite&rsquo; mode that only unshifts the symbol-row. This is useful if you can programmatically or physically remap the layout of keys your physical keyboard, but cannot programmatically swap the shift-modifier behaviour. This version is not restricted to the OS-level Colemak mapping, because it's assumed you can remap your alphas in the same fashion as you remapped your number-row, and are thus not using the OS-level remapping.) I suggest using this alongside these other modifications: Modern Space Cadet (rev 3) &mdash; Caps Lock to Escape on single press, Control on press and hold. Mouse Keys Mode v4 (rev 1) Notes: Why Colemak? This argument has gone 'round and 'round a million times, but my personal reasons are pretty simple: Proven, available built-in to every major OS that I might need to pair-program on, easy to learn for normies I may evangelize to, and there's at least a snowball's chance in hell that I'll be able to find sculpted, beautiful keycaps that actually match what th damn keys do. &mldr; unless you're like me, use an external keyboard, and would like to use sculpted keycaps that match your actual layout. See footnote 1. I have lots of plans in this direction (at the very least, Space-Cadet-Shift or not, the parentheses belong on either the index or middle fingers!); but I want to go about them in a systematic way. I've got a few databases I'd like to scrape for symbol-frequency numbers &mdash; GitHub for various programming-language figures, VimGolf for The One True Editor's controls, etceteras &mdash; as well as reaching out for feedback from specific communities — r/mk, Deskthority, the Colemak forums &mldr;. Anyway. I'm sure I'll get to it someday. Suuuuure. :P"
        },
        {
          "path": "json/neo2.json",
          "extra_description_path": "extra_descriptions/neo2.json.html",
          "json": {
            "title": "Neo2",
            "rules": [
              {
                "description": "Neo2 mod 3 and 4 keys (Apple keyboards). Rule applied to Apple-made keyboards only."
              },
              {
                "description": "Neo2 mod 3 and 4 keys (third party Mac keyboard). Rule applied to all keyboards."
              },
              {
                "description": "Neo2 mod 3 and 4 keys (Windows keyboard). Rule applied to all non-Apple keyboards."
              },
              {
                "description": "Neo2 layer 4"
              },
              {
                "description": "Neo2 layer 6"
              },
              {
                "description": "Toggle caps_lock by pressing left_shift + right_shift at the same time"
              },
              {
                "description": "Tab acts as Ctrl if pressed with another key"
              },
              {
                "description": "Prevent problematic keys (?, /, #, =, and ')') from being treated as option key shortcut"
              },
              {
                "description": "Prevent all layer 3 keys from being treated as option key shortcut. Maps to 'Bugfixes' dummy dead key on Numpad 2 + left_option + left_shift"
              },
              {
                "description": "Neo2 mod 4: Map ↖ to Home and ↘︎ to End in terminal apps (move this rule above the rule 'Neo2 layer 4')."
              }
            ]
          },
          "extra_description_text": "Neo2 layout Rules for the Neo2 keyboard layout. Intended to be used with the corresponding keyboard layout file. Base rules Neo2 layer 4 Base rule for activating layer 4. Neo2 layer 6 Base rule for activating layer 6. Neo2 mod 3 and 4 keys (Apple keyboard). Toggle mod4 by pressing both mod4 keys simultaneously. Toggle mod4 by pressing both mod4 keys simultaneously.Take this rule if you are using your Mac with a common Apple keyboard. Neo2 mod 3 and 4 keys (Windows keyboard). Toggle mod4 by pressing both mod4 keys simultaneously. Toggle mod4 by pressing both mod4 keys simultaneously.Take this rule if you are using your Mac with a Windows keyboard or with the Apple Magic Keyboard with Numeric Keypad. Extension rules Neo2 mod 4: Map ↖ to Home and ↘︎ to End in terminal apps. This extra-rule lets you jump to the beginning and the end of a line in your terminal using ↖ and ↘︎ on layer 4. More precisely, it maps mod4+a to Home and mod4+g to End in the following terminal apps: macOS Terminal, iTerm2, Hyper, alacritty, kitty. Make sure to move this rule above the rule 'Neo2 layer 4' in the Karabiner-Elements preferences. In case you use the macOS Terminal: You need to perform an additional configuration step in the macOS Terminal preferences: Go to 'Terminal' -> 'Preferences' -> 'Profiles' -> 'Keyboard' and add the following two entries: Key: ↖ Action: \\033OH and Key: ↘︎ Action: \\033OF. Toggle caps_lock by pressing left_shift + right_shift at the same time Toggle caps_lock by pressing left_shift + right_shift at the same time. Tab acts as Ctrl if pressed with another key Tab acts as Ctrl if pressed with another key. If pressed alone, it acts as usual. Prevent problematic keys (?, /, #, =, and ')') from being treated as option key shortcut This rule serves as a workaround for issues that layer 3 could cause in some applications. See known issues for more information. Prevent all layer 3 keys from being treated as option key shortcut This rule serves as a workaround for issues that layer 3 could cause in some applications. See known issues for more information."
        },
        {
          "path": "json/half-qwerty.json",
          "extra_description_path": "extra_descriptions/half-qwerty.json.html",
          "json": {
            "title": "half-qwerty keyboard emulation (rev 2)",
            "rules": [
              {
                "description": "half-qwerty keyboard emulation (rev 2)"
              }
            ]
          },
          "extra_description_text": "Emulates the behavior of the half-qwerty keyboard for one handed typing."
        },
        {
          "path": "json/half_qwertz_one_handed_layout.json",
          "json": {
            "title": "Half-QWERTZ (German one-handed layout)",
            "rules": [
              {
                "description": "Half-QWERTZ (German one-handed layout). Hold space to mirror the layout. The + and # keys are not mapped."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/cmd_return.json",
          "extra_description_path": "extra_descriptions/cmd_return.json.html",
          "json": {
            "title": "Command_L|Command_R + Return to Backslash",
            "rules": [
              {
                "description": "Command_[L|R] (⌘) + Return (⏎) to Backslash and Command_[L|R] (⌘) + Shift (⇧) + Return (⏎) to Pipe (|)"
              }
            ]
          },
          "extra_description_text": "This rule is handy when you are used to or would like to use the US English Layout but have one of the layouts with the big Return key . Then the Backslash (\\) key next to the Return (⏎) becomes really annoying. You can remap the backslash (\\) key to return_or_enter with a Simple Modification and then enable this Complex Modification to make your backslash and pipe keys accessible when you press your right Command (⌘)."
        },
        {
          "path": "json/DvorakLeft.json",
          "json": {
            "title": "Dvorak Keyboard Left Handed",
            "rules": [
              {
                "description": "Remap keys to use left handed Dvorak keyboard layout"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/carpalx-qgmlwy-us.json",
          "json": {
            "title": "CarpalX QGMLWY Keyboard USA",
            "rules": [
              {
                "description": "Remap keys to use CarpalX QGMLWY USA keyboard layout"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/carpalx-qgmlwb-us.json",
          "json": {
            "title": "CarpalX QGMLWB Keyboard USA",
            "rules": [
              {
                "description": "Remap keys to use CarpalX QGMLWB USA keyboard layout"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/carpalx-qfmlwy-us.json",
          "json": {
            "title": "CarpalX QFMLWY Keyboard USA",
            "rules": [
              {
                "description": "Remap keys to use CarpalX QFMLWY USA keyboard layout"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/frogpad-right-one-hand-keyboard.json",
          "extra_description_path": "extra_descriptions/frogpad-right-one-hand-keyboard.html",
          "json": {
            "title": "Frogpad one hand keyboard - right",
            "rules": [
              {
                "description": "frogpad remap for right hand by clark"
              }
            ]
          },
          "extra_description_text": "Right hand remap for the now-defunct Frogpad one handed keyboard. The \"J\" key is remapped to the letter \"H\" and if you have already memorized the frogpad layout, the rest should be straightforward from there! Special note that the and > keys that become lost in this layout are now remapped to the left-shift+Z and left-shift+X keys respectively. Full Keymap (Right Hand) For \"Primary\" keys, simply type as normal with right hand. To activate \"Secondary\" keys, hold down (spacebar) while typing. Default Primary Secondary (spacebar) (spacebar) N/A o p j i w m u r b y a ' (quote) t f (tab) l d v k t c j h l h e z g o q . y x , s g m n k n i (backspace or delete backwards) b u (delete forward) (right-cmd) N/A , (comma) (right-alt) (return/enter) . (period) (left-shift)+z N/A (left-shift)+x > N/A"
        },
        {
          "path": "json/frogpad-left-one-hand-keyboard.json",
          "extra_description_path": "extra_descriptions/frogpad-left-one-hand-keyboard.html",
          "json": {
            "title": "Frogpad one hand keyboard - left",
            "rules": [
              {
                "description": "frogpad remap for left hand by stevenmchoi and clarkm"
              }
            ]
          },
          "extra_description_text": "Left hand remap for the now-defunct Frogpad one handed keyboard. The \"D\" key is remapped to the letter \"H\" and if you have already memorized the frogpad layout, the rest should be straightforward from there! Full Keymap (Left Hand) For \"Primary\" keys, simply type as normal with left hand. To activate \"Secondary\" keys, hold down (spacebar) while typing. Default Primary Secondary (spacebar) (spacebar) N/A q p j w w m e r b r a ' (quote) t f (tab) a d v s t c d h l f e z g o q z y x x s g c n k v i (backspace or delete backwards) b u (delete forward) (left-alt) N/A , (comma) (left-ctrl) (return/enter) . (period)"
        },
        {
          "path": "json/multi_n.json",
          "extra_description_path": "extra_descriptions/multi_n.html",
          "json": {
            "title": "MultiN Mode: Use TouchBoard To Extend Keyboard",
            "maintainers": [
              "Chenlm"
            ],
            "rules": [
              {
                "description": "Multi_1 Lower Mode: Extend Number Keyboard And Media Keys",
                "available_since": "12.6.9"
              },
              {
                "description": "Multi_1 Mode: Extend Keyboard",
                "available_since": "12.6.9"
              },
              {
                "description": "Multi_2 iThoughtsX Mode: Application Operations",
                "available_since": "12.6.9"
              },
              {
                "description": "Multi_2 Firefox Mode: Application Operations",
                "available_since": "12.6.9"
              },
              {
                "description": "Multi_2 Finder Mode: Application Operations",
                "available_since": "12.6.9"
              },
              {
                "description": "Multi_2 Mode: All Application Operations",
                "available_since": "12.6.9"
              },
              {
                "description": "Multi_3 Mode: Open Application",
                "available_since": "12.6.9"
              },
              {
                "description": "Multi_4 Mode: Hammerspoon WinWin",
                "available_since": "12.6.9"
              }
            ]
          },
          "extra_description_text": "README_en MultiN Touchpad Keyboard ModeThis project (github path) shares a multi-mode keyboard operation scheme, which is mainly suitable for notebooks. By combining the touchpad and keyboard, the operability of the keyboard can be greatly enriched.Multi-touch multi-mode keyboard solutionThe idea of ​​this solution is to map the keys of the keyboard into different modes through different multi-finger touch modes, thereby expanding the keys of the keyboard, shortening the keystroke, and submitting input efficiency. For example, single-finger touch+hjkl is mapped to arrow keys, and four-finger touch+hjkl is mapped to window layout shortcut keys.In order to facilitate memory, this program divides the control mode into four modes:Single-finger touch + key: single-finger keyboard expansion modeTwo-finger touch + key: two-finger program control modeThree-finger touch + key: three-finger program start modeFour-finger touch + key: Four-finger window management modeSingle finger keyboard expansion modeThis mode expands the notebook keypad into a full keyboard through single-finger touch + keys. The keys are defined as follows (Multi_1 means single-finger touch):Multi_1 + h -> leftMulti_1 + j -> downMulti_1 + k -> upMulti_1 + l -> right...Two-finger program control modeThis mode maps two-finger touch + buttons into operation shortcuts of different programs. The currently defined program control buttons are as follows (Multi_2 means two-finger touch):General keys:Multi_2 + s -> Command + SMulti_2 + w -> Command + WMulti_2 + q -> Command + QFirefox:Multi_2 + h -> privious tabMulti_2 + l -> next tabMulti_2 + j -> page downMulti_2 + l -> page up...Three-finger program opening modeThis mode maps the three-finger touch + button to open different programs. The currently defined program control buttons are as follows (Multi_3 means three-finger touch):Multi_3 + f -> FirefoxMulti_3 + e -> EmacsMulti_3 + t -> iTerm2Multi_3 + i -> Intellij Idea...Four-finger window management modeThis mode maps the four-finger touch + key to window management shortcut keys. The window management uses Harmmerspoon. The defined keys are as follows (Multi_4 means four-finger touch):Multi_4 + h -> the left side of the two split screenMulti_4 + l -> the right side of the two split screenMulti_4 + j -> the bottom side of the two split screenMulti_4 + k -> the upper side of the two split screenMulti_4 + f -> full screen...Method to realizeGoal This solution is only realized through open source software on macOS.Software usedHammerspoon + WinWin pluginKarabiner-ElementNeed to open Multi Touch plug-inHow to useThe generated configuration files are in the dist directory and can be used directly.multi_n.json is the Karabiner_Element configuration file, which can be copied or linked to the Karabiner_Element configuration directory to enable. Karabiner_Element configuration directory is /Users//.config/karabiner/assets/complex_modifications.config.lua is the Hammerspoon configuration file, which can be introduced in the Harmmerspoon configuration file.Custom keyboard mappingIf you need to customize, you can modify the keyboard mapping configuration file config.ini in the src directory, and then execute the makejson.py file to regenerate the multi_n.json configuration file."
        }
      ]
    },
    {
      "name": "International (Language Specific)",
      "id": "international",
      "files": [
        {
          "path": "json/caps_lock_toggle_chinese_english.json",
          "extra_description_path": "extra_descriptions/caps_lock_toggle_chinese_english.html",
          "json": {
            "title": "Toggle Chinese English With caps_lock",
            "rules": [
              {
                "description": "caps_lock 切换中英文，长按锁定大写，短按恢复小写"
              }
            ]
          },
          "extra_description_text": "实现功能： 单击 caps_lock 时发送 control+空格 组合键，用以切换中英文输入法。 长按 caps_lock 触发大写锁定。 再次短按 caps_lock 取消大写锁定。 用来解决使用第三方拼音输入法(搜狗拼音、百度拼音等)时无法使用系统的 \"使用中/英键切换“ABC”输入模式\" 选项问题。"
        },
        {
          "path": "json/left_option_to_chinese.json",
          "json": {
            "title": "Switch to Simplified Chinese (简体中文) by pressing left-alt alone",
            "rules": [
              {
                "description": "When pressing the left option/alt key alone, switch to Simplified Chinese"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/japanese.json",
          "json": {
            "title": "For Japanese （日本語環境向けの設定） (rev 6)",
            "rules": [
              {
                "description": "コマンドキーを単体で押したときに、英数・かなキーを送信する。（左コマンドキーは英数、右コマンドキーはかな） (rev 3)"
              },
              {
                "description": "CTRLキーを単体で押したときに、英数・かなキーを送信する。（左CTRLキーは英数、右CTRLキーはかな）"
              },
              {
                "description": "オプションキーを単体で押したときに、英数・かなキーを送信する。（左オプションキーは英数キー、右オプションキーはかなキー）"
              },
              {
                "description": "コマンドキー（左右どちらでも）を単体で押したときに、英数・かなをトグルで切り替える。 (rev 2)"
              },
              {
                "description": "右コマンドキーを、英数・かなのトグルに変更する"
              },
              {
                "description": "英数・かなキーを他のキーと同時に押したときに、Optionキーを送信する (rev 3)"
              },
              {
                "description": "escキーを押したときに、英数キーも送信する（vim用）"
              },
              {
                "description": "Ctrl+[を押したときに、英数キーも送信する（vim用） (rev 2)"
              },
              {
                "description": "Ctrl+[を押したときに、escキーと英数キーを送信する"
              },
              {
                "description": "英数・かなキーをtoggle方式にする"
              },
              {
                "description": "右コマンドキーを単体で押したときに、かなキーを送信、左コントロールキーを単体で押したときに、英数キーを送信する。 (rev 2)"
              },
              {
                "description": "シフトキーを単体で押したときに、英数・かなキーを送信する。（左シフトキーは英数、右シフトキーはかな)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/jis_to_ascii.json",
          "json": {
            "title": "For Japanese （JIS配列をASCII配列風にする設定）",
            "rules": [
              {
                "description": "英数・かなキーを他のキーと組み合わせて押したときに、コマンドキーを送信する。"
              },
              {
                "description": "コマンドキーをオプションキーに置き換える。"
              },
              {
                "description": "バッククオートとチルダを割り当てる。"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/jis_to_us_symbols.json",
          "json": {
            "title": "Japanese JIS to US Keyboard: Remap Symbol Keys",
            "maintainers": [
              "halfwhole"
            ],
            "rules": [
              {
                "description": "Change shift + 2 from \" to @"
              },
              {
                "description": "Change shift + 6 from & to ^"
              },
              {
                "description": "Change shift + 7 from ' to &"
              },
              {
                "description": "Change shift + 8 from ( to *"
              },
              {
                "description": "Change shift + 9 from ) to ("
              },
              {
                "description": "Change shift + 0 from 0 to )"
              },
              {
                "description": "Change shift + - from = to _"
              },
              {
                "description": "Change ^ to ="
              },
              {
                "description": "Change shift + ^ from ~ to +"
              },
              {
                "description": "Change ¥ to `"
              },
              {
                "description": "Change shift + ¥ from | to ~"
              },
              {
                "description": "Change @ to ["
              },
              {
                "description": "Change shift + @ from ` to {"
              },
              {
                "description": "Change [ to ]"
              },
              {
                "description": "Change shift + [ from { to }"
              },
              {
                "description": "Change shift + ; from + to :"
              },
              {
                "description": "Change : to '"
              },
              {
                "description": "Change shift + : from * to \""
              },
              {
                "description": "Change ] to \\"
              },
              {
                "description": "Change shift + ] from } to |"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/german_pc_shortcuts.json",
          "json": {
            "title": "German PC-Style Shortcuts (Enable various Alt Gr key combinations)",
            "rules": [
              {
                "description": "PC-Style German Alt Gr (Backslash, @, pipe, tilde, brackets)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/german_pc_dell_shortcuts.json",
          "json": {
            "title": "German PC-Style Shortcuts (Enable various Alt Gr key combinations), Dell Keyboard",
            "rules": [
              {
                "description": "PC-Style German Alt Gr (Backslash, @, pipe, tilde, brackets) Dell Keyboard"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/german_umlaut.json",
          "json": {
            "title": "German Umlaut",
            "rules": [
              {
                "description": "Change option + a/o/u to ä/ö/ü"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/german_programming.json",
          "extra_description_path": "extra_descriptions/german_programming.json.html",
          "json": {
            "title": "German mapping for programming (/, \\, |, {}, [], ~) (rev 2)",
            "rules": [
              {
                "description": "German mapping for programming (/, \\, |, {}, [], ~) (rev 2)"
              }
            ]
          },
          "extra_description_text": "Mapped Keys From To Control+ö { Control+ä } Left Command+ö [ Left Command+ä ] Control++ ~ Control+- / Right Option+ß \\ Right Option+ |"
        },
        {
          "path": "json/hungarian_pc.json",
          "json": {
            "title": "Hungarian PC-Style layout (Enable various Alt Gr key combinations)",
            "rules": [
              {
                "description": "PC-Style Hungarian layout (Alt Gr, Backslash, @, pipe, tilde, brackets)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/us-cro.json",
          "json": {
            "title": "US keyboard with Croatian letters on right command key",
            "rules": [
              {
                "description": "right_command + '[' = 'š'"
              },
              {
                "description": "'right_command' + ']' = 'đ'"
              },
              {
                "description": "'right_command' + '\\' = 'ž'"
              },
              {
                "description": "'right_command' + ';' = 'č'"
              },
              {
                "description": "'right_command' + `'` = 'ć'"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/czech_pc_shortcuts.json",
          "json": {
            "title": "Czech PC-Style Shortcuts (AltGr+V -> '@', AltGr+Q -> '\\', AltGr+B -> '{', AltGr+N -> '}' etc...)",
            "rules": [
              {
                "description": "AltGr+1 -> '~'"
              },
              {
                "description": "AltGr+3-> '^'"
              },
              {
                "description": "AltGr+Q -> '\\'"
              },
              {
                "description": "AltGr+W -> '|'"
              },
              {
                "description": "AltGr+E -> '€'"
              },
              {
                "description": "AltGr+F -> '['"
              },
              {
                "description": "AltGr+G -> ']'"
              },
              {
                "description": "AltGr+; -> '$'"
              },
              {
                "description": "AltGr+X -> '#'"
              },
              {
                "description": "AltGr+C -> '&'"
              },
              {
                "description": "AltGr+V -> '@'"
              },
              {
                "description": "AltGr+B -> '{'"
              },
              {
                "description": "AltGr+N -> '}'"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/spanish_accents.json",
          "json": {
            "title": "Hold and tap for Spanish accents",
            "rules": [
              {
                "description": "double A to Á"
              },
              {
                "description": "double E to É"
              },
              {
                "description": "double I to Í"
              },
              {
                "description": "double O to Ó"
              },
              {
                "description": "double U to Ú"
              },
              {
                "description": "double N to Ñ"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swap_pound_and_hash.json",
          "json": {
            "title": "For British Keyboard (Exchange £ and #)",
            "rules": [
              {
                "description": "Exchange £ shift-3 and # option-3"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swap_yen_and_backslash.json",
          "json": {
            "title": "Swap ¥ and \\ for Japanese Romaji input on US Keyboards",
            "rules": [
              {
                "description": "Change Backslash to Alt+Backslash"
              },
              {
                "description": "Change Alt+Backslash to Backslash"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swap_yen_and_backslash_jis.json",
          "json": {
            "title": "Swap ¥ and \\ always on JIS Keyboards",
            "rules": [
              {
                "description": "Change ¥ to Alt+¥"
              },
              {
                "description": "Change Alt+¥ to ¥"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swiss_pc_shortcuts.json",
          "extra_description_path": "extra_descriptions/swiss_pc_shortcuts.json.html",
          "json": {
            "title": "Swiss PC-Style Shortcuts",
            "maintainers": [
              "Birate"
            ],
            "rules": [
              {
                "description": "Option+[è/ü] -> ["
              },
              {
                "description": "Option+[¨] -> ]"
              },
              {
                "description": "Option+[2] -> @ "
              },
              {
                "description": "Option+[à/ä] -> { "
              },
              {
                "description": "Option+[$] -> }"
              },
              {
                "description": "Option+[<] -> \\  "
              },
              {
                "description": "Option+[] -> ´"
              },
              {
                "description": "Option+[^] -> ~"
              }
            ]
          },
          "extra_description_text": "Swiss PC-Like Shortcuts Most of the usual PC shortcuts have been configured, don't forget to donate to the owner here This may not totally work with an external keyboard"
        },
        {
          "path": "json/for_korean_keyboard.json",
          "extra_description_path": "extra_descriptions/for_korean_keyboard.html",
          "json": {
            "title": "For Korean Keyboard",
            "maintainers": [
              "Metalliza"
            ],
            "rules": [
              {
                "description": "shift + 스페이스 를 사용하여 입력 소스 변경"
              },
              {
                "description": "오른쪽 command 키를 사용하여 입력 소스 변경"
              },
              {
                "description": "한글 106키 키보드의 한/영 키를 사용하여 입력 소스 변경"
              },
              {
                "description": "오른쪽 option 키를 사용하여 한글을 한자로 변환"
              },
              {
                "description": "한글 106키 키보드의 한자 키를 사용하여 한글을 한자로 변환"
              }
            ]
          },
          "extra_description_text": "For Korean Keyboard MacOS의 키보드 단축키 설정에서 이전 입력 소스 선택을 디폴트 상태로 두어야 합니다. 이전 입력 소스 선택 : ^스페이스 ⇧ shift + ␣ 스페이스 를 사용하여 입력 소스를 변경할 수 있습니다. 오른쪽의 ⌘ command 키를 사용하여 입력 소스를 변경할 수 있습니다. 한글 106키 키보드의 한글 키를 사용하여 입력 소스를 변경할 수 있습니다. 오른쪽의 ⌥ option 키를 사용하여 한글을 한자로 변환할 수 있습니다. 한글 106키 키보드의 한자 키를 사용하여 한글을 한자로 변환할 수 있습니다."
        },
        {
          "path": "json/korean_pc.json",
          "json": {
            "title": "For Korean PC Keyboard",
            "rules": [
              {
                "description": "Change Kor/Eng key to command+space"
              },
              {
                "description": "Change Hanja key to option+return"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ChangeInputSourceDirectlyForKorean.json",
          "extra_description_path": "extra_descriptions/ChangeInputSourceDirectlyForKorean.html",
          "json": {
            "title": "Change input-source directly for korean",
            "maintainers": [
              "creatorKoo"
            ],
            "rules": [
              {
                "description": "Right_command to korean <-> english"
              }
            ]
          },
          "extra_description_text": "Description Right_command to korean english right_command to 2-Set korean(두벌식) ABC(로마자) Notes Originally, the mac-os input-source-change event was triggered by a key-up event. In contrast, the windows-os input-source-change event was triggered by a key-down event. So, this function is windows-os liked input source change system. If you have any issue, email me."
        },
        {
          "path": "json/caps_lock_toggle_korean_english_include_parallels.json",
          "json": {
            "title": "CapLock to Korean <-> English (include parallels)",
            "maintainers": [
              "wooglae,kim"
            ],
            "rules": [
              {
                "description": "CapLock to Right_Alt for parallels"
              },
              {
                "description": "CapLock to F19"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/korean_won_to_backtick.json",
          "json": {
            "title": "For Korean",
            "rules": [
              {
                "description": "Change Won (₩) to grave accent (`) in Korean layout."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/russian.json",
          "json": {
            "title": "For Russian",
            "rules": [
              {
                "description": "Change grave accent (`) to ё in Russian layout"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/norwegian_programming.json",
          "json": {
            "title": "Norwegian mapping for programming (\\, {}, <>)",
            "rules": [
              {
                "description": "non_us_backslash(') => Less/greater than(<>)"
              },
              {
                "description": "Right command + 8-9 => curly-brackets {}}"
              },
              {
                "description": "Right command + 7 => Backslash(\\)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/finnish_programming.json",
          "json": {
            "title": "Finnish mapping for programming (|, {} and \\)",
            "rules": [
              {
                "description": "Finnish {} keys"
              },
              {
                "description": "Finnish | key"
              },
              {
                "description": "Finnish \\ key"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/spanish_resurrect_dead_keys.json",
          "json": {
            "title": "Make circumflex, tilde and backtick work with one stroke on Spanish key layout.",
            "rules": [
              {
                "description": "One stroke circumflex."
              },
              {
                "description": "One stroke tilde."
              },
              {
                "description": "One stroke backtick."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swedish_umlaut.json",
          "json": {
            "title": "Swedish Umlaut",
            "rules": [
              {
                "description": "Change option + q/o to ä/ö"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/for-russian-keyboard.json",
          "json": {
            "title": "For Russian keyboard (exchange № and #)",
            "desciption": "Внутри файла находятся два правила, которые меняют поведение сочетания клавиш «shift + 3» и «alt + 3». На обычной русской раскладке «shift + 3» вернёт №, а «alt + 3» вернёт #. Я изменил это поведение. После применения правила русская раскладка на «shift + 3» вернёт #, а при «alt + 3» вернёт №. Inside the file there are two rules that change the behavior of the key combination «shift + 3» and «alt + 3». On a regular Russian layout, «shift + 3» will return №, and «alt + 3» will return #. I changed this behavior. After applying the rule, the Russian layout on the «shift + 3» will return #, and with «alt + 3» it will return №.",
            "rules": [
              {
                "description": "На русской раскладке меняем поведение сочетания «shift + 3». Был №, а стала #"
              },
              {
                "description": "На русской раскладке меняем поведение сочетания «alt + 3». Была #, а стал №"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swedish_programming.json",
          "extra_description_path": "extra_descriptions/swedish_programming.json.html",
          "json": {
            "title": "Swedish Windows keyboard for programmers",
            "rules": [
              {
                "description": "Swedish keyboard, Right Alt + 7,0 => curly-brackets {}"
              },
              {
                "description": "Swedish keyboard, AltGr+key_left_of_backspace => Option+Shift+7 (Backslash \\)"
              },
              {
                "description": "Swedish keyboard, AltGr+key_left_of_z => Right option+7 (pipe character |)"
              }
            ]
          },
          "extra_description_text": "If you are used to a Swedish keyboard on Windows, this mapping will make your mac behave more it would on Windows."
        },
        {
          "path": "json/DK_Programmer.json",
          "json": {
            "title": "Danish DK Programmer Keyboard",
            "rules": [
              {
                "description": "Danish DK keyboard, Right Alt + 7,0 =>            { , }"
              },
              {
                "description": "Danish dk keyboard, AltGr+key_left_of_backspace =>        pipe    |"
              },
              {
                "description": "Danish Dk keyboard, AltGr+key_left_of_z =>          Backslash \\"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/quickly_chinese_jis.json",
          "json": {
            "title": "Quickly switch to Chinese input on a JIS keyboard",
            "rules": [
              {
                "description": "kana*2 to Chinese"
              },
              {
                "description": "kana to Japanese/Chinese"
              },
              {
                "description": "kana+eisuu to Chinese"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/cmd-opt-en-ru-uk.json",
          "extra_description_path": "extra_descriptions/cmd-opt-en-ru-uk.html",
          "json": {
            "title": "Left CMD -> en, Right CMD -> ru, Right Opt -> uk",
            "rules": [
              {
                "description": "Left CMD -> en"
              },
              {
                "description": "Right CMD -> ru"
              },
              {
                "description": "Right Opt -> uk"
              }
            ]
          },
          "extra_description_text": "This is a non-modal way to live with three keyboard layouts. It maps single presses of modifier keys (leaving long presses to being original modifiers) to unconditionally enable some keyboard layout. See a blog post about switching keyboard layouts why this is good."
        },
        {
          "path": "json/rdp-japanese-us.json",
          "extra_description_path": "extra_descriptions/rdp-japanese-us.json.html",
          "json": {
            "title": "RDP for Japanese, US Keyboard （リモートデスクトップとUSキーボード、日本語環境の設定）",
            "rules": [
              {
                "description": "[RDP] RDPアプリ以外では、コマンドキーを単体で押したときに、英数・かなキーを送信する。（左コマンドキーは英数、右コマンドキーはかな） (rev 3)"
              },
              {
                "description": "[RDP] RDPアプリではCommandをAlt, OptionをWindowsキーに入れ替える"
              }
            ]
          },
          "extra_description_text": "リモートデスクトップとUSキーボード、日本語環境の設定 この設定は、RDPアプリ(Microsoft Remote DesktopまたはParallels Client)をUSキーボードおよび日本語環境で利用する際に有用です。 この設定では、以下2点の修正を行うことができます。 RDPアプリ以外を利用中に、コマンドキーを単体で押したときに英数・かなキーを送信することができます。 RDPアプリ使用中は、左右のCommandとOptionを入れ替えます。すなわち、CommandをAltおよびOptionをWindowsキーとして利用できます。 注意点 コマンドキーを単体で押したときに英数・かなキーを送信する設定は、For Japanese （日本語環境向けの設定） (rev 6)のコマンドキーを単体で押したときに、英数・かなキーを送信する。（左コマンドキーは英数、右コマンドキーはかな） (rev 3)と同じものです。本設定使用中はこの設定は使用しないでください。 RDPアプリ使用中は、⌘-Qや⌘-Tabなどの操作は⌥-Qおよび⌥-Tabなどとなります。 RDP接続先のWindowsでalt-ime-ahkを利用している場合、Parallels ClientではAlt空打ちによるIME切り替えが動作しませんが、Mirosoft Remote Desktopでは動作します（2021年9月7日現在）。"
        },
        {
          "path": "json/russian-keyboard-remapping.json",
          "json": {
            "title": "Russian Keyboard Remapping",
            "rules": [
              {
                "description": "Remap keys in Russian to Windows layout for non-Mac keyboards"
              },
              {
                "description": "Remap keys in Russian to Windows layout for all keyboards"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/kanafn.json",
          "json": {
            "title": "KanaFN (“keyexchange”-compatible)",
            "rules": [
              {
                "description": "KanaFN: japanese_kana to fn unlesss alone"
              },
              {
                "description": "KanaFN: Kana+[ijkl] to Up, Left, Down, Right"
              },
              {
                "description": "KanaFN: Kana+[h;] to Backspace, Delete"
              },
              {
                "description": "KanaFN: Kana+[op] to Page Up, Page Down"
              },
              {
                "description": "KanaFN: Kana+[,.] to Home, End"
              },
              {
                "description": "KanaFN: Kana+N to Enter"
              },
              {
                "description": "Optional: spacebar to fn unlesss alone"
              },
              {
                "description": "Optional: japanese_eisuu to left_option unlesss alone"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "Key Specific",
      "id": "key-specific",
      "files": [
        {
          "path": "json/accute_accent_deadkey_azerty.json",
          "extra_description_path": "extra_descriptions/accute_accent_deadkey_azerty.json.html",
          "json": {
            "title": "Convert ù to an accute accent (´) dead key (AZERTY) (rev 2)",
            "rules": [
              {
                "description": "ù to deadkey ´ while leaving % accessible. (rev 2)"
              }
            ]
          },
          "extra_description_text": "Version 1.0 Typing an accute accented letter in AZERTT requires the Alt+Shift+1+letter combinaion. This slows down typing considerably compared to the AltGr method in Linux and Windows. This setup converts the \"ù\" key to a \"´\" deadkey to you can use it to type accents. More information: Raise an issue on the fork."
        },
        {
          "path": "json/auto_close_brackets_and_quotes.json",
          "extra_description_path": "extra_descriptions/auto_close_brackets_and_quotes.json.html",
          "json": {
            "title": "Auto close brackets & quotes",
            "maintainers": [
              "harmtemolder"
            ],
            "rules": [
              {
                "description": "(1/2) Do not auto close brackets & quotes when holding fn"
              },
              {
                "description": "(2/2) Auto close brackets & quotes ( (), '', \"\", ``, [], {}, “”, ‘’, <> )"
              }
            ]
          },
          "extra_description_text": "Karabiner Auto Quotes A complex modification that automatically closes brackets and quotes while typing. It does the following: Typing a ( is automatically followed by a ) and placing the cursor between them ' is followed by a ' \" by another \" ` by ` [ by ] { by } “ by ” ‘ by ’ by > For normal behavior (i.e. to type a single one of these) hold fn. For example fn+' types one single quote. It contains exceptions for Atom, iTerm, PyCharm and VSCodium, because all of these already have their own intelligent quote and bracket handling."
        },
        {
          "path": "json/change_grave_accent_to_escape.json",
          "json": {
            "title": "Change grave accent (backtick) to escape, option grave accent to grave accent",
            "rules": [
              {
                "description": "Post Escape if grave_accent_and_tilde (backtick) is pressed alone; post grave_accent (backtick) if Option + grave_accent_and_tilde is pressed."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/command_arrows_to_ctrl_arrows.json",
          "json": {
            "title": "Exchange command + arrows keys with control + arrows keys",
            "rules": [
              {
                "description": "Exchange command + arrow keys with control + arrow keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/command_arrows_to_option_arrows.json",
          "json": {
            "title": "Exchange command + arrows keys with option + arrows keys",
            "rules": [
              {
                "description": "Exchange command + arrow keys with option + arrow keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/command_esc_to_command_grave_accent.json",
          "json": {
            "title": "Command + Esc to Command + `",
            "rules": [
              {
                "description": "Command + Esc to Command + `"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/command_grave_accent_and_tilde_to_escape.json",
          "json": {
            "title": "Command + ` Grave Accent, Tilde to Esc",
            "rules": [
              {
                "description": "Command + ` Grave Accent, Tilde to Esc"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/command_r_and_shift_r_to_command_tab.json",
          "json": {
            "title": "Command_R + Shift_R to Command + Tab",
            "rules": [
              {
                "description": "Command_R + Shift_R to Command +Tab"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/control_backspace_to_function_backspace.json",
          "json": {
            "title": "Map Ctrl+Backspace-Delete to Fn+Backward-Delete (suppr current character)",
            "rules": [
              {
                "description": "Map Ctrl+Backspace-Delete to Fn+Backward-Delete (suppr current character)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/control_comma_period.json",
          "json": {
            "title": "Change control+comma & control+period",
            "rules": [
              {
                "description": "Change control+comma to comma, control+period to period"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl-to-shift.json",
          "json": {
            "title": "Left control to shift (useful for fixing typos when caps lock is remapped to control)",
            "rules": [
              {
                "description": "Ctrl-6 to ^"
              },
              {
                "description": "Ctrl-7 to &"
              },
              {
                "description": "Ctrl-8 to *"
              },
              {
                "description": "Ctrl-9 to ("
              },
              {
                "description": "Ctrl-0 to )"
              },
              {
                "description": "Ctrl-- to _"
              },
              {
                "description": "Ctrl-= to +"
              },
              {
                "description": "Ctrl-[ to {"
              },
              {
                "description": "Ctrl-] to }"
              },
              {
                "description": "Ctrl-; to :"
              },
              {
                "description": "Ctrl-' to \""
              },
              {
                "description": "Ctrl-, to <"
              },
              {
                "description": "Ctrl-. to >"
              },
              {
                "description": "Ctrl-/ to ?"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl_L-OR-ctrl_R+up-to-down-arrow.json",
          "json": {
            "title": "Map ctrl+up to down",
            "rules": [
              {
                "description": "control_L + up to down"
              },
              {
                "description": "control_R + up to down"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl_b-OR-ctrl_f-TO-left-OR-right-arrow.json",
          "json": {
            "title": "Ctrl+b/Ctrl+f to left/right arrows",
            "rules": [
              {
                "description": "Map ctrl+b/ctrl+f to left/right arrow"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl_arrows_to_option_arrows.json",
          "json": {
            "title": "Exchange control + arrows keys with option + arrows keys",
            "rules": [
              {
                "description": "Exchange control + arrow keys with option + arrow keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl_delete.json",
          "json": {
            "title": "Map Ctrl+Backward-Delete.",
            "rules": [
              {
                "description": "Add Ctrl+Backward-Delete to Option+Delete (delete current word).",
                "type": "basic"
              },
              {
                "description": "Map Ctrl-Backspace to forward Delete (forward delete one character at a time)."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrl_forward_delete.json",
          "json": {
            "title": "Map Ctrl+Forward-Delete to Option+Forward-Delete (forward delete current word)",
            "rules": [
              {
                "description": "Add Ctrl+Forward-Delete"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ctrlquote.json",
          "json": {
            "title": "Convert <c-'> to double quote",
            "rules": [
              {
                "description": "Remaps mistyped control-quote into a shft-quote. Occurs often when caps lock is remapped to control key."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/delete.json",
          "json": {
            "title": "Change delete key (rev 3)",
            "rules": [
              {
                "description": "Change shift + delete to forward delete (rev 2)"
              },
              {
                "description": "Change shift + delete to tilde (rev 1)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/eject_take_screenshot.json",
          "json": {
            "title": "Maps Eject to Screenshot",
            "rules": [
              {
                "description": "Eject to Screenshot"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/equals_del_to_forward_del.json",
          "json": {
            "title": "Equals + Delete to Forward Delete",
            "rules": [
              {
                "description": "Simultaneously press Equals + Del to get a ForwardDel"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/esc_to_eng_ime.json",
          "json": {
            "title": "For Vim User Esc to en_US/ABC IME",
            "rules": [
              {
                "description": "Esc to en_US"
              },
              {
                "description": "Esc to ABC"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/escape.json",
          "json": {
            "title": "Change escape key (rev 4)",
            "rules": [
              {
                "description": "Post caps_lock if escape is pressed alone. (rev 2)"
              },
              {
                "description": "Change fn+escape to eject."
              },
              {
                "description": "Disable escape; Change shift + escape to escape (For avoiding mistyping on the Touch Bar)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_command_backspace_and_option_backspace.json",
          "json": {
            "title": "Exchange Command+Backward-Delete (delete current line) and Option+Backward-Delete (delete current word)",
            "rules": [
              {
                "description": "Change Command+Backward-Delete and Option+Backward-Delete"
              },
              {
                "description": "Change Option+Backward-Delete to Command+Backward-Delete"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_command_del-forward_and_option_del-forward.json",
          "json": {
            "title": "Exchange Command+Forward-Delete and Option+Forward-Delete",
            "rules": [
              {
                "description": "Change Command+Forward-Delete to Option+Forward-Delete"
              },
              {
                "description": "Change Option+Forward-Delete to Command+Forward-Delete"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_command_tab_and_control_tab.json",
          "json": {
            "title": "Exchange Command+Tab (generally 'cycle through applications') and Control+Tab (generally 'cycle through tabs')",
            "rules": [
              {
                "description": "Change Command+Tab to Control+Tab"
              },
              {
                "description": "Change Control+Tab to Command+Tab"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_left_paren_and_semicolon.json",
          "json": {
            "title": "Exchange left_paren and semicolon",
            "rules": [
              {
                "description": "Exchange left_paren and semicolon"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_numbers_and_symbols.json",
          "json": {
            "title": "Exchange numbers and symbols",
            "rules": [
              {
                "description": "Exchange numbers and symbols (1234567890 and !@#$%^&*())"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_semicolon_and_colon.json",
          "json": {
            "title": "Exchange semicolon and colon",
            "rules": [
              {
                "description": "Exchange semicolon and colon"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_single_and_double_quote.json",
          "json": {
            "title": "Exchange single and double quote",
            "rules": [
              {
                "description": "Exchange single and double quote"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_square_brackets_and_curly_brackets.json",
          "json": {
            "title": "Exchange square brackets and curly brackets",
            "rules": [
              {
                "description": "Exchange {} and []"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/f12-to-dev-tools-networking-mac-ff.json",
          "json": {
            "title": "Use F12 to open Dev Tools",
            "rules": [
              {
                "description": "Use F12 to open Dev Tools Network Tab (Mac + Firefox)"
              },
              {
                "description": "Use F12 to open Dev Tools (all browsers)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/f14_to_copy_f15_to_paste.json",
          "json": {
            "title": "F14 to copy & F15 to paste",
            "rules": [
              {
                "description": "F14 to Copy"
              },
              {
                "description": "F15 to Paste"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/f2_cut_f3_copy_f4_paste.json",
          "json": {
            "title": "F2 to cut, F3 to copy, F4 to paste",
            "rules": [
              {
                "description": "F2 to Cut"
              },
              {
                "description": "F3 to Copy"
              },
              {
                "description": "F4 to Paste"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fn-copy-paste.json",
          "json": {
            "title": "F13 to copy & F14 to paste",
            "rules": [
              {
                "description": "F13 to Copy"
              },
              {
                "description": "F14 to Paste"
              },
              {
                "description": "Shift-F14 to Paste and Match Style"
              },
              {
                "description": "F15 to Paste and Match Style"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fn_backspace_to_forward_delete.json",
          "json": {
            "title": "Fn + Backspace to Forward Delete",
            "rules": [
              {
                "description": "Map Fn + Backspace to Forward Delete"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fn_grave_accent.json",
          "json": {
            "title": "Change fn + grave_accent_and_tilde to esc",
            "rules": [
              {
                "description": "Change fn + grave_accent_and_tilde to esc"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/focusaperture_Controls_Media_Playback_and_Screen_Brightness.json",
          "json": {
            "title": "focusaperture Control: Media & Brightness Controls (fn+Arrows)",
            "rules": [
              {
                "description": "focusaperture Control: Screen Brightness (fn + cmd + up/down)"
              },
              {
                "description": "focusaperture Control: Keyboard Illumination (fn + cmd + left/right)"
              },
              {
                "description": "focusaperture Control: Volume (fn + up/down)"
              },
              {
                "description": "focusaperture Control: Media Playback (fn + left/right = previous/next track)"
              },
              {
                "description": "focusaperture Control: Mute & Pause (fn+. = mute/unmute, fn+/ = Play/Pause)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/leftclick.json",
          "json": {
            "title": "Remove ctrl+left click to right click",
            "rules": [
              {
                "description": "ctrl+left click to left click"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/lshift_to_escape.json",
          "json": {
            "title": "Change shift key",
            "rules": [
              {
                "description": "Change left_shift to caps_lock if alone."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/media_key_only_control_itunes.json",
          "extra_description_path": "extra_descriptions/media_key_only_control_itunes.html",
          "json": {
            "title": "Media key only control iTunes",
            "rules": [
              {
                "description": "F7 (back track, rewind) key should only control iTunes."
              },
              {
                "description": "F8 (play/pause) key should only control iTunes."
              },
              {
                "description": "F9 (next track, fast forward) key should only control iTunes."
              },
              {
                "description": "Fn+F7 (back track, rewind) key should only control iTunes."
              },
              {
                "description": "Fn+F8 (play/pause) key should only control iTunes."
              },
              {
                "description": "Fn+F9 (next track, fast forward) key should only control iTunes."
              }
            ]
          },
          "extra_description_text": "Description From Mac OS High Sierra, Apple added new feature that media keys can control not only iTunes, but also safari, chrome (youtube, facebook video), spotify, or other media players. This would be annoying feature to someone who wanted to media keys only works for iTunes player, as before. If you want to make media key (F7,F8,F9) only control iTunes, enable this option. Source Reference https://apple.stackexchange.com/a/300903"
        },
        {
          "path": "json/modifiers_to_arrows.json",
          "json": {
            "title": "Change modifiers to arrows",
            "maintainers": [
              "thoelze1"
            ],
            "rules": [
              {
                "description": "Change left_shift to left_arrow if pressed alone"
              },
              {
                "description": "Change right_shift to right_arrow if pressed alone"
              },
              {
                "description": "Change left_command to down_arrow if pressed alone"
              },
              {
                "description": "Change right_command to up_arrow if pressed alone"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/modifiers_to_f-keys.json",
          "json": {
            "title": "Tapping modifier-keys produces a f-key.",
            "rules": [
              {
                "description": "Press left_shift alone produces F12"
              },
              {
                "description": "Press left_control alone produces F13"
              },
              {
                "description": "Press left_command alone produces F14"
              },
              {
                "description": "Press left_option alone produces F15"
              },
              {
                "description": "Press right_control alone produces F16"
              },
              {
                "description": "Press right_command alone produces F17"
              },
              {
                "description": "Press right_alt alone produces F18"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mouse_button.json",
          "json": {
            "title": "Change mouse buttons (rev 2)",
            "rules": [
              {
                "description": "Change button4,5 to back,forward (rev 1)"
              },
              {
                "description": "Change button4,5 to forward,back (rev 1)"
              },
              {
                "description": "Change left button + right button to middle button if these buttons are pressed simultaneously (rev 1)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mouse_button4_to_double_click.json",
          "json": {
            "title": "MouseButton4 to DoubleClick (don’t forget to enable your mouse under Devices)",
            "rules": [
              {
                "description": "MouseButton4 to DoubleClick"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mousebutton4tocontrolz.json",
          "json": {
            "title": "MouseButton4 to Control + z (don’t forget to enable your mouse under Devices)",
            "rules": [
              {
                "description": "MouseButton4 to Control+z"
              },
              {
                "description": "MouseButton4 to Command+z"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mousebutton5tocontrolmouse1.json",
          "json": {
            "title": "MouseButton5 to Control + MouseButton1 (don’t forget to enable your mouse under Devices). Usefull for gaming purposes, escpecially on Macbooks, where Cmd is placed in place of Ctrl.",
            "rules": [
              {
                "description": "MouseButton5 to Control + MouseButton1"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mousebuttons_copy_paste_screenshot.json",
          "json": {
            "title": "Mouse buttons 3,4,5 -> screenshot, paste, copy",
            "rules": [
              {
                "description": "Maps button 5 to copy, 4 to paste, and 3 to screenshot to clipboard"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/nonbreaking_space.json",
          "json": {
            "title": "Disable alt+spacebar (nonbreaking space)",
            "rules": [
              {
                "description": "Change alt+spacebar to spacebar"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/option-fb-to-option-arrows.json",
          "json": {
            "title": "Change option + f/b to option + left arrow/right arrow",
            "rules": [
              {
                "description": "option + f/b to option + arrows"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/print_screen_to_command_shift_4.json",
          "json": {
            "title": "Use PC Print Screen button for screen capture",
            "maintainers": [
              "0x15e",
              "Metalliza"
            ],
            "rules": [
              {
                "description": "Print Screen to Command+Shift+4"
              },
              {
                "description": "Control+Print Screen to Control+Command+Shift+4"
              },
              {
                "description": "Command+Print Screen to Command+Shift+5"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/return_to_ctrl.json",
          "json": {
            "title": "Change return to control",
            "rules": [
              {
                "description": "Change return to control if pressed with other keys, to return if pressed alone"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/screenshot_f3.json",
          "json": {
            "title": "Maps F3 to Clipboard Screenshot",
            "rules": [
              {
                "description": "F3 to Clipboard Screenshot"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/section_sign_to_escape.json",
          "json": {
            "title": "Section sign (§) to Escape",
            "maintainers": [
              "kopach"
            ],
            "rules": [
              {
                "description": "[Any Keyboard] Section sign (§) to Escape and fn + Section sign (§) to Section sign (§)."
              },
              {
                "description": "[Apple Keyboard Only] Section sign (§) to Escape and fn + Section sign (§) to Section sign (§). Useful on Mac with Touch Bar, where is no physical Escape key."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/section_sign_to_backtick.json",
          "json": {
            "title": "Section sign (§) to backtick (`)",
            "maintainers": [
              "fredericrous"
            ],
            "rules": [
              {
                "description": "Remap section sign (§) from British Keyboard to US's backtick + plus minus (±) to tilde (~)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/sinoridha_personal_mapping.json",
          "json": {
            "title": "Sinoridha Function Key",
            "rules": [
              {
                "description": "cmd + w"
              },
              {
                "description": "F2 to Cut"
              },
              {
                "description": "F3 to Copy"
              },
              {
                "description": "F4 to Paste"
              },
              {
                "description": "Lunch VS Code"
              },
              {
                "description": "Lunch Chrome"
              },
              {
                "description": "Lunch Terminal"
              },
              {
                "description": "Lunch Franz"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/spacebar.json",
          "json": {
            "title": "Change spacebar",
            "rules": [
              {
                "description": "Change spacebar to left_shift if pressed with other keys (Post spacebar when pressed alone)"
              },
              {
                "description": "Change spacebar to left_ctrl if pressed with other keys (Post spacebar when pressed alone)"
              },
              {
                "description": "Change spacebar to left_option if pressed with other keys (Post spacebar when pressed alone)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/spacebar_changes.json",
          "json": {
            "title": "Spacebar changes",
            "rules": [
              {
                "description": "Post space is pressed alone, left_ctrl otherwise"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/standard_function_keys_on_fn.json",
          "extra_description_path": "extra_descriptions/standard_function_keys_on_fn.json.html",
          "json": {
            "title": "Standard media control keys using the fn key",
            "rules": [
              {
                "description": "Media control keys using fn key - use with fn checkbox disabled and f1 = f1 etc. in Function Keys menu."
              },
              {
                "description": "Swap f key functions - to use with fn checkbox disabled. Causes Touch Bar flicker."
              },
              {
                "description": "Keep normal media keys funtionality with F1, F2 etc. set normally as default (inverted method)."
              }
            ]
          },
          "extra_description_text": "Solution to profile dependent F key swap There are 3 rules: First make sure you use the media keys as default (checkbox off)* and assign F1 to F1 etc. in the Function Keys menu for given profile. Now after adding this rule and following these steps F keys will be the used primarily for this profile. First make sure you use the media keys as default (checkbox off)*. Now after adding this rule (\"Swap f key functions..\") you avoid assignment F1 to F1 etc. like in the first rule. Drawback: causes Touch Bar to flicker when f keys are pressed (no problem with media function keys). Best solution, allows fastest setup of a profile, but requires switching to F1, F2 as default (checkbox on)*. Now you will have F keys set as default so just select this third rule (\"Keep normal media keys funtionality...\") for the profiles, where you want to keep using media function keys as default. This is inverted method so to say. *I mean checkbox on the bottom of Function Keys menu to use F1, F2 etc. as default."
        },
        {
          "path": "json/swap-paren-and-sqbrackets.json",
          "json": {
            "title": "Exchange paren and square bracket",
            "rules": [
              {
                "description": "Exchange paren and square bracket"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/wolfXu.json",
          "json": {
            "title": "Mapping [left_option-{1-0,-,=} to {F1-F10,F11,F12}",
            "rules": [
              {
                "description": "Mapping [left_option-{1-0,-,=} to {F1-F10,F11,F12}"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/touch_bar_lock.json",
          "extra_description_path": "extra_descriptions/touch_bar_lock.json.html",
          "json": {
            "title": "Touch bar lock",
            "maintainers": [
              "akrmn"
            ],
            "rules": [
              {
                "description": "shift+fn toggles touchbar mode between 'fullControlStrip' and 'functionKeys'"
              }
            ]
          },
          "extra_description_text": "In MacBooks with a Touch Bar, holding down the fn function key usually changes its behaviour. For instance, it might show the Control Strip by default, and holding down would instead show the F1-F12 function keys. This modification takes that idea further, by using the combination ⇧fn as a hard toggle, like ⇪ Caps Lock is to ⇧ Shift."
        },
        {
          "path": "json/caps_escape.json",
          "json": {
            "title": "Caps Lock to Escape, enable Caps Lock when held",
            "rules": [
              {
                "description": "Caps Lock to Escape on single press, Caps Lock on press and hold."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/right_command_v_special_paste.json",
          "json": {
            "title": "Right Command + v to paste without formatting",
            "rules": [
              {
                "description": "Right Command + v does special paste without formatting, equivalent to. cmd+opt+shift+v."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/right_command_take_screenshot.json",
          "json": {
            "title": "Maps Right Command to Screenshot",
            "rules": [
              {
                "description": "Right Command to Screenshot"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/command-LR_and_esc_to_command_and_backquote.json",
          "json": {
            "title": "Command-LR + Esc to Command + `",
            "rules": [
              {
                "description": "Command-L/Command-R + Esc to Command + ` "
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/f6_shutdown_dialog.json",
          "json": {
            "title": "Maps F6 to Ctl + Eject (Shutdown dialog)",
            "rules": [
              {
                "description": "F6 to Ctl + Eject"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/map_loption_ne_to_downup.json",
          "json": {
            "title": "Map Left Option with n/e to Down/Up arrows;",
            "rules": [
              {
                "description": "Map Left Option with n/e; to Down/Up Arrows (QWERTY alt)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/gregrcp.json",
          "json": {
            "title": "keypad_0 to copy & keypad_plus to paste",
            "rules": [
              {
                "description": "keypad_0 to Copy"
              },
              {
                "description": "keypad_plus to Paste"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/nyankko.json",
          "json": {
            "title": "Nyankko Akko",
            "rules": [
              {
                "description": "Use right_shift for selected capture"
              },
              {
                "description": "Use right_control for developer console"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mouse_button4_back_mouse_button5_forward.json",
          "json": {
            "title": "mouse_button4_to_back_action(command + left_arrow)_and_mouse_button5_to_forward_action(command+right_arrow)",
            "rules": [
              {
                "description": "Mouse button5 to back in web. NOTE: Default key setting"
              },
              {
                "description": "Mouse button5 to back in web. NOTE: left_command and left_option is changed to each other. "
              },
              {
                "description": "Mouse button4 to back in web. NOTE: Default key setting"
              },
              {
                "description": "Mouse button4 to back in web. NOTE: left_command and left_option is changed to each other. "
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/open_control_center_with_f8.json",
          "json": {
            "title": "Launch Control Center Using \"f8\"",
            "rules": [
              {
                "description": "Map f8 button to fn+c"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/tab_hold_hyper.json",
          "json": {
            "title": "Tab to Hyper When Held",
            "rules": [
              {
                "description": "Map Tab to Hyper when held"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "OS Functionality",
      "id": "os-functionality",
      "files": [
        {
          "path": "json/mouse_motion_to_scroll.json",
          "json": {
            "title": "Change mouse motion to scroll (rev 3)",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "Change button3 + mouse motion to scroll wheel (rev 1)",
                "available_since": "12.3.0"
              },
              {
                "description": "Change button4 + mouse motion to scroll wheel (rev 1)",
                "available_since": "12.3.0"
              },
              {
                "description": "Change button5 + mouse motion to scroll wheel (rev 1)",
                "available_since": "12.3.0"
              },
              {
                "description": "Change control + mouse motion to scroll wheel (rev 1)",
                "available_since": "12.3.0"
              },
              {
                "description": "Change fn + mouse motion to scroll wheel (rev 1)",
                "available_since": "12.3.0"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/launch_apps.json",
          "extra_description_path": "extra_descriptions/launch_apps.json.html",
          "json": {
            "title": "Launch apps",
            "rules": [
              {
                "description": "Launch apps by right shift+letters."
              }
            ]
          },
          "extra_description_text": "right shift + a: Activity Monitor right shift + d: Dictionary right shift + e: Text Edit right shift + f: Finder right shift + s: Safari right shift + t: Terminal"
        },
        {
          "path": "json/application_window_tab_switch_with_right_cmd_hjklsemiquote.json",
          "json": {
            "title": "Use right_command+h/j/k/l/;/' to switch current tab/window/application",
            "rules": [
              {
                "description": "Use right_command+;/' to cycle through running applications (like command+tab)."
              },
              {
                "description": "Use right_command+h/l to switch tabs in an application."
              },
              {
                "description": "Use right_command+j/k to switch windows of the foreground application ."
              },
              {
                "description": "Disable left_command+(tab/shift+tab) (to retrain reflexes using the other manipulators)."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/anti_rsi_app_switch.json",
          "json": {
            "title": "Anti-RSI App Switch (LCMD+Space to LCMD+Tab, LOpt+Space to LCMD+` and reverse +LShift or + LControl).",
            "rules": [
              {
                "description": "Anti-RSI App Switch (LCMD+Space to LCMD+Tab and reverse +LShift)."
              },
              {
                "description": "Anti-RSI App Switch (LOpt+Space to LCMD+` and reverse +LShift)."
              },
              {
                "description": "Anti-RSI App Switch (LCMD+Space to LCMD+Tab and reverse +LControl)."
              },
              {
                "description": "Anti-RSI App Switch (LOpt+Space to LCMD+` and reverse +LControl)."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fine_volume_control.json",
          "json": {
            "title": "Fine volume control (rev 2)",
            "rules": [
              {
                "description": "Map volume controls to fine volume controls (Option + Shift + Volume)"
              },
              {
                "description": "Map fn + volume controls to fine volume controls (Option + Shift + Volume)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/command_q.json",
          "json": {
            "title": "Prevent unintended command-q (rev 2)",
            "rules": [
              {
                "description": "Quit application by pressing command-q twice"
              },
              {
                "description": "Quit application by holding command-q"
              },
              {
                "description": "Quit Safari by pressing command-q twice"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mouse_keys_ambi.json",
          "extra_description_path": "extra_descriptions/mouse_keys_ambi.json.html",
          "json": {
            "title": "Mouse keys ambidextrous",
            "maintainers": [
              "k--chow"
            ],
            "rules": [
              {
                "description": "Mouse keys Ambidextrous"
              }
            ]
          },
          "extra_description_text": "Mouse keys Ambidextrous Replace the mouse with your keyboard, with either or both hands. With fast scrolling, and two speed settings. Hold the left_control key in tandem with W,A,S,D (left hand) or I,J,K,L(right hand) for mouse movement. Hold shift + left_control for 4x faster mouse movement (max speed). Fn + W,A,S,D (left hand) or I,J,K,L(right hand)for scrolling. Key bindings: Mouse motion: left_control + W,A,S,D or I, J, K, L Fast mouse motion: left_control + shift + W,A,S,D or I, J, K, L Mouse left click: left_control + Q or U Mouse right click: left_control + E or O Mouse scroll: Fn + W,A,S,D or I, J, K, L"
        },
        {
          "path": "json/mouse_keys_simple.json",
          "extra_description_path": "extra_descriptions/mouse_keys_simple.json.html",
          "json": {
            "title": "Mouse keys (simple) (rev 1)",
            "rules": [
              {
                "description": "Mouse keys (simple) (rev 1)"
              }
            ]
          },
          "extra_description_text": "Mouse keys (simple) right_shift + w: mouse up right_shift + a: mouse left right_shift + s: mouse down right_shift + d: mouse right right_shift + f: left click right_shift + g: right click right_shift + r: scroll up right_shift + v: scroll down"
        },
        {
          "path": "json/mouse_keys_full.json",
          "extra_description_path": "extra_descriptions/mouse_keys_full.json.html",
          "json": {
            "title": "Mouse keys (full) (rev 4)",
            "rules": [
              {
                "description": "Mouse keys (full) (rev 4)"
              }
            ]
          },
          "extra_description_text": "Mouse keys (full) You can enter mouse keys mode by \"right_command + m\". Mouse keys mode is active while you press the right_command key. Example: Press the right_command key Press the m key (enter mouse keys mode) Release the m key Press the j key (mouse down) Press the l key (mouse right) Release the right_command key (leave mouse keys mode) Key bindings: h: mouse left j: mouse down k: mouse up l: mouse right v: left click b: middle click n: right click f: fast mode (fast mouse move by f+hjkl) d: slow mode (slow mouse move by d+hjkl) s: scroll mode (scroll by s+hjkl)"
        },
        {
          "path": "json/mouse_keys_mode_v4.json",
          "extra_description_path": "extra_descriptions/mouse_keys_mode_v4.json.html",
          "json": {
            "title": "Mouse Keys Mode v4 (rev 2)",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "Mouse Keys Mode v4 (rev 2)",
                "available_since": "13.6.0"
              }
            ]
          },
          "extra_description_text": "Mouse keys Mode v4 You can operate mouse via keyboard. (motion, click and scroll) Mouse keys mode is active by the following procedure. d key_down any keys of mouse keys key_down (h, j, k, l,...) any keys of mouse keys key_up (h, j, k, l,...) Then mouse keys is active until you release d key. Example: Press d Press h Press j Release h Release j Release d Key bindings: h: mouse left j: mouse down k: mouse up l: mouse right v: left click b: middle click n: right click f: fast mode (fast mouse move by f+hjkl) g: slow mode (slow mouse move by g+hjkl) s: scroll mode (scroll by s+hjkl) i: set mouse cursor position to the center of main display o: set mouse cursor position to the center of second display"
        },
        {
          "path": "json/mouse_keys_full_xgwang_me.json",
          "extra_description_path": "extra_descriptions/mouse_keys_full_xgwang_me.json.html",
          "json": {
            "title": "Mouse keys (xgwang.me)",
            "rules": [
              {
                "description": "Mouse keys (xgwang.me)"
              }
            ]
          },
          "extra_description_text": "Mouse keys (xgwang.me) You can enter mouse keys mode by holding \"left_command\" then click \"right_command\". To leave mouse keys mode, hold \"left_command\" and click \"right_command\" again. Example: Press the left_command + right_command key (enter mouse keys mode) Press the j key (mouse down) Press the l key (mouse right) Press the left_command + right_command key (leave mouse keys mode) Key bindings: h: mouse left j: mouse down k: mouse up l: mouse right v: left click b: middle click n: right click f: fast mode (fast mouse move by f+hjkl) d: slow mode (slow mouse move by d+hjkl) s: scroll mode (scroll by s+hjkl)"
        },
        {
          "path": "json/disable_cmd_f1_screen_mirroring.json",
          "json": {
            "title": "Disable Cmd+F1 Toggle Screen Mirroring",
            "rules": [
              {
                "description": "Disable Cmd+F1 Toggle Screen Mirroring Shortcut (map to display_brightness_decrement), see https://discussions.apple.com/thread/2793101"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/rotate_left_modifiers.json",
          "json": {
            "title": "Rotate left modifiers",
            "rules": [
              {
                "description": "Map left ctrl to command, command to option, option to control unless in iTerm2 or Remote Desktop"
              },
              {
                "description": "Swap left option and command in iTerm2 and Remote Desktop"
              },
              {
                "description": "Map left option+tab to command+tab"
              },
              {
                "description": "Lazy left modifiers (allows option+shift+tab to shift apps backwards). Enable this last!"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/sleep-monitor.json",
          "json": {
            "title": "Add Sleep Monitor for Keyboard without Eject",
            "rules": [
              {
                "description": "Ctrl+Cmd+Shift+Esc to Sleep Monitor"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/disable_cmd_h_hide_window.json",
          "json": {
            "title": "Prevent unintended command-h hide window (rev 2)",
            "rules": [
              {
                "description": "Disable Cmd+H Hide (rev 2)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/control_lclick_to_lclick.json",
          "json": {
            "title": "Disable Ctrl Click",
            "rules": [
              {
                "description": "Ctrl + Left Click to Left Click"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/lock_screen.json",
          "json": {
            "title": "Lock Screen",
            "rules": [
              {
                "description": "Option+L to Lock Screen (macOS 10.13+)"
              },
              {
                "description": "Control+Command+Delete to Lock Screen (macOS 10.13+)"
              },
              {
                "description": "Eject to Lock Screen (macOS 10.13+)"
              },
              {
                "description": "Eject to Lock Screen - Dvorak (macOS 10.13+)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/screen_saver.json",
          "json": {
            "title": "Screen Saver (can Lock Screen)",
            "rules": [
              {
                "description": "Option+L to start Screen Saver"
              },
              {
                "description": "Control+Command+Delete to start Screen Saver"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/multitouch_diamond_cursor.json",
          "extra_description_path": "extra_descriptions/multitouch_diamond_cursor.json.html",
          "json": {
            "title": "Multitouch Diamond Cursor (rev 2)",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "Multitouch Diamond Cursor (rev 2)",
                "available_since": "12.6.9"
              }
            ]
          },
          "extra_description_text": "Multitouch Diamond Cursor changes w,a,s,d keys to arrow keys while your finger is on the trackpad. Key When one finger is on the trackpad When two fingers are on the trackpad w up arrow page up a left arrow home s down arrow page down d right arrow end Multitouch Diamond Cursor requires MultitouchExtension. Please follow this instruction before using Multitouch Diamond Cursor. Open MultitouchExtension app from Preferences > Misc. Enable \"Start at login\" on MultitouchExtension Preferences."
        },
        {
          "path": "json/multitouch_vi_mode.json",
          "extra_description_path": "extra_descriptions/multitouch_vi_mode.json.html",
          "json": {
            "title": "Multitouch Vi Mode (rev 2)",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "Multitouch Vi Mode (rev 2)",
                "available_since": "12.6.9"
              }
            ]
          },
          "extra_description_text": "Multitouch Vi Mode changes h,j,k,l keys to arrow keys while your finger is on the trackpad. Key When one finger is on the trackpad When two fingers are on the trackpad h left arrow home j down arrow page down k up arrow page up l right arrow end Multitouch Vi Mode requires MultitouchExtension. Please follow this instruction before using Multitouch Vi Mode. Open MultitouchExtension app from Preferences > Misc. Enable \"Start at login\" on MultitouchExtension Preferences."
        },
        {
          "path": "json/multitouch_mouse_buttons.json",
          "extra_description_path": "extra_descriptions/multitouch_mouse_buttons.json.html",
          "json": {
            "title": "Multitouch Mouse Buttons (rev 2)",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "Multitouch Mouse Buttons (rev 2)",
                "available_since": "12.6.9"
              }
            ]
          },
          "extra_description_text": "Multitouch Mouse Buttons changes 1,2,3,4,5,6,7,8,9 keys to mouse buttons while your finger is on the trackpad. Key Mouse button 1 left button 2 right button 3 middle button 4 button4 5 button5 6 button6 7 button7 8 button8 9 button9 Multitouch Mouse Buttons requires MultitouchExtension. Please follow this instruction before using Multitouch Mouse Buttons. Open MultitouchExtension app from Preferences > Misc. Enable \"Start at login\" on MultitouchExtension Preferences."
        },
        {
          "path": "json/thumbsense.json",
          "extra_description_path": "extra_descriptions/thumbsense.json.html",
          "json": {
            "title": "ThumbSense (rev 3)",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "ThumbSense (rev 3)",
                "available_since": "12.6.9"
              }
            ]
          },
          "extra_description_text": "Supported shortcuts Key Function F, J, SPACE Mouse left button D, K Mouse right button G Next (on web browsers) H Previous (on web browsers) W Window close ThumbSense requires MultitouchExtension. Please follow this instruction before using ThumbSense. Open MultitouchExtension app from Preferences > Misc. Enable \"Start at login\" on MultitouchExtension Preferences."
        },
        {
          "path": "json/Right_option_as_emoji_key.json",
          "json": {
            "title": "Emoji-key (non-apple keyboard [not fn])",
            "rules": [
              {
                "description": "Press right_alt alone toggles emoji input"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mouse_buttons_4_5_desktop_switch.json",
          "json": {
            "title": "Switch desktop with mouse buttons 4,5",
            "rules": [
              {
                "description": "Maps button 5 to left desktop switch, 4 to right desktop switch"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mouse_345_mac_desktop_switcher.json",
          "json": {
            "title": "Mac Mouse 3/4/5 desktop switcher",
            "rules": [
              {
                "description": "Mouse 4 Switch Left"
              },
              {
                "description": "Mouse 5 Switch Right"
              },
              {
                "description": "Mouse 3 Desktop Switcher"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/r_cmd_to_l_ctrl_and_space.json",
          "extra_description_path": "extra_descriptions/r_cmd_to_l_ctrl_and_space.json.html",
          "json": {
            "title": "r_cmd_to_l_ctrl_and_space",
            "rules": [
              {
                "description": "right_command -> left_control + spacebar, for switch input type in mac OS."
              }
            ]
          },
          "extra_description_text": "for mac/hhkb: right_command -> left_control + spacebar, for switch input type."
        },
        {
          "path": "json/open_terminal_window.json",
          "json": {
            "title": "Open a Terminal window with Ctrl-RAlt-T",
            "rules": [
              {
                "description": "Open a terminal window with Ctrl-RAlt-T"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/keyboard-brightness.json",
          "json": {
            "title": "Keyboard Brightness Adjustment",
            "rules": [
              {
                "description": "command-f1 and f2 to adjust keyboard brightness"
              },
              {
                "description": "command-f5 and f6 to adjust keyboard brightness, same keys as earlier macs"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/keybrightness_F5.json",
          "json": {
            "title": "Keyboard Brightness Adjustment",
            "rules": [
              {
                "description": "Restore keyboard func to M1 Macs by overwriting dictation key, F5 to go up, hold F5 to go down"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mouse_345_changer.json",
          "json": {
            "title": "MacLee's MacOS Mouse 3/4/5 Changer (3: close tab, 4/5: move tabs)",
            "rules": [
              {
                "description": "Mouse 3 Close Single Tab"
              },
              {
                "description": "Mouse 4 Backward Tab Move"
              },
              {
                "description": "Mouse 5 Forward Tab Move"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "Device Specific",
      "id": "device-specific",
      "files": [
        {
          "path": "json/keypadAsLauncher.json",
          "json": {
            "title": "Keypad as App Launcher",
            "maintainers": [
              "Mikadifo"
            ],
            "rules": [
              {
                "description": "Remap your keypad as an app launcher, programmed keypads(1-9)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/matias_ergo_pro.json",
          "json": {
            "title": "Matias Ergo Pro Keyboard",
            "maintainers": [
              "mingaldrichgan"
            ],
            "rules": [
              {
                "description": "Matias Ergo Pro Keyboard: Change navigation keys to right_option if pressed with another key"
              },
              {
                "description": "Matias Ergo Pro Keyboard: Change right_control to b if pressed alone, or while typing"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/typematrix_bepo_cut_copy_paste_fn_shortcuts.json",
          "json": {
            "title": "Typematrix 2030 USB pc style Copy/Cut/Paste - BEPO layout",
            "rules": [
              {
                "description": "Function Copy"
              },
              {
                "description": "Function Cut"
              },
              {
                "description": "Function Paste"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/typematrix_cut_copy_past_fn_keys.json",
          "json": {
            "title": "Typematrix 2030 USB pc style Copy/Cut/Paste",
            "rules": [
              {
                "description": "Function Copy"
              },
              {
                "description": "Function Cut"
              },
              {
                "description": "Function Paste"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/r400.json",
          "json": {
            "title": "Logitech R400",
            "rules": [
              {
                "description": "Map presenter keys for use with Skim"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/vi_pedal_mode.json",
          "json": {
            "title": "Using Vi with Footpedal",
            "rules": [
              {
                "description": "Right footpedal down hits i for edit mode, up hits escape for normal mode"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/mouse_button3_to_back.json",
          "json": {
            "title": "mouse_button3_to_back_action(command + left_arrow)",
            "rules": [
              {
                "description": "Mouse button3 to back in web. NOTE: Default key setting"
              },
              {
                "description": "Mouse button3 to back in web. NOTE: left_command and left_option is changed to each other. "
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/hub16-launchapps.json",
          "json": {
            "title": "Hub16 Apps",
            "rules": [
              {
                "description": "Launch apps with Hub16 macropad (template)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/NuType-F1.json",
          "json": {
            "title": "NuPhy NuType F1 keyboard",
            "rules": [
              {
                "description": "Change fn+escape to escape"
              },
              {
                "description": "Change escape to grave accent and tilde"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/quattro_tkl_for_mac_jis.json",
          "json": {
            "title": "ARCHISS Quattro TKL for macOS JIS",
            "rules": [
              {
                "description": "L-Button/R-Buttonを英数/かなへ代替"
              },
              {
                "description": "Ctrl+Buttonをマウスクリックへ代替"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/durgod-iso-uk-pt-extras-macos.json",
          "json": {
            "title": "British Keyboard (DURGOD Taurus K320) on MacBook Pro with pt-PT support",
            "rules": [
              {
                "description": "Swap Win/CMD, Alt/Opt and App/Opt"
              },
              {
                "description": "Backslash"
              },
              {
                "description": "Pipe"
              },
              {
                "description": "Non-US pound aka hash and tilde (using shift)"
              },
              {
                "description": "@ symbol"
              },
              {
                "description": "€ symbol"
              },
              {
                "description": "AltGr Win ~ behaviour (ex: ã)"
              },
              {
                "description": "AltGr Win ^ behaviour (ex: â)"
              },
              {
                "description": "á using Alt/Option like on Windows"
              },
              {
                "description": "é using Alt/Option like on Windows"
              },
              {
                "description": "í using Alt/Option like on Windows"
              },
              {
                "description": "ó using Alt/Option like on Windows"
              },
              {
                "description": "ú using Alt/Option like on Windows"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/Razer_Tartarus_v2.json",
          "extra_description_path": "extra_descriptions/Razer_Tartarus_v2.json.html",
          "json": {
            "title": "Razer Tartarus v2",
            "maintainers": [
              "rbradcurtis"
            ],
            "rules": [
              {
                "description": "Razer 01 to Left_Shift-Left_Option-a"
              },
              {
                "description": "Razer 02 to Left_Shift-Left_Option-b"
              },
              {
                "description": "Razer 03 to Left_Shift-Left_Option-c"
              },
              {
                "description": "Razer 04 to Left_Shift-Left_Option-d"
              },
              {
                "description": "Razer 05 to Left_Shift-Left_Option-e"
              },
              {
                "description": "Razer 06 to Left_Shift-Left_Option-f"
              },
              {
                "description": "Razer 07 to Left_Shift-Left_Option-g"
              },
              {
                "description": "Razer 08 to Left_Shift-Left_Option-h"
              },
              {
                "description": "Razer 09 to Left_Shift-Left_Option-i"
              },
              {
                "description": "Razer 10 to Left_Shift-Left_Option-j"
              },
              {
                "description": "Razer 11 to Left_Shift-Left_Option-k"
              },
              {
                "description": "Razer 12 to Left_Shift-Left_Option-l"
              },
              {
                "description": "Razer 13 to Left_Shift-Left_Option-m"
              },
              {
                "description": "Razer 14 to Left_Shift-Left_Option-n"
              },
              {
                "description": "Razer 15 to Left_Shift-Left_Option-o"
              },
              {
                "description": "Razer 16 to Left_Shift-Left_Option-p"
              },
              {
                "description": "Razer 17 to Left_Shift-Left_Option-q"
              },
              {
                "description": "Razer 18 to Left_Shift-Left_Option-r"
              },
              {
                "description": "Razer 19 to Left_Shift-Left_Option-s"
              },
              {
                "description": "Razer Trigger to tab"
              }
            ]
          },
          "extra_description_text": "Use the Razer Tartarus v2 without the Razer Synapse software. Razer no longer supports MacOS (after 10.14) with their Synapse software solution. In order to continue using the product, the buttons on the game pad must be remapped so as to not conflict with keys on the \"normal\" keyboard. This configuration remaps each button on the keypad to a key sequence not likely to match any normal. This configuration is device-specific to the Tartarus v2 (vendor_id=5426, product_id=555) but minor tweaks should be possible to support other devices from Razer. Feedback: bcurtis@gmail.com Keypad Button Mapping 1 [Left Shift] + [Left Option] + a 2 [Left Shift] + [Left Option] + b 3 [Left Shift] + [Left Option] + c 4 [Left Shift] + [Left Option] + d 5 [Left Shift] + [Left Option] + e 6 [Left Shift] + [Left Option] + f 7 [Left Shift] + [Left Option] + g 8 [Left Shift] + [Left Option] + h 9 [Left Shift] + [Left Option] + i 10 [Left Shift] + [Left Option] + j 11 [Left Shift] + [Left Option] + k 12 [Left Shift] + [Left Option] + l 13 [Left Shift] + [Left Option] + m 14 [Left Shift] + [Left Option] + n 15 [Left Shift] + [Left Option] + o 16 [Left Shift] + [Left Option] + p 17 [Left Shift] + [Left Option] + q 18 [Left Shift] + [Left Option] + r 19 [Left Shift] + [Left Option] + s 20 [Space] (not remapped) Scroll Wheel not remapped Thumb button (Trigger) [Tab] Arrows (U/D/L/R) not remapped"
        },
        {
          "path": "json/rog_chakram_joystick.json",
          "extra_description_path": "extra_descriptions/rog_chakram_joystick.html",
          "json": {
            "title": "ROG Chakram Joystick",
            "maintainers": [
              "gtavanez"
            ],
            "rules": [
              {
                "description": "Right Arrow to Move Right a Space"
              },
              {
                "description": "Left Arrow to Move Left a Space"
              },
              {
                "description": "Up Arrow override"
              },
              {
                "description": "Down Arrow override"
              }
            ]
          },
          "extra_description_text": "Remap the ROG Chakram Joystick! Since Asus doesn't have any software to map out the keys in MacOS (despite what you define in Windows, being carried trough in the mouse internal settings), there was no way to make them have a different behaviour. Set out to redefine the joystick keys (the side keys are not recognised, and hadn't had the time to dwelve into that yet). This configuration is device-specific to the ROG Chakram (vendor_id=2821, product_id=6371), and so far only the joystick keys, in digital mode, have been mapped. For the config to work properly, you'll need to enable the device keyboard mode, in Karabiner Elements Preferences -> Devices: This is my mapping: Mouse Button Mapping Joystick Up (mapped as Up Arrow) [Left Control] + Up Arrow Joystick Down (mapped as Down Arrow) [Left Control] + Down Arrow Joystick Right (mapped as Right Arrow) [Left Control] + Right Arrow Joystick Left (mapped as Left Arrow) [Left Control] + Left Arrow"
        },
        {
          "path": "json/Microsoft_Ergonomic_Desktop.json",
          "extra_description_path": "extra_descriptions/Microsoft_Ergonomic_Desktop.json.html",
          "json": {
            "title": "Microsoft Ergonomic Desktop (RJU-00004)",
            "rules": [
              {
                "description": "Map the keyboard emojis key to macOS emojis popup."
              },
              {
                "description": "Map the O365 key to right command key."
              },
              {
                "description": "Map the application key to left command key."
              },
              {
                "description": "Map the keyboard screenshot area key to Cmd+Shift+0 for Lightshot App"
              },
              {
                "description": "Map the keyboard magnifying glass key to open calculator"
              },
              {
                "description": "Map the keyboard window in brakets key to open finder"
              },
              {
                "description": "Map the keyboard special key 1 to open Chrome app"
              },
              {
                "description": "Map the keyboard special key 2 to open Firefox"
              },
              {
                "description": "Map the keyboard special key 3 to open Webex app"
              },
              {
                "description": "Mouse button5 to forward (cmd+])"
              },
              {
                "description": "Mouse button4 to forward (cmd+[)"
              }
            ]
          },
          "extra_description_text": "Microsoft Ergonomic Desktop This complex modification adds full support to keyboard keys and mouse buttons that would otherwise not work as intended in the Microsoft Ergonomic Desktop. Features Enables the mouse back and forward buttons. Enables the top row of special keys. Remaps a few other Windows specific keys. Included key bindings Emoji Key Cmd+Ctrl+Spacebar O365 Key Right Command Application Key Left Command Screenshot area key Cmd+Shift+0 for Lightshot App Magnifying glass key Open Calculator Window in brackets key (top row) Open Finder Special key 1 (top row) Open Chrome Browser Special key 2 (top row) Open Firefox Browser Special key 3 (top row) Open Webex App Usage notes There's two keys that are impossible to map, the Calculator key and the Media Player key. Volume and media playback buttons work out of the box. I wish the Application key wasn't there, but since it's there I mapped it to the Cmd key, which means both the Application and Window key work as the same. It is important to load the Emoji remapping first and then the O365 button one, otherwise the emoji button will behave differently and just open the Spotlight. Feel free to manually modify any of the mappings to match personal preference."
        },
        {
          "path": "json/microsoft_sculpt_ergonomic_desktop.json",
          "extra_description_path": "extra_descriptions/microsoft_sculpt_ergonomic_desktop.json.html",
          "json": {
            "title": "Microsoft Sculpt Ergonomic Desktop (L5V-00001)",
            "rules": [
              {
                "description": "Swap left Alt key and Windows key"
              },
              {
                "description": "Swap right Alt key and Menu/Application key"
              },
              {
                "description": "Map 'Task View' key (F2 key) to launching 'Mission Control.app'"
              },
              {
                "description": "Map 'Desktop Left' key (F3 key) to 'Move left a space' action"
              },
              {
                "description": "Map 'Desktop Right' key (F4 key) to 'Move right a space' action"
              },
              {
                "description": "Map 'Cortana/Search' key (F5 key) to launching 'Spotlight'"
              },
              {
                "description": "Map 'Share' key (F6 key) to launching 'AirDrop.app'"
              },
              {
                "description": "Map 'Connect' key (F7 key) to launching 'Screen Sharing.app'"
              },
              {
                "description": "Map 'Windows Settings' key (F8 key) to launching 'System Preferences.app'"
              },
              {
                "description": "Map 'Back' button to 'Back' action"
              },
              {
                "description": "Map Windows button to launching 'Launchpad.app'"
              }
            ]
          },
          "extra_description_text": "Microsoft Sculpt Ergonomic Desktop (L5V-00001) This set of complex modifications provides macOS-friendly customizations to Microsoft Sculpt Ergonomic Desktop (L5V-00001). Customizations Swaps the Option keys and the Command keys so that their arrangement matches that of Apple keyboards. Maps the top row of keys as controls for similar, built-in macOS features. Maps the 'Back' mouse button to the 'Back' action. Maps the Windows mouse button to launching 'Launchpad.app'. Usage Toggle Fn Switch on Keyboard Move the Fn toggle on Microsoft Sculpt Ergonomic Keyboard to the blue position so that the top row of keys work as controls for built-in macOS features. Change Top Row of Keys to Work as Standard Function Keys This puts Karabiner-Elements (as opposed to macOS) in charge of mapping key codes to controls for built-in macOS features. This also disables the default 'Function keys' mappings shipped with Karabiner-Elements so that customizations would not be overriden down the Input Event Modification Chain. Choose Apple menu  > System Preferences. Click Keyboard. Select \"Use F1, F2, etc. keys as standard function keys\". Notes The 'Home' key (F1 key) and the 'Calculator' key are impossible to map. This is due to macOS not being able to receive the scancodes from these keys. Media playback control keys do not need special treatments as they work out of the box."
        },
        {
          "path": "json/razer_orbweaver_chroma.json",
          "json": {
            "title": "Razer Orbweaver Chroma",
            "rules": [
              {
                "description": "Razer 01 to Up Arrow"
              },
              {
                "description": "Razer 02 to F1"
              },
              {
                "description": "Razer 03 to F2"
              },
              {
                "description": "Razer 04 to F3"
              },
              {
                "description": "Razer 05 to ]"
              },
              {
                "description": "Razer 06 to Left Arrow"
              },
              {
                "description": "Razer 07 to F4"
              },
              {
                "description": "Razer 08 to F5"
              },
              {
                "description": "Razer 09 to F6"
              },
              {
                "description": "Razer 10 to V"
              },
              {
                "description": "Razer 11 to Left Shift"
              },
              {
                "description": "Razer 12 to F7"
              },
              {
                "description": "Razer 13 to F8"
              },
              {
                "description": "Razer 14 to F9"
              },
              {
                "description": "Razer 15 to K"
              },
              {
                "description": "Razer 16 to Left Alt"
              },
              {
                "description": "Razer 17 to F10"
              },
              {
                "description": "Razer 18 to F11"
              },
              {
                "description": "Razer 19 to F12"
              },
              {
                "description": "Razer 20 to ."
              },
              {
                "description": "Razer Trigger to Escape"
              },
              {
                "description": "Razer Left Arrow to Q"
              },
              {
                "description": "Razer Right Arrow to E"
              },
              {
                "description": "Razer Up Arrow to W"
              },
              {
                "description": "Razer Down Arrow to S"
              },
              {
                "description": "Razer Space to M"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/keychron_k3-swap_pound_and_hash.json",
          "json": {
            "title": "Keychron K3 Remap £ to # for British Keyboard",
            "maintainers": [
              "fredericrous"
            ],
            "rules": [
              {
                "description": "Remap £ to # only on your Keychron"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/hhkb_rctf.json",
          "json": {
            "title": "HHKB RCtF (Right Cmd to Fn)",
            "rules": [
              {
                "description": "HHKB RCtF: Function keys"
              },
              {
                "description": "HHKB RCtF: Ins, Del"
              },
              {
                "description": "HHKB RCtF: Home, End, PgUp, PgDn"
              },
              {
                "description": "HHKB RCtF: PSc/SRq, ScrLk, Pus/Brk"
              },
              {
                "description": "HHKB RCtF: Arrow keys"
              },
              {
                "description": "HHKB RCtF: Numpad keys"
              },
              {
                "description": "HHKB RCtF: Consumer keys"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/PC-Style_Shortcuts_Copy_Ctrl_Insert.json",
          "json": {
            "title": "PC-Style Shortcuts",
            "rules": [
              {
                "description": "PC-Style Copy(Ctrl+Insert) for JIS keyboard"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/yubikey_disable_keystrokes.json",
          "extra_description_path": "extra_descriptions/yubikey_disable_keystrokes.json.rb.html",
          "json": {
            "title": "Disable YubiKey 5C Nano Keystrokes @jonatasrenan",
            "rules": [
              {
                "description": "Disable YubiKey 5C Nano Keystrokes @jonatasrenan"
              }
            ]
          },
          "extra_description_text": "This is for you if when you touch YubiKey 5C Nano, it types like a cat walking on your keyboard. Author: @jonatasrenan"
        },
        {
          "path": "json/Microsoft_Natural_keyboard_4000.json",
          "extra_description_path": "extra_descriptions/Microsoft_Natural_keyboard_4000.html",
          "json": {
            "title": "MS Natural Keyboard 4000",
            "rules": [
              {
                "description": "Microsoft Natural Ergonomic Keyboard 4000"
              }
            ]
          },
          "extra_description_text": "Microsoft Natural Ergonomic Keyboard 4000 Adjustments Device Info Specifically written for a device with these identifiers: { \"product_id\": 219, \"vendor_id\": 1118 } Mappings: MacOS: Remaps the Home and End keys to move to the start and end of the line respectively, except for in iTerm2 and Vim."
        },
        {
          "path": "json/logitech-g502-hero-shortcuts.json",
          "extra_description_path": "extra_descriptions/logitech-g502-hero-shortcuts.json.html",
          "json": {
            "title": "Logitech G503 Hero",
            "rules": [
              {
                "description": "Middle mouse button to mission control"
              },
              {
                "description": "G5 button to right arrow"
              },
              {
                "description": "G4 button to left arrow"
              }
            ]
          },
          "extra_description_text": "Logitech G502 Hero Mouse Shortcuts This rule adds shortcuts to Logitech G502 Hero Mouse to replace Logitech GHub's common controls Button3 (Middle Mouse Button) &rarr; Mission Control G4 &rarr; &larr; (Left Arrow) G5 &rarr; &rarr; (Right Arrow) G4 and G5 also support any modifiers so following options are possible: G4 + Control &rarr; Previous Workspace G5 + Control &rarr; Next Workspace"
        }
      ]
    },
    {
      "name": "Personal Settings",
      "id": "personal-settings",
      "files": [
        {
          "path": "json/personal_mutoe.json",
          "json": {
            "title": "HHKB modifiers for mutoe (Tab key)",
            "rules": [
              {
                "description": "Change left_shift to caps_lock if pressed alone."
              },
              {
                "description": "Tab + hjkl to arrow keys"
              },
              {
                "description": "Tab + uiyo to shift + arrow keys"
              },
              {
                "description": "Tab + nm,. to home/pgup/pgdown/end"
              },
              {
                "description": "Tab + 1234567890-= to F1-F12"
              },
              {
                "description": "Tab + backspace to delete"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_thooams.json",
          "json": {
            "title": "Personal Thooams Remapping",
            "rules": [
              {
                "description": "Map Ctrl+Backspace-Delete to Fn+Backward-Delete (suppr current character)"
              },
              {
                "description": "Map Left Option + Spacebar to Enter"
              },
              {
                "description": "Map Left Option with j/k/l/; to Arrows (QWERTY alt)"
              },
              {
                "description": "Map Left Shift plus Left Option with j/k/l/; to Page Arrows (QWERTY alt)"
              },
              {
                "description": "While using Programmer Bepo, holding command temporarily switches to the Australian qwerty layout."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_jonlev1n.json",
          "json": {
            "title": "personal @jonlev1n",
            "rules": [
              {
                "description": "Change Control + i/j/k/l to Arrows"
              },
              {
                "description": "Change Option + j/l to beginning/end of word"
              },
              {
                "description": "Change CMD + j/l to command left_arrow/right_arrow"
              },
              {
                "description": "Control and -/= to display brightness"
              },
              {
                "description": "Control and 1/2/3 to rewind/play_or_pause/fastforward"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/AF_Launch_Apps.json",
          "json": {
            "title": "Launch MacOS apps",
            "rules": [
              {
                "description": "Launch apps by right option+letters."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/hai.json",
          "json": {
            "title": "Hai HHKB: when(right_cmd->fn) jkil->arrow && ,->pageup && .->pagedown && 4->F4 && [->back && ]->forward",
            "rules": [
              {
                "description": "Hai HHKB: fn+`j`=arrow_left, fn+`k`==arrow_down, fn+`i`=arrow_up, fn+`l`=arrow_right"
              },
              {
                "description": "Hai HHKB: fn+`,`=page_up, fn+`.`=page_down"
              },
              {
                "description": "Hai HHKB: fn+`[`=back, fn+`]`=forward"
              },
              {
                "description": "Hai HHKB: fn + 4 = F4"
              },
              {
                "description": "Hai HHKB: Mouse btn4-> back, btn5->forward"
              },
              {
                "description": "Hai HHKB: Mouse btn3-> back, btn4->forward"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_minacle.json",
          "extra_description_path": "extra_descriptions/personal_minacle.json.html",
          "json": {
            "conditions": [
              {
                "identifiers": [
                  {
                    "is_built_in_keyboard": false,
                    "is_keyboard": true
                  }
                ],
                "type": "device_if"
              }
            ],
            "maintainers": [
              "minacle"
            ],
            "rules": [
              {
                "description": "⌘F3 → Mission Control"
              },
              {
                "description": "(fnF13 → F16), (fnF14 → F17), (fnF15 → F18)"
              },
              {
                "description": "(⌃⌃ → [Aあ][A가])"
              },
              {
                "description": "(⌃␣ → あ가)"
              },
              {
                "description": "([가]⌥any → [A]⌥any), ([가]⌥⇧any → [A]⌥⇧any)"
              }
            ],
            "title": "Minacle Key Customisation"
          },
          "extra_description_text": "⌘F3 → Mission Control Command–F3: Show Desktop by pressing Mission Control with Command key. (fnF13 → F16), (fnF14 → F17), (fnF15 → F18) ※ This rule works only on external keyboards. Fn–F13: Press F16. Fn–F14: Press F17. Fn–F15: Press F18. (⌃⌃ → [Aあ][A가]) Control key: Toggle input method between Japanese and English, or between Korean and English. (⌃␣ → あ가) Control–Space bar: Toggle input method between Japanese and Korean. ([가]⌥any → [A]⌥any), ([가]⌥⇧any → [A]⌥⇧any) ※ This rule works only on Korean input methods. Option–Any key: Change input method to English and re-press key combination. Then change input method to Korean. Option–Shift–Any key: Change input method to English and re-press key combination. Then change input method to Korean."
        },
        {
          "path": "json/personal_rakeshtembhurne_jumping_key_workaround.json",
          "extra_description_path": "extra_descriptions/personal_rakeshtembhurne_jumping_key_workaround.json.html",
          "json": {
            "title": "Personal rules (@rakeshtembhurne) - Workaround for auto-jumping or non functioning keys",
            "rules": [
              {
                "description": "Disable left_option key"
              },
              {
                "description": "Disable key 9 and shift + 9 which is ("
              },
              {
                "description": "Change fn + 9 to 9 and fn + shift + 9 to ("
              }
            ]
          },
          "extra_description_text": "Personal Rules by @rakeshtembhurne. Disables auto jumping keys which are typed-in automatically anytime causing unwanted typed characters or behavior. For me key `left_option` started turning on anytime, causing weird symbols to appear while writing. Also it is in pressed down state always, causing every other key to behave differently. Sometimes I could not even log in as correct password is not being typed. Similar things happened with number 9 key. It started auto typing automatically. This configuration is settings for disabling 'left_option' key and '9' key (which is also a '(' when used with shift key). With these configs applied, normal behavior of key 9 will be disabled and they will only work when they are pressed with 'fn' button. So, fn + 9 will be 9, and fn + shift + 9 will be '('. Disabled keys will be left_option, 9 and shift + 9 which is '('."
        },
        {
          "path": "json/personal_tekezo.json",
          "extra_description_path": "extra_descriptions/personal_tekezo.json.html",
          "json": {
            "title": "Personal rules (@tekezo)",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "Personal rules (@tekezo) (rev 41)",
                "available_since": "13.6.0"
              }
            ]
          },
          "extra_description_text": "Change left_control to lazy left_control (Post spacebar when pressed alone) Post spacebar when left_shift is pressed alone Post command+click when fn is pressed alone Change command+control+f to command+shift+[ Change command+control+j to command+shift+] Change command+control+g to command+[ Change command+control+h to command+] Change button5 + mouse motion to scroll wheel (Post command+click if button5 is clicked alone) Change button6 to command+click Change option+- to ---------- Change option+= to ========== Miscellaneous configuration for apps Change simultaneous escape+1 to display_brightness_decrement Change simultaneous escape+2 to display_brightness_increment"
        },
        {
          "path": "json/personal_tekezo_simple_vi_mode.json",
          "extra_description_path": "extra_descriptions/personal_tekezo_simple_vi_mode.json.html",
          "json": {
            "title": "Personal rules (@tekezo) simple_vi_mode (rev 4)",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "Simple Vi Mode v3 (rev 4)",
                "available_since": "13.6.0"
              }
            ]
          },
          "extra_description_text": "Simple Vi Mode v3 (rev 3) You can change keys while s key is pressed down. Simple Vi Mode will be active by the following procedure. s key_down any keys of vi operation key_down (h, j, k, l,...) any keys of vi operation key_up (h, j, k, l,...) Then Simple Vi Mode is active until you release s key. Example: Press s Press j Press k Release j Release k Release s Key bindings: h: left arrow j: down arrow k: up arrow l: right arrow f: fn c: left control v: left option b: left command"
        },
        {
          "path": "json/personal_tekezo_launcher_mode_v4.json",
          "json": {
            "title": "Personal rules (@tekezo) Launcher Mode v4",
            "maintainers": [
              "tekezo"
            ],
            "rules": [
              {
                "description": "Launcher Mode v4 (rev 18)",
                "available_since": "13.1.4"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_apm1467.json",
          "extra_description_path": "extra_descriptions/personal_apm1467.json.html",
          "json": {
            "title": "Personal rules (@apm1467)",
            "rules": [
              {
                "description": "right_command + j/k → switch between tabs in applications"
              },
              {
                "description": "right_option → shift + command + option"
              },
              {
                "description": "shift + command + option + s → redo with sudo"
              },
              {
                "description": "shift + command + option + spacebar → open screenshot panel"
              },
              {
                "description": "shift + command + option + equal_sign → 20 equal signs"
              },
              {
                "description": "shift + command + option + hyphen → 20 hyphens"
              }
            ]
          },
          "extra_description_text": "right_option + V → Paste and Match Style right_option + S → Redo the last command in terminal with sudo up_arrow control + A \"sudo\" spacebar return Click a link while pressing right_option → Open link in a new window right_option + equal_sign/hyphen → produce a horizontal rule in code comment"
        },
        {
          "path": "json/personal_bavelee_20200321.json",
          "json": {
            "title": "Personal PC-Style Shortcuts(@Bave Lee)",
            "rules": [
              {
                "description": "Home key to the beginning of the sentence (Command + Left). Doesnt work in terminal"
              },
              {
                "description": "Home key to the beginning of the line (Control + a)"
              },
              {
                "description": "End key to the end of the line (Control + e)"
              },
              {
                "description": "End key to the end of the sentence (Command + Right). Doesnt work in terminal"
              },
              {
                "description": "PC-Style Home/End"
              },
              {
                "description": "PC-Style Paste(Shift+Insert) for JIS keyboard"
              },
              {
                "description": "Option(Alt)+Tab as Switch Application (Command+Tab)"
              },
              {
                "description": "PC-Style Control+Up/Down/Left/Right"
              },
              {
                "description": "PC-Style Copy/Paste/Cut"
              },
              {
                "description": "PC-Style Undo"
              },
              {
                "description": "PC-Style Redo"
              },
              {
                "description": "PC-Style Select-All"
              },
              {
                "description": "PC-Style Save"
              },
              {
                "description": "PC-Style Spotlight Search (Command+S)"
              },
              {
                "description": "PC-Style Switch Input (Command+Space)"
              },
              {
                "description": "PC-Style Quit Application (Alt+F4 to Command+Q)"
              },
              {
                "description": "Command+E Opens Finder"
              },
              {
                "description": "PC-Style Back/Forward (Alt+Left Arrow/Alt+Right Arrow)"
              },
              {
                "description": "PC-Style Browser Zoom (Ctrl+Plus/Minus/0)"
              },
              {
                "description": "PC-Style Control+Delete/Backspace"
              },
              {
                "description": "Home key to the beginning of the line (Control + a)"
              },
              {
                "description": "End key to the end of the line (Control + e)"
              },
              {
                "description": "Home key to the beginning of the sentence (Command + Left). Doesnt work in terminal"
              },
              {
                "description": "End key to the end of the sentence (Command + Right). Doesnt work in terminal"
              },
              {
                "description": "PC-Style Home/End"
              },
              {
                "description": "PC-Style Paste(Shift+Insert) for JIS keyboard"
              },
              {
                "description": "PC-Style Paste(Shift+Fn) for ANSI keyboard"
              },
              {
                "description": "Option(Alt)+Tab as Switch Application (Command+Tab)"
              },
              {
                "description": "PC-Style Control+Up/Down/Left/Right"
              },
              {
                "description": "PC-Style Copy/Paste/Cut"
              },
              {
                "description": "PC-Style Undo"
              },
              {
                "description": "PC-Style Redo"
              },
              {
                "description": "PC-Style Select-All"
              },
              {
                "description": "PC-Style Save"
              },
              {
                "description": "PC-Style Find"
              },
              {
                "description": "PC-Style Spotlight Search (Command+S)"
              },
              {
                "description": "PC-Style Switch Input (Command+Space)"
              },
              {
                "description": "PC-Style Quit Application (Alt+F4 to Command+Q)"
              },
              {
                "description": "Command+E Opens Finder"
              },
              {
                "description": "PC-Style Reload(F5, Ctrl+R)"
              },
              {
                "description": "PC-Style Browser Zoom (Ctrl+Plus/Minus/0)"
              },
              {
                "description": "PC-Style Quit Application (Alt+F4 to Command+Q)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_drazcmd.json",
          "json": {
            "title": "Personal rules (@drazcmd)",
            "rules": [
              {
                "description": "Custom Easy Modifier Mode [F as Trigger Key] - for use with personal BTT setup"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_funck.json",
          "json": {
            "title": "Personal rules (@funck)",
            "rules": [
              {
                "description": "Map left_control to right_option"
              },
              {
                "description": "Holding both Left Option+Left Control will map to Right Option + Right Shift"
              },
              {
                "description": "Holding both Left Option+Left Control will map to Right Option + Right Shift, 2 (enable both)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_jeebak.json",
          "extra_description_path": "extra_descriptions/personal_jeebak.json.html",
          "json": {
            "title": "Personal rules (@jeebak)",
            "rules": [
              {
                "description": "TouchCursor Extended Mode [Space as Trigger Key]"
              },
              {
                "description": "TouchCursor Extended Mode [Space-{1-0,-,=} to {F1-F10,F11,F12}]"
              },
              {
                "description": "Tab Modifier Mode [Tab as Trigger Key]"
              },
              {
                "description": "MouseCursor Mode [D as Trigger Key]"
              },
              {
                "description": "Number Row Modifiers"
              },
              {
                "description": "Home Row Modifiers"
              }
            ]
          },
          "extra_description_text": "These rules are to accommodate a 60% keyboard, and to minimize (or eliminate) curling thumbs and pinkies for the modifier keys. TouchCursor Extended Mode [Space as Trigger Key] (use with Change caps_lock to control if pressed with other keys, to escape if pressed alone.) Most default TouchCursor bindings (minus \"y\" to \"Insert\",) plus: Space-left_shift to ⌥-spacebar (Alfred) Space-{a,e,r} to {⌥-any,⌘-any,⇧-any} Space-a to ⌘-a, if alone Space-e to ⌘-n, if alone Space-r to ⌘-r, if alone Space-{⇥,q,w} to {⌥-⇥,⌘-⇥,⌃-⇥} [shift modifier allowed] Space-{b,t,s} to {`,~,spacebar} Space-{d,f,g,comma,period} to {⌘-w,⌘-f,⌘-g,⌘-t,⌘-⇧-t} Space-{z,x,c,v} to {⌘-z,⌘-x,⌘-c,⌘-v} Space-{1-0,-,=} to {F1-F10,F11,F12} Misc Personalizations Space-; to ⌘-⌃-; [custom shortcut to: Move left a space] Space-' to ⌘-⌃-' [custom shortcut to: Move right a space] Space-/ to shell_command [custom script to: Toggle iTerm maximized] Space-right_shift to ⌘-⌃-/ [custom shortcut to: Application windows] Space-↩ to mission_control Media keys Space-⎋ and Space-` to rewind Space-⌫ to fastforward Space-y to mute Space-[ to volume_decrement Space-] to volume_increment Space-\\ to play_or_pause Tab Modifier Mode [Tab as Trigger Key] Hyper: ⌘⇧⌥⌃-[x] Mostly map Tab-[x] to corresponding Hyper-[x], primarily used for Hammerspoon, or other apps Conditional exceptions from above Hyper mappings: Tab-r to ⌥-⌘-r [Used to \"Resume Program\" in JetBrains Debugger, Hyper-r otherwise] MouseCursor Mode [D as Trigger Key] press a for \"accelerated\" (faster) movement press f for \"fine-grained\" (slower) movement Movement j: mouse left i: mouse up k: mouse down l: mouse right Scroll u: scroll left o: scroll right h: scroll up n: scroll down Left Hand Buttons w: left click g: left click v: middle click s: right click Right Hand Buttons m: left click p: right click /: middle click ;: button4 ': button5 Number Row Modifiers (use with Change caps_lock to control if pressed with other keys, to escape if pressed alone.) Number row to ⌘ and ⌥ Tap for {4,5,6,7,8}, hold for ⌘ Tap for {1,2,3,0,-,=}, hold for ⌥ Home Row Modifiers (use with Change caps_lock to control if pressed with other keys, to escape if pressed alone.) Right Hand Pinky ⌘ and ⌥ Tap for ;, hold for ⌘ Tap for ', hold for ⌥"
        },
        {
          "path": "json/personal_rubocoptero.json",
          "json": {
            "title": "Personal rules (@rubocoptero)",
            "rules": [
              {
                "description": "Change right_option to shift+control+f13"
              },
              {
                "description": "Change application to shift+control+f13"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_wgj.json",
          "json": {
            "title": "Personal rules (@wgj)",
            "rules": [
              {
                "description": "Change insert to left_option+escape (VoiceOver)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_yqrashawn.json",
          "extra_description_path": "extra_descriptions/personal_yqrashawn.json.html",
          "json": {
            "title": "Personal rules (@yqrashawn)",
            "rules": [
              {
                "description": "Alfred Mode"
              },
              {
                "description": "yq Launch Mode"
              },
              {
                "description": "Quick Insert Mode"
              },
              {
                "description": "Slash Mode"
              },
              {
                "description": "FILCO MINILA Swap grave_accent_and_tilde and backslash"
              },
              {
                "description": "FILCO MINILA Change left command to left option, and f18 if alone"
              },
              {
                "description": "FILCO MINILA Change left_option to f19 to left command, and 19 if alone"
              },
              {
                "description": "FILCO MINILA Change application to right option, and f17 when used alone"
              },
              {
                "description": "FILCO MINILA Change right option to right command, and f16 when used alone"
              },
              {
                "description": "HHKB, FILCO MINILA Change left control to esc if alone"
              },
              {
                "description": "Change caps_lock to control when used as modifier, escape when used alone"
              },
              {
                "description": "Change right_command to command-tab when used alone"
              },
              {
                "description": "Change left_command to f19 if alone"
              },
              {
                "description": "Change left_option to f18 if alone"
              },
              {
                "description": "Change right_option to f17 if alone"
              },
              {
                "description": "Change right_command to f16 if alone"
              }
            ]
          },
          "extra_description_text": "Alfred Mode (z) Press z down then click other keys to trigger Alfred workflow This mode severely relays on Alfred Workflow. Download workflows here y: Hyper + = trigger youdao workflow j: Search github tab: Switch to chosen iTerm session x: Kill process t: Launch Tower.app with chosen repo b: Switch chosen to browser tab r: Open recent download file l: Trigger Alfred File Action in Finder.app l: Trigger devtool in browsers o: Copy selection into emacs for temp edit p: Paste the saved temp buffer back ;: Open localhost with entered port number q: Use Keyboard Maestro record macro ]: Play last macro once yq Launch Mode (w) Press w down then click other keys to bring application to front. Press w down then press [ down to enter second level of this mode. This mode severely relays on Alfred Workflow. j: iTerm k: Emacs l: Google Chrome c: Safari m: Mail t: Tower b: BearyChat v: WeChat [r: Reeder Quick Insert Mode (period) Press period down then click other keys to insert or trigger workflow. Press period down then press comma down to enter second level of this mode. Some rules in this mode need to use with some specific emacs key bindings. tab: control+tab emacs:(switch-to-second-most-recent-buffer) comma+tab: control+tab emacs:(switch-to-third-most-recent-buffer) a: insert ~/ s: insert .* slash: insert ./ q: insert { comma+q: insert } e: insert ( r: insert ) g: command+control+k alfred clipboard d: command+control+d Mac OS define Slash Mode (period) Press period down then click other keys to insert or trigger workflow. tab: command+tab switch to previous application Other modifications Mainly bind option and command keys to function keys, and then use with other applications. MINILA modification aiming to make it more like HHKB. Modifications with keyboard name in their descriptions can't work on other keyboard. Caps Lock to escape when pressed alone and to control as modifier key Control to escape when pressed alone on HHKB and MINILA Left command to f19 when pressed alone, trigger alfred Left option to f18 when pressed alone, trigger context Right option to f17 when pressed alone Right command to f16 when pressed alone Right command to command+tab when pressed alone"
        },
        {
          "path": "json/personal_kbdluv.json",
          "json": {
            "title": "Personal rules (@kbdluv) (rev 2)",
            "rules": [
              {
                "description": "Post Escape if Command_L is pressed alone."
              },
              {
                "description": "Post Escape if Command_R is pressed alone."
              },
              {
                "description": "Post left_control if Spacebar is held down."
              },
              {
                "description": "Post grave_accent_and_tilde if Caps Lock is pressed alone, left_shift if held down. (rev 2)"
              },
              {
                "description": "Post return_or_enter if Enter is pressed alone, right_shift if held down. (rev 2)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_alatas.json",
          "json": {
            "title": "Personal rules (@alatas)",
            "rules": [
              {
                "description": "Change < and \" keys."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_tkrworks.json",
          "json": {
            "title": "Pinkyless Dvorak (Rev.3)",
            "rules": [
              {
                "description": "Pinkyless Dvorak Layout for JIS keyboard layout."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_mingaldrichgan.json",
          "json": {
            "title": "Personal rules (@mingaldrichgan)",
            "maintainers": [
              "mingaldrichgan"
            ],
            "rules": [
              {
                "description": "Change escape/grave_accent_and_tilde/hyphen/equal_sign to fn if pressed with f-keys or delete"
              },
              {
                "description": "Sibelius: Nums keypad workarounds"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/backtick_z_slash_as_ctrl.json",
          "json": {
            "title": "Backtick (grave accent/tilde), Z, or Slash as Ctrl",
            "rules": [
              {
                "description": "Post grave_accent_and_tilde if pressed alone, left_control if held down."
              },
              {
                "description": "Post z if pressed alone, left_control if held down."
              },
              {
                "description": "Post Slash if pressed alone, right_control if held down."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/ultimate_macOS.json",
          "extra_description_path": "extra_descriptions/ultimate_macOS.json.html",
          "json": {
            "title": "ultimate macOS",
            "maintainers": [
              "suliveevil"
            ],
            "homepage": "https://github.com/suliveevil/Capslock",
            "import_url": "karabiner://karabiner/assets/complex_modifications/import?url=https://github.com/pqrs-org/KE-complex_modifications/raw/main/public/json/ultimate_macOS.json",
            "rules": [
              {
                "description": "KBD: BluetoothConverter、IKBC_C87、XD60: Swap Win/CMD and Alt/Opt"
              },
              {
                "description": "CapsLock to Hyper/Escape"
              },
              {
                "description": "Hyper Navigation: 0 4($) HJKL UIOP"
              },
              {
                "description": "Hyper MouseMove: ←↓↑→"
              },
              {
                "description": "Hyper Deletion: N M , ."
              },
              {
                "description": "Hyper Window Control: ⇥ QWAS D"
              },
              {
                "description": "Hyper Bash Control: D ZXCVB"
              },
              {
                "description": "Hyper Application (held down hyper+g to Fn)"
              },
              {
                "description": "Hyper Functional"
              },
              {
                "description": "Hyper Shifter"
              },
              {
                "description": "Hyper Misc    (Check https://github.com/suliveevil/Capslock for all details)"
              }
            ]
          },
          "extra_description_text": "ultimate macOS Project suliveevil/Capslock provides more and detailed info. Latest Update Time(Unix Time): 1554299626 Latest import url: karabiner://karabiner/assets/complex_modifications/import?url=https://raw.githubusercontent.com/suliveevil/Capslock/master/mac/ultimate_macOS.json Basic ✱ Hyper actually maps to ⌃⌥⇧⌘ (all right modifiers) , It works well with additional left modifiers. And compatible with most application. Hold CapsLock to enable Hyper funcationality while press it will emit an Escape. Origin MapsTo Comment ⇪ Press ⎋ Escape Single press to escape ⇪ Hold ✱ Hyper Enable Hyper Functionality Navigation Hold ✱ Hyper to enable navigators Hold additional ⌘ Command for selection . (just like holding ⇧shift in normal) Hold additional ⌥ Command for mouse movement Hold additional ⇧ Command for switching tab/app Hold additional ⌃ Command for desktop management (just like holding ⌃ctrl with arrow key) Origin MapsTo Comment H ← LeftArrow cursor left J ↓ DownArrow cursor down K ↑ UpArrow cursor up L → RightArrow cursor right ⌘H ⇧← LeftArrow cursor left and selection ⌘J ⇧↓ DownArrow cursor down and selection ⌘K ⇧↑ UpArrow cursor up and selection ⌘L ⇧→ RightArrow cursor right and selection ⌥H ← LeftArrow Option + left ⌥J ↓ DownArrow Option + down ⌥K ↑ UpArrow Option + up ⌥L → RightArrow Option + right ⌃H ← LeftArrow expose all ⌃J ↓ DownArrow show desktops ⌃K ↑ UpArrow switch prev desktop ⌃L → RightArrow switch next desktop U ⇞ PageUp cursor page up I ↖ Home cursor to line(doc) head O ↘ End cursor to line(doc) end P ⇟ PageDn cursor page down ⌘U x x leaves to other apps ⌘I x x leaves to other apps ⌘O x x leaves to other apps ⌘P x x leaves to other apps ⌥U x x leaves to other apps ⌥I x x leaves to other apps ⌥O x x leaves to other apps ⌥P xx leaves to other apps ⌃U x x leaves to other apps ⌃I x x leaves to other apps ⌃O x x leaves to other apps ⌃P x x leaves to other apps MouseMove Origin MapsTo Comment ← MouseLeft mouse cursor left ↓ MouseDown mouse cursor down ↑ MouseUp mouse cursor up → MouseRight mouse cursor right ↩ MouseLeft mouse left button click ⌘↩ MouseRight mouse right button click Deletion Origin MapsTo Comment N ⌥⌫ Option + ForwardDelete Delete a word ahead M ⌫ ForwardDelete Delete a char ahead , ⌦ Delete Delete a char after . ⌥⌦ Option + Delete Delete a word after ⌘M,⌘N ⌘⌥⌫ Command+Option+ForwardDelete Delete to line head Window Control Origin MapsTo Comment ⇥ Tab ⌘⇥ Command+Tab Switch Window ⌘⇥ Command+Tab ⌘⇧⇥ Command+Shift+Tab Switch Window Reversely Q ⌘Q Close Window W ⌘W Close Tab A ⌃⌥⇧⌘A Leaves to Moom, ※a window resize app ⌘A ⌃↑ Ctrl+UpArrow OSX Expose All S ⌃⇥ Ctrl+Tab Switch Tab ⌘S ⌃⇧⇥ Ctrl+Shift+Tab Swtich Tab Reversely ⌘D Open Dictionary Find words Bash Control Common bash utils: EOF, SIGINT, SIGTSTP, VIM/Tmux Prefix Origin MapsTo Comment D ⌃D EOF Z ⌃Z SIGTSTP X ⌃R IDE Run C ⌃C SIGINT V ⌃V Vim Prefix B ⌃B Tmux Default Prefix Applications Maybe you'd like overwrite these with your own favorite apps. Origin MapsTo Comment E Open Finder Open File Browser ⌘E Open Safari Open Web Browser R Open iTerm2 Great terminal for osx (Run) ⌘R Open PyCharm Open IDE T Open Visual Studio Code Text Editor: Visual Studio Code ⌘T Open Typora Text Editor: Typora , a great WYSIWYG md editor Y Open Siri F Open Alfred leaves to Alfred ⌘F Open Dash Find API Document G while held down, hyper + g = Fn leaves to BetterAndBetter.app ⌘G Open Chrome Google Chrome Functional Use F1,…F12 as standard functional keys, while hold hyper to turn them back. Origin MapsTo Comment F1 BrightnessDown F2 BrightnessUp F3 ExposeAll F4 LaunchPad F5 KeyboardLightDown F6 KeyboardLightUp F7 MusicPrev F8 MusicPlay F9 MusicNext F10 Mute F11 VolumeDown F12 VolumeUp F13 PrintScreen MusicPrev F14 ScrollLock MusicNext F15 Pause Mute Insert ⌥BrightnessUp Fine grained brightness up Delete ⌥BrightnessDown Fine grained brightness down Home ⌥KeyboardLightUp Fine grained keyboard light up End ⌥KeyboardLightDown Fine grained keyboard light down PgUp ⌥VolumeUp Fine grained volume up PgDn ⌥VolumeDown Fine grained volume down Shifter A more convient shift for most case Origin MapsTo Comment 1 ! Exclamation 2 @ At 3 # Sharp 4 $ Dollar 5 % Percent 6 ^ Caret 7 & Ampersand 8 * Star 9 ( Left Round Bracket 0 ) Right Round Bracket - Minus _ Hyphen = Equal + Plus [ Left Bracket { Left Brace ⇧ Bracket ] Right Bracket } Right Brace ⇧ Bracket \\ Back Slash | Bar ; Semicolon ! Exclamation ' Single Quote = EqualSign ⌘; Semicolon ! Colon ⌘' Single Quote = EqualSign Misc Origin MapsTo Comment ⎋ Escape ⇪ CapsLock Bug: Difficult to turn capslock off after emit ~ BackQuote ⇧⌘4 macOS Area Screenshot to Desktop file ⌘~ Command+BackQuote ⌃⇧⌘4 macOS Area Screenshot to Clipboard ⌫ Backspace ⌘⌫ macOS Delete File / Slash ⌘/ Command+Slash Comment/Uncomment in many IDE / Backslash ⌘/ Command+Slash Comment/Uncomment in many IDE ␢ Spacebar ⌃␢ Ctrl+Spacebar Switch Input Source"
        },
        {
          "path": "json/Richi_Select_Word_PC.json",
          "json": {
            "title": "Richi - Select and Navigate Word PC Style (you must use swap COMMAND and CTRL in other case)",
            "rules": [
              {
                "description": "richi - command+shift+right To options+shift+right "
              },
              {
                "description": "richi - command+shift+left To options+shift+left"
              },
              {
                "description": "richi - command+shift+up To options+shift+up "
              },
              {
                "description": "richi - command+shift+down To options+shift+down"
              },
              {
                "description": "richi - command+right To options+right "
              },
              {
                "description": "richi - command+left To options+left"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_itmammoth.json",
          "json": {
            "title": "Personal rules (@itmammoth)",
            "rules": [
              {
                "description": "Vi binding [Q + hjkl]"
              },
              {
                "description": "Emacs binding [' + aedhk]"
              },
              {
                "description": "Media control [Fn + iop] (for HHKB)"
              },
              {
                "description": "Mission control [Shift(R) *twice*]"
              },
              {
                "description": "Quit application [Cmd + Q *twice*]"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_sunyour.json",
          "json": {
            "title": "Sunn Yao's Personal Configurations",
            "rules": [
              {
                "description": "Change enter to control if pressed with other keys"
              },
              {
                "description": "Change caps_lock to control if pressed with other keys, to escape if pressed alone."
              },
              {
                "description": "Post escape if left_control is pressed alone."
              },
              {
                "description": "Change left_shift to Ctrl-\\ if pressed alone in Emacs"
              },
              {
                "description": "Change right_shift to Ctrl-\\ if pressed alone in Emacs"
              },
              {
                "description": "Change right_shift to Ctrl-Alt-Shift-Command-j if pressed alone in Emacs"
              },
              {
                "description": "Change left_shift to Ctrl-Shift-z if pressed alone outside Emacs and VitualMachine"
              },
              {
                "description": "Change right_shift to Ctrl-Shift-z if pressed alone outside Emacs and VitualMachine"
              },
              {
                "description": "Change left_gui to left_alt in Emacs"
              },
              {
                "description": "Change left_alt to left_gui in Emacs"
              },
              {
                "description": "Change left_gui-spacebar to left_alt-spacebar in Emacs"
              },
              {
                "description": "Change left_gui-spacebar to left_control-\\ in Emacs"
              },
              {
                "description": "Change left_gui-x to left_alt-x in Emacs"
              },
              {
                "description": "Change right_gui to left_control-left_alt"
              },
              {
                "description": "Change right_alt to left_control-left_alt+left_gui"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_karszawa.json",
          "json": {
            "title": "Personal rules (@karszawa)",
            "rules": [
              {
                "description": "Post left_alt + left_arrow (word back) if left_control + , is pressed"
              },
              {
                "description": "Post left_alt + right_arrow (word proceed) if left_control + . is pressed"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/iliaskarim_personal_mapping.json",
          "json": {
            "title": "Personal rules (@iliaskarim)",
            "rules": [
              {
                "description": "Right command to copy"
              },
              {
                "description": "Right option to cut"
              },
              {
                "description": "Right shift to paste"
              },
              {
                "description": "Disable command+c to copy"
              },
              {
                "description": "Disable command+x to cut"
              },
              {
                "description": "Disable command+v to paste"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_sidharthv96.json",
          "json": {
            "title": "Personal rules (@sidharthv96)",
            "rules": [
              {
                "description": "Diamond Nav Mode [; as Trigger Key]"
              },
              {
                "description": "Diamond Nav Mode [E as Trigger Key]"
              },
              {
                "description": "Change delete_or_backspace key to hyper and caps_lock to delete_or_backspace."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/emsspree-personal-rules.json",
          "json": {
            "title": "EmsSpree’s personal rules",
            "rules": [
              {
                "description": "Launchpad: Post 𝗙𝟭𝟯 if 𝓁𝗦𝗛𝗜𝗙𝗧﹢𝗠𝗕𝟯𝟮 is pressed (set 𝗖𝗔𝗣𝗦𝗟𝗢𝗖𝗞 to 𝗠𝗕𝟯𝟮 first)"
              },
              {
                "description": "Show Desktop: Post 𝗠𝗕𝟯𝟬 if 𝓁𝗖𝗧𝗥𝗟﹢𝓁𝗦𝗛𝗜𝗙𝗧﹢𝗠𝗕𝟯𝟮 is pressed (set 𝗖𝗔𝗣𝗦𝗟𝗢𝗖𝗞 to 𝗠𝗕𝟯𝟮 first)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/personal_javier_monton.json",
          "json": {
            "title": "Personal rules (@JavierMonton)",
            "maintainers": [
              "JavierMonton"
            ],
            "rules": [
              {
                "description": "ScrollLock button → Lunch iTerm"
              },
              {
                "description": "Pause button → On/Off GMeet microphone (using Meet Mute)"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "Miscellaneous",
      "id": "miscellaneous",
      "files": [
        {
          "path": "json/block_one_handed_combos.json",
          "json": {
            "title": "Force the user to make key combination with two hands (rev 2)",
            "rules": [
              {
                "description": "Block left-handed shift + left-handed key (rev 2)"
              },
              {
                "description": "Block right-handed shift + right-handed key (rev 2)"
              },
              {
                "description": "Block left-handed control + left-handed key (rev 2)"
              },
              {
                "description": "Block right-handed control + right-handed key (rev 2)"
              },
              {
                "description": "Block left-handed option + left-handed key (rev 2)"
              },
              {
                "description": "Block right-handed option + right-handed key (rev 2)"
              },
              {
                "description": "Block left-handed command + left-handed key (rev 2)"
              },
              {
                "description": "Block right-handed command + right-handed key (rev 2)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_hyphen_and_underscore.json",
          "json": {
            "title": "Exchange hyphen and underscore",
            "rules": [
              {
                "description": "Exchange hyphen and underscore"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/exchange_underscore_and_backslash.json",
          "json": {
            "title": "Exchange underscore and backslash",
            "rules": [
              {
                "description": "Exchange underscore and backslash"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/space_cadet.json",
          "json": {
            "title": "Modern Space Cadet (rev 3)",
            "rules": [
              {
                "description": "Caps Lock to Escape on single press, Control on press and hold."
              },
              {
                "description": "Control to Caps Lock on single press, 'Hyper Key' on press and hold. (rev 2)"
              },
              {
                "description": "Better Shifting: Parentheses on shift keys"
              },
              {
                "description": "Better Shifting: Shift rolls"
              },
              {
                "description": "Better Shifting: End parenthesis on shift + space"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/change_command_l_and_backslash.json",
          "json": {
            "title": "Command_L + backslash to slash",
            "rules": [
              {
                "description": "Command_L + backslash to slash and Command_L + backslash + left_shift to ? due to dead button"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/save_pinky_fingers.json",
          "json": {
            "title": "Save pinky fingers (rev 2)",
            "rules": [
              {
                "description": "Change Control + 8 to Enter"
              },
              {
                "description": "Change Control + 9 to Enter"
              },
              {
                "description": "Change Control + o to Enter"
              },
              {
                "description": "Change Control + 6 to Backspace"
              },
              {
                "description": "Change Control + 7 to Backspace"
              },
              {
                "description": "Change Control + 8 to Backspace"
              },
              {
                "description": "Change Command + Esc to Command + `"
              },
              {
                "description": "Change Command + Shift + 7 to Command + Shift + ["
              },
              {
                "description": "Change Command + Shift + 8 to Command + Shift + ]"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/switch_en_cn_ja_katakana.json",
          "json": {
            "title": "switch English, Chinese, Japanese",
            "rules": [
              {
                "description": "Use option+1/2/3/4 to switch language to English, Chinese, Japanese(Hirakana), Japanese(Katakana), respectively."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/workaround_broken_sw2tabesc.json",
          "json": {
            "title": "Workaround broken s,w,2,tab,esc,< by fn+neighbour on Apple internal kbd only",
            "rules": [
              {
                "description": "Change fn + d to s"
              },
              {
                "description": "Change fn + e to w"
              },
              {
                "description": "Change fn + 3 to 2"
              },
              {
                "description": "Change fn + q to Tab"
              },
              {
                "description": "Change fn + 1 to Esc"
              },
              {
                "description": "Change fn + y to <"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/autoshift.json",
          "json": {
            "title": "Autoshift: Post key if pressed alone, shifted key if held down",
            "rules": [
              {
                "description": "Autoshift Alphabets only: Post alphabets if pressed alone, Capital alphas if held down"
              },
              {
                "description": "Autoshift Numbers only: Post number if pressed alone, shifted number row key if held down"
              },
              {
                "description": "Autoshift Special Characters only: Post key if pressed alone, shifted key if held down"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/shift_r_home_end_keypress.json",
          "json": {
            "title": "right_control to end; and if held, home",
            "rules": [
              {
                "description": "Map right control to end; and if held, home"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/CommandShiftHomeAndEnd.json",
          "json": {
            "title": "Command Shift Home and End",
            "rules": [
              {
                "description": "Command Shift Home to Command Shift Up"
              },
              {
                "description": "Command Shift End to Command Shift Down"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "Command arrows and home end",
      "id": "Command arrows and home end",
      "files": [
        {
          "path": "json/command_h_j_k_l_u_i_to_left_down_up_right_home_end.json",
          "json": {
            "title": "command + h/j/k/l/u/i to arrow keys and home end",
            "rules": [
              {
                "description": "Change Command + h/j/k/l to Arrows"
              },
              {
                "description": "Change Command + u/i to home/end"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "Keychron K2",
      "id": "Keychron K2",
      "files": [
        {
          "path": "json/keychron_k2.json",
          "extra_description_path": "extra_descriptions/keychron_k2.json.html",
          "json": {
            "title": "Change Keychron K2 keyboard layout to more closely resemble an Apple keyboard",
            "rules": [
              {
                "description": "Post right_option if right_control is pressed alone."
              },
              {
                "description": "Exchange right_command and fn."
              },
              {
                "description": "Disable page_up, page_down, home, and end."
              }
            ]
          },
          "extra_description_text": "Keychron K2 This rule modifies the Keychron K2 keyboard layout to more closely resemble an Apple keyboard. Changes right_control to right_option Swaps right_command and fn Disable page_up, page_down, home, and end"
        }
      ]
    },
    {
      "name": "Keychron K6",
      "id": "Keychron K6",
      "files": [
        {
          "path": "json/keychron-k6-shortcuts.json",
          "extra_description_path": "extra_descriptions/keychron-k6-shortcuts.json.html",
          "json": {
            "title": "Keychron K6 Shortcuts",
            "rules": [
              {
                "description": "Shift + Esc to ` Grave Accent"
              },
              {
                "description": "Control + Esc to Tilde"
              },
              {
                "description": "Command + Esc to Command + Tilda"
              },
              {
                "description": "Home to Show Desktop"
              },
              {
                "description": "Page up to spotlight"
              },
              {
                "description": "Page down to mission control"
              }
            ]
          },
          "extra_description_text": "Keychron K6 Shortcuts This rule adds shortcuts to Keychron K6 to follow established muscle memory for window switching from a 100% layout It also adds some extra mac specific shortcuts on less frequently used keys: Home, Page up, Page down Esc &rarr; Escape Shift + Esc &rarr; ` (grave) Control + Esc &rarr; ~ (tilda) Command + Esc &rarr; (Cycle through the current application's windows) Home &rarr; Show Desktop Page Up &rarr; Spotlight Page Down &rarr; Mission Control"
        },
        {
          "path": "json/keychron_k6_better_escape.json",
          "extra_description_path": "extra_descriptions/keychron_k6_better_escape.json.html",
          "json": {
            "title": "Keychron K6 Better Escape Key",
            "rules": [
              {
                "description": "Shift + Esc to ~"
              },
              {
                "description": "Command + Esc to Command + ` (for window switching)"
              },
              {
                "description": "Command + Shift + Esc to Command + ~ (for reverse window switching)"
              }
            ]
          },
          "extra_description_text": "Keychron K6 Better Escape Key This rule modifies the Keychron K6 escape key to follow established muscle memory for window switching and use of ~. The esc key will behave as follows with modifier keys: Unmodified = escape Shift = ~ (tilde) Command = Command + ` (Cycle forward through the current application's windows) Command + Shift = Command + ~ (Cycle backward through the current application's windows)"
        },
        {
          "path": "json/keychron_k6_escapemods.json",
          "json": {
            "title": "Keychron K6 Escape Key/ `/~ modifications",
            "rules": [
              {
                "description": "Shift + Esc to ~"
              },
              {
                "description": "Control + Esc to `"
              },
              {
                "description": "Command + Esc to Command + Tilda"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "Keychron K8",
      "id": "Keychron K8",
      "files": [
        {
          "path": "json/keychron-k8-mic-key-mute-cisco-webex.json",
          "extra_description_path": "extra_descriptions/keychron-k8-mic-key-mute-cisco-webex.json.html",
          "json": {
            "title": "Keychron K8 Microphone Button to Webex Mute",
            "rules": [
              {
                "description": "Focus Webex Meeting Manager Window"
              },
              {
                "description": "Change Fn + Spacebar to Shift + Cmd + M"
              }
            ]
          },
          "extra_description_text": "Keychron K8 This rule modifies the Keychron K8 microphone key (on the top-right) to toggle mute on Cisco Webex (even if the conversation is not in focus). Changes Fn + Space to Gui + Shift + M If Cisco Webex meeting window is not in focus, it will first put the window into focus"
        },
        {
          "path": "json/keychron-k8-mic-key-mute-zoom.json",
          "extra_description_path": "extra_descriptions/keychron-k8-mic-key-mute-zoom.json.html",
          "json": {
            "title": "Keychron K8 Microphone Button to Zoom Mute",
            "rules": [
              {
                "description": "Focus Zoom Meeting Manager Window"
              },
              {
                "description": "Change Fn + Spacebar to Shift + Cmd + A"
              }
            ]
          },
          "extra_description_text": "Keychron K8 This rule modifies the Keychron K8 microphone key (on the top-right) to toggle mute on Zoom (even if the conversation is not in focus). Changes Fn + Space to Gui + Shift + A If Zoom meeting window is not in focus, it will first put the window into focus"
        },
        {
          "path": "json/keychron-k8-mic-key-mute-microsoft-teams.json",
          "extra_description_path": "extra_descriptions/keychron-k8-mic-key-mute-microsoft-teams.json.html",
          "json": {
            "title": "Keychron K8 Microphone Button to Microsoft Teams Mute",
            "rules": [
              {
                "description": "Focus Microsoft Teams Meeting Manager Window"
              },
              {
                "description": "Change Fn + Spacebar to Shift + Cmd + A"
              }
            ]
          },
          "extra_description_text": "Keychron K8 This rule modifies the Keychron K8 microphone key (on the top-right) to toggle mute on Microsoft Teams (even if the conversation is not in focus). Changes Fn + Space to Gui + Shift + M If Microsoft Teams meeting window is not in focus, it will first put the window into focus"
        }
      ]
    },
    {
      "name": "KKmoon",
      "id": "KKmoon",
      "files": [
        {
          "path": "json/kkmoon-usb-foot-switch-mute-microsoft-teams.json",
          "json": {
            "title": "KKmoon USB game foot switch to Microsoft Teams Mute",
            "rules": [
              {
                "description": "Focus Microsoft Teams Meeting Manager Window"
              },
              {
                "description": "Change b to Shift + Cmd + M"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "Others",
      "id": "others",
      "files": [
        {
          "path": "json/Filco_Minila-R_Keyboard.json",
          "json": {
            "title": "Filco Minila-R Keyboard",
            "rules": [
              {
                "description": "` to esc"
              },
              {
                "description": "option + ` to `"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/fn+up-to-down.json",
          "json": {
            "title": "Map fn+up to down",
            "rules": [
              {
                "description": "fn + up to down"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/german_toggle_comment.json",
          "json": {
            "title": "German toggle comment: CMD+/ (EN) to CMD+# (DE)",
            "rules": [
              {
                "description": "German toggle comment: CMD+/ (EN) to CMD+# (DE)"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/map_prtscr_to_screenshot.json",
          "json": {
            "title": "Maps Prtscr to Screenshot",
            "rules": [
              {
                "description": "Printscreen key to Screenshot"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/section_sign_to_forward_delete.json",
          "json": {
            "title": "Section Sign (§) to Forward Delete",
            "maintainers": [
              "Radllaufer"
            ],
            "rules": [
              {
                "description": "Remap section sign (§) to forward delete on British Keyboards. Also forward deletes up to the next space and the whole line with 'option + §' and 'command + §' respectively."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/swap-command-tab-with-control-tab.json",
          "json": {
            "title": "Swap \"command + tab\" with \"control + tab\"",
            "maintainers": [
              "Radllaufer"
            ],
            "rules": [
              {
                "description": "Swap \"command + tab\" with \"control + tab\" for easier use inside applications. For example: switching between tabs in your browser, which now matches the other tab related shortcuts."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/toggle-delete-with-lock-key-for-magic-keyboard.json",
          "json": {
            "title": "Toggle delete with lock key For Magic Keyboard",
            "maintainers": [
              "eunrui"
            ],
            "rules": [
              {
                "description": "Magic Keyboard 防锁屏误触 短按删除 长按锁屏"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    }
  ],
  "example": [
    {
      "name": "Examples: Conditions",
      "id": "example-conditions",
      "files": [
        {
          "path": "json/example_device.json",
          "json": {
            "title": "device_if,device_unless example",
            "rules": [
              {
                "description": "Open Karabiner-Elements by f5 in non-Apple keyboards"
              },
              {
                "description": "Open Karabiner-EventViewer by f6 in HHKB BT JP keyboards"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/example_input_source.json",
          "json": {
            "title": "input_source_if,input_source_unless example",
            "rules": [
              {
                "description": "Toggle input sources (English or Japanese) by grave_accent_and_tilde"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/example_select_input_source.json",
          "json": {
            "title": "select_input_source example",
            "rules": [
              {
                "description": "Change input source to U.S. by left_command, RussianWin by right_command."
              },
              {
                "description": "Change input source to French while right_option is pressed."
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/example_keyboard_type.json",
          "json": {
            "title": "keyboard_type_if, keyboard_type_unless example",
            "rules": [
              {
                "description": "Change control-[ to escape"
              },
              {
                "description": "Change escape to mission_control if keyboard_type != ansi"
              }
            ]
          },
          "extra_description_text": ""
        },
        {
          "path": "json/example_japanese_nicola.json",
          "json": {
            "title": "Japanese NICOLA example (rev 3)",
            "rules": [
              {
                "description": "Japanese NICOLA example (rev 3)"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    },
    {
      "name": "Examples: Others",
      "id": "example-others",
      "files": [
        {
          "path": "json/example_halt.json",
          "json": {
            "title": "to_if_held_down example",
            "rules": [
              {
                "description": "Open Mission Control by hold tab key"
              }
            ]
          },
          "extra_description_text": ""
        }
      ]
    }
  ]
}
